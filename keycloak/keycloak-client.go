// Package keycloak provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package keycloak

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	Access_tokenScopes = "access_token.Scopes"
)

// Access defines model for Access.
type Access struct {
	Roles        *[]string `json:"roles,omitempty"`
	VerifyCaller *bool     `json:"verify_caller,omitempty"`
}

// AccessToken defines model for AccessToken.
type AccessToken struct {
	Acr                 *string                            `json:"acr,omitempty"`
	Address             *AddressClaimSet                   `json:"address,omitempty"`
	AllowedOrigins      *[]string                          `json:"allowed-origins,omitempty"`
	AtHash              *string                            `json:"at_hash,omitempty"`
	AuthTime            *int64                             `json:"auth_time,omitempty"`
	Authorization       *Authorization                     `json:"authorization,omitempty"`
	Azp                 *string                            `json:"azp,omitempty"`
	Birthdate           *string                            `json:"birthdate,omitempty"`
	CHash               *string                            `json:"c_hash,omitempty"`
	ClaimsLocales       *string                            `json:"claims_locales,omitempty"`
	Cnf                 *CertConf                          `json:"cnf,omitempty"`
	Email               *string                            `json:"email,omitempty"`
	EmailVerified       *bool                              `json:"email_verified,omitempty"`
	Exp                 *int64                             `json:"exp,omitempty"`
	FamilyName          *string                            `json:"family_name,omitempty"`
	Gender              *string                            `json:"gender,omitempty"`
	GivenName           *string                            `json:"given_name,omitempty"`
	Iat                 *int64                             `json:"iat,omitempty"`
	Iss                 *string                            `json:"iss,omitempty"`
	Jti                 *string                            `json:"jti,omitempty"`
	Locale              *string                            `json:"locale,omitempty"`
	MiddleName          *string                            `json:"middle_name,omitempty"`
	Name                *string                            `json:"name,omitempty"`
	Nbf                 *int64                             `json:"nbf,omitempty"`
	Nickname            *string                            `json:"nickname,omitempty"`
	Nonce               *string                            `json:"nonce,omitempty"`
	OtherClaims         *map[string]map[string]interface{} `json:"otherClaims,omitempty"`
	PhoneNumber         *string                            `json:"phone_number,omitempty"`
	PhoneNumberVerified *bool                              `json:"phone_number_verified,omitempty"`
	Picture             *string                            `json:"picture,omitempty"`
	PreferredUsername   *string                            `json:"preferred_username,omitempty"`
	Profile             *string                            `json:"profile,omitempty"`
	RealmAccess         *Access                            `json:"realm_access,omitempty"`
	ResourceAccess      *map[string]Access                 `json:"resource_access,omitempty"`
	SHash               *string                            `json:"s_hash,omitempty"`
	Scope               *string                            `json:"scope,omitempty"`
	SessionState        *string                            `json:"session_state,omitempty"`
	Sid                 *string                            `json:"sid,omitempty"`
	Sub                 *string                            `json:"sub,omitempty"`
	TrustedCerts        *[]string                          `json:"trusted-certs,omitempty"`
	Typ                 *string                            `json:"typ,omitempty"`
	UpdatedAt           *int64                             `json:"updated_at,omitempty"`
	Website             *string                            `json:"website,omitempty"`
	Zoneinfo            *string                            `json:"zoneinfo,omitempty"`
}

// AddressClaimSet defines model for AddressClaimSet.
type AddressClaimSet struct {
	Country       *string `json:"country,omitempty"`
	Formatted     *string `json:"formatted,omitempty"`
	Locality      *string `json:"locality,omitempty"`
	PostalCode    *string `json:"postal_code,omitempty"`
	Region        *string `json:"region,omitempty"`
	StreetAddress *string `json:"street_address,omitempty"`
}

// ApplicationRepresentation defines model for ApplicationRepresentation.
type ApplicationRepresentation struct {
	Access                                *map[string]bool                 `json:"access,omitempty"`
	AdminUrl                              *string                          `json:"adminUrl,omitempty"`
	AlwaysDisplayInConsole                *bool                            `json:"alwaysDisplayInConsole,omitempty"`
	Attributes                            *map[string]string               `json:"attributes,omitempty"`
	AuthenticationFlowBindingOverrides    *map[string]string               `json:"authenticationFlowBindingOverrides,omitempty"`
	AuthorizationServicesEnabled          *bool                            `json:"authorizationServicesEnabled,omitempty"`
	AuthorizationSettings                 *ResourceServerRepresentation    `json:"authorizationSettings,omitempty"`
	BaseUrl                               *string                          `json:"baseUrl,omitempty"`
	BearerOnly                            *bool                            `json:"bearerOnly,omitempty"`
	Claims                                *ApplicationRepresentationClaims `json:"claims,omitempty"`
	ClientAuthenticatorType               *string                          `json:"clientAuthenticatorType,omitempty"`
	ClientId                              *string                          `json:"clientId,omitempty"`
	ClientTemplate                        *string                          `json:"clientTemplate,omitempty"`
	ConsentRequired                       *bool                            `json:"consentRequired,omitempty"`
	DefaultClientScopes                   *[]string                        `json:"defaultClientScopes,omitempty"`
	DefaultRoles                          *[]string                        `json:"defaultRoles,omitempty"`
	Description                           *string                          `json:"description,omitempty"`
	DirectAccessGrantsEnabled             *bool                            `json:"directAccessGrantsEnabled,omitempty"`
	DirectGrantsOnly                      *bool                            `json:"directGrantsOnly,omitempty"`
	Enabled                               *bool                            `json:"enabled,omitempty"`
	FrontchannelLogout                    *bool                            `json:"frontchannelLogout,omitempty"`
	FullScopeAllowed                      *bool                            `json:"fullScopeAllowed,omitempty"`
	Id                                    *string                          `json:"id,omitempty"`
	ImplicitFlowEnabled                   *bool                            `json:"implicitFlowEnabled,omitempty"`
	Name                                  *string                          `json:"name,omitempty"`
	NodeReRegistrationTimeout             *int32                           `json:"nodeReRegistrationTimeout,omitempty"`
	NotBefore                             *int32                           `json:"notBefore,omitempty"`
	Oauth2DeviceAuthorizationGrantEnabled *bool                            `json:"oauth2DeviceAuthorizationGrantEnabled,omitempty"`
	OptionalClientScopes                  *[]string                        `json:"optionalClientScopes,omitempty"`
	Origin                                *string                          `json:"origin,omitempty"`
	Protocol                              *string                          `json:"protocol,omitempty"`
	ProtocolMappers                       *[]ProtocolMapperRepresentation  `json:"protocolMappers,omitempty"`
	PublicClient                          *bool                            `json:"publicClient,omitempty"`
	RedirectUris                          *[]string                        `json:"redirectUris,omitempty"`
	RegisteredNodes                       *map[string]int32                `json:"registeredNodes,omitempty"`
	RegistrationAccessToken               *string                          `json:"registrationAccessToken,omitempty"`
	RootUrl                               *string                          `json:"rootUrl,omitempty"`
	Secret                                *string                          `json:"secret,omitempty"`
	ServiceAccountsEnabled                *bool                            `json:"serviceAccountsEnabled,omitempty"`
	StandardFlowEnabled                   *bool                            `json:"standardFlowEnabled,omitempty"`
	SurrogateAuthRequired                 *bool                            `json:"surrogateAuthRequired,omitempty"`
	UseTemplateConfig                     *bool                            `json:"useTemplateConfig,omitempty"`
	UseTemplateMappers                    *bool                            `json:"useTemplateMappers,omitempty"`
	UseTemplateScope                      *bool                            `json:"useTemplateScope,omitempty"`
	WebOrigins                            *[]string                        `json:"webOrigins,omitempty"`
}

// ApplicationRepresentationClaims defines model for ApplicationRepresentationClaims.
type ApplicationRepresentationClaims struct {
	Address  *bool `json:"address,omitempty"`
	Email    *bool `json:"email,omitempty"`
	Gender   *bool `json:"gender,omitempty"`
	Locale   *bool `json:"locale,omitempty"`
	Name     *bool `json:"name,omitempty"`
	Phone    *bool `json:"phone,omitempty"`
	Picture  *bool `json:"picture,omitempty"`
	Profile  *bool `json:"profile,omitempty"`
	Username *bool `json:"username,omitempty"`
	Website  *bool `json:"website,omitempty"`
}

// AuthenticationExecutionExportRepresentation defines model for AuthenticationExecutionExportRepresentation.
type AuthenticationExecutionExportRepresentation struct {
	Authenticator       *string `json:"authenticator,omitempty"`
	AuthenticatorConfig *string `json:"authenticatorConfig,omitempty"`
	AuthenticatorFlow   *bool   `json:"authenticatorFlow,omitempty"`
	AutheticatorFlow    *bool   `json:"autheticatorFlow,omitempty"`
	FlowAlias           *string `json:"flowAlias,omitempty"`
	Priority            *int32  `json:"priority,omitempty"`
	Requirement         *string `json:"requirement,omitempty"`
	UserSetupAllowed    *bool   `json:"userSetupAllowed,omitempty"`
}

// AuthenticationExecutionInfoRepresentation defines model for AuthenticationExecutionInfoRepresentation.
type AuthenticationExecutionInfoRepresentation struct {
	Alias                *string   `json:"alias,omitempty"`
	AuthenticationConfig *string   `json:"authenticationConfig,omitempty"`
	AuthenticationFlow   *bool     `json:"authenticationFlow,omitempty"`
	Configurable         *bool     `json:"configurable,omitempty"`
	Description          *string   `json:"description,omitempty"`
	DisplayName          *string   `json:"displayName,omitempty"`
	FlowId               *string   `json:"flowId,omitempty"`
	Id                   *string   `json:"id,omitempty"`
	Index                *int32    `json:"index,omitempty"`
	Level                *int32    `json:"level,omitempty"`
	ProviderId           *string   `json:"providerId,omitempty"`
	Requirement          *string   `json:"requirement,omitempty"`
	RequirementChoices   *[]string `json:"requirementChoices,omitempty"`
}

// AuthenticationExecutionRepresentation defines model for AuthenticationExecutionRepresentation.
type AuthenticationExecutionRepresentation struct {
	Authenticator       *string `json:"authenticator,omitempty"`
	AuthenticatorConfig *string `json:"authenticatorConfig,omitempty"`
	AuthenticatorFlow   *bool   `json:"authenticatorFlow,omitempty"`
	AutheticatorFlow    *bool   `json:"autheticatorFlow,omitempty"`
	FlowId              *string `json:"flowId,omitempty"`
	Id                  *string `json:"id,omitempty"`
	ParentFlow          *string `json:"parentFlow,omitempty"`
	Priority            *int32  `json:"priority,omitempty"`
	Requirement         *string `json:"requirement,omitempty"`
}

// AuthenticationFlowRepresentation defines model for AuthenticationFlowRepresentation.
type AuthenticationFlowRepresentation struct {
	Alias                    *string                                        `json:"alias,omitempty"`
	AuthenticationExecutions *[]AuthenticationExecutionExportRepresentation `json:"authenticationExecutions,omitempty"`
	BuiltIn                  *bool                                          `json:"builtIn,omitempty"`
	Description              *string                                        `json:"description,omitempty"`
	Id                       *string                                        `json:"id,omitempty"`
	ProviderId               *string                                        `json:"providerId,omitempty"`
	TopLevel                 *bool                                          `json:"topLevel,omitempty"`
}

// AuthenticatorConfigInfoRepresentation defines model for AuthenticatorConfigInfoRepresentation.
type AuthenticatorConfigInfoRepresentation struct {
	HelpText   *string                         `json:"helpText,omitempty"`
	Name       *string                         `json:"name,omitempty"`
	Properties *[]ConfigPropertyRepresentation `json:"properties,omitempty"`
	ProviderId *string                         `json:"providerId,omitempty"`
}

// AuthenticatorConfigRepresentation defines model for AuthenticatorConfigRepresentation.
type AuthenticatorConfigRepresentation struct {
	Alias  *string            `json:"alias,omitempty"`
	Config *map[string]string `json:"config,omitempty"`
	Id     *string            `json:"id,omitempty"`
}

// Authorization defines model for Authorization.
type Authorization struct {
	Permissions *[]Permission `json:"permissions,omitempty"`
}

// CertConf defines model for CertConf.
type CertConf struct {
	X5tS256 *string `json:"x5t#S256,omitempty"`
}

// CertificateRepresentation defines model for CertificateRepresentation.
type CertificateRepresentation struct {
	Certificate *string `json:"certificate,omitempty"`
	Kid         *string `json:"kid,omitempty"`
	PrivateKey  *string `json:"privateKey,omitempty"`
	PublicKey   *string `json:"publicKey,omitempty"`
}

// ClientInitialAccessCreatePresentation defines model for ClientInitialAccessCreatePresentation.
type ClientInitialAccessCreatePresentation struct {
	Count      *int32 `json:"count,omitempty"`
	Expiration *int32 `json:"expiration,omitempty"`
}

// ClientInitialAccessPresentation defines model for ClientInitialAccessPresentation.
type ClientInitialAccessPresentation struct {
	Count          *int32  `json:"count,omitempty"`
	Expiration     *int32  `json:"expiration,omitempty"`
	Id             *string `json:"id,omitempty"`
	RemainingCount *int32  `json:"remainingCount,omitempty"`
	Timestamp      *int32  `json:"timestamp,omitempty"`
	Token          *string `json:"token,omitempty"`
}

// ClientMappingsRepresentation defines model for ClientMappingsRepresentation.
type ClientMappingsRepresentation struct {
	Client   *string               `json:"client,omitempty"`
	Id       *string               `json:"id,omitempty"`
	Mappings *[]RoleRepresentation `json:"mappings,omitempty"`
}

// ClientPoliciesRepresentation defines model for ClientPoliciesRepresentation.
type ClientPoliciesRepresentation struct {
	Policies *[]ClientPolicyRepresentation `json:"policies,omitempty"`
}

// ClientPolicyConditionRepresentation defines model for ClientPolicyConditionRepresentation.
type ClientPolicyConditionRepresentation struct {
	Condition     *string                   `json:"condition,omitempty"`
	Configuration *[]map[string]interface{} `json:"configuration,omitempty"`
}

// ClientPolicyExecutorRepresentation defines model for ClientPolicyExecutorRepresentation.
type ClientPolicyExecutorRepresentation struct {
	Configuration *[]map[string]interface{} `json:"configuration,omitempty"`
	Executor      *string                   `json:"executor,omitempty"`
}

// ClientPolicyRepresentation defines model for ClientPolicyRepresentation.
type ClientPolicyRepresentation struct {
	Conditions  *[]ClientPolicyConditionRepresentation `json:"conditions,omitempty"`
	Description *string                                `json:"description,omitempty"`
	Enabled     *bool                                  `json:"enabled,omitempty"`
	Name        *string                                `json:"name,omitempty"`
	Profiles    *[]string                              `json:"profiles,omitempty"`
}

// ClientProfileRepresentation defines model for ClientProfileRepresentation.
type ClientProfileRepresentation struct {
	Description *string                               `json:"description,omitempty"`
	Executors   *[]ClientPolicyExecutorRepresentation `json:"executors,omitempty"`
	Name        *string                               `json:"name,omitempty"`
}

// ClientProfilesRepresentation defines model for ClientProfilesRepresentation.
type ClientProfilesRepresentation struct {
	GlobalProfiles *[]ClientProfileRepresentation `json:"globalProfiles,omitempty"`
	Profiles       *[]ClientProfileRepresentation `json:"profiles,omitempty"`
}

// ClientRepresentation defines model for ClientRepresentation.
type ClientRepresentation struct {
	Access                                *map[string]bool                `json:"access,omitempty"`
	AdminUrl                              *string                         `json:"adminUrl,omitempty"`
	AlwaysDisplayInConsole                *bool                           `json:"alwaysDisplayInConsole,omitempty"`
	Attributes                            *map[string]string              `json:"attributes,omitempty"`
	AuthenticationFlowBindingOverrides    *map[string]string              `json:"authenticationFlowBindingOverrides,omitempty"`
	AuthorizationServicesEnabled          *bool                           `json:"authorizationServicesEnabled,omitempty"`
	AuthorizationSettings                 *ResourceServerRepresentation   `json:"authorizationSettings,omitempty"`
	BaseUrl                               *string                         `json:"baseUrl,omitempty"`
	BearerOnly                            *bool                           `json:"bearerOnly,omitempty"`
	ClientAuthenticatorType               *string                         `json:"clientAuthenticatorType,omitempty"`
	ClientId                              *string                         `json:"clientId,omitempty"`
	ClientTemplate                        *string                         `json:"clientTemplate,omitempty"`
	ConsentRequired                       *bool                           `json:"consentRequired,omitempty"`
	DefaultClientScopes                   *[]string                       `json:"defaultClientScopes,omitempty"`
	DefaultRoles                          *[]string                       `json:"defaultRoles,omitempty"`
	Description                           *string                         `json:"description,omitempty"`
	DirectAccessGrantsEnabled             *bool                           `json:"directAccessGrantsEnabled,omitempty"`
	DirectGrantsOnly                      *bool                           `json:"directGrantsOnly,omitempty"`
	Enabled                               *bool                           `json:"enabled,omitempty"`
	FrontchannelLogout                    *bool                           `json:"frontchannelLogout,omitempty"`
	FullScopeAllowed                      *bool                           `json:"fullScopeAllowed,omitempty"`
	Id                                    *string                         `json:"id,omitempty"`
	ImplicitFlowEnabled                   *bool                           `json:"implicitFlowEnabled,omitempty"`
	Name                                  *string                         `json:"name,omitempty"`
	NodeReRegistrationTimeout             *int32                          `json:"nodeReRegistrationTimeout,omitempty"`
	NotBefore                             *int32                          `json:"notBefore,omitempty"`
	Oauth2DeviceAuthorizationGrantEnabled *bool                           `json:"oauth2DeviceAuthorizationGrantEnabled,omitempty"`
	OptionalClientScopes                  *[]string                       `json:"optionalClientScopes,omitempty"`
	Origin                                *string                         `json:"origin,omitempty"`
	Protocol                              *string                         `json:"protocol,omitempty"`
	ProtocolMappers                       *[]ProtocolMapperRepresentation `json:"protocolMappers,omitempty"`
	PublicClient                          *bool                           `json:"publicClient,omitempty"`
	RedirectUris                          *[]string                       `json:"redirectUris,omitempty"`
	RegisteredNodes                       *map[string]int32               `json:"registeredNodes,omitempty"`
	RegistrationAccessToken               *string                         `json:"registrationAccessToken,omitempty"`
	RootUrl                               *string                         `json:"rootUrl,omitempty"`
	Secret                                *string                         `json:"secret,omitempty"`
	ServiceAccountsEnabled                *bool                           `json:"serviceAccountsEnabled,omitempty"`
	StandardFlowEnabled                   *bool                           `json:"standardFlowEnabled,omitempty"`
	SurrogateAuthRequired                 *bool                           `json:"surrogateAuthRequired,omitempty"`
	UseTemplateConfig                     *bool                           `json:"useTemplateConfig,omitempty"`
	UseTemplateMappers                    *bool                           `json:"useTemplateMappers,omitempty"`
	UseTemplateScope                      *bool                           `json:"useTemplateScope,omitempty"`
	WebOrigins                            *[]string                       `json:"webOrigins,omitempty"`
}

// ClientScopeRepresentation defines model for ClientScopeRepresentation.
type ClientScopeRepresentation struct {
	Attributes      *map[string]string              `json:"attributes,omitempty"`
	Description     *string                         `json:"description,omitempty"`
	Id              *string                         `json:"id,omitempty"`
	Name            *string                         `json:"name,omitempty"`
	Protocol        *string                         `json:"protocol,omitempty"`
	ProtocolMappers *[]ProtocolMapperRepresentation `json:"protocolMappers,omitempty"`
}

// ClientTemplateRepresentation defines model for ClientTemplateRepresentation.
type ClientTemplateRepresentation struct {
	Attributes                *map[string]string              `json:"attributes,omitempty"`
	BearerOnly                *bool                           `json:"bearerOnly,omitempty"`
	ConsentRequired           *bool                           `json:"consentRequired,omitempty"`
	Description               *string                         `json:"description,omitempty"`
	DirectAccessGrantsEnabled *bool                           `json:"directAccessGrantsEnabled,omitempty"`
	FrontchannelLogout        *bool                           `json:"frontchannelLogout,omitempty"`
	FullScopeAllowed          *bool                           `json:"fullScopeAllowed,omitempty"`
	Id                        *string                         `json:"id,omitempty"`
	ImplicitFlowEnabled       *bool                           `json:"implicitFlowEnabled,omitempty"`
	Name                      *string                         `json:"name,omitempty"`
	Protocol                  *string                         `json:"protocol,omitempty"`
	ProtocolMappers           *[]ProtocolMapperRepresentation `json:"protocolMappers,omitempty"`
	PublicClient              *bool                           `json:"publicClient,omitempty"`
	ServiceAccountsEnabled    *bool                           `json:"serviceAccountsEnabled,omitempty"`
	StandardFlowEnabled       *bool                           `json:"standardFlowEnabled,omitempty"`
}

// ComponentRepresentation defines model for ComponentRepresentation.
type ComponentRepresentation struct {
	Config       *map[string][]interface{} `json:"config,omitempty"`
	Id           *string                   `json:"id,omitempty"`
	Name         *string                   `json:"name,omitempty"`
	ParentId     *string                   `json:"parentId,omitempty"`
	ProviderId   *string                   `json:"providerId,omitempty"`
	ProviderType *string                   `json:"providerType,omitempty"`
	SubType      *string                   `json:"subType,omitempty"`
}

// Composites defines model for Composites.
type Composites struct {
	Application *map[string][]interface{} `json:"application,omitempty"`
	Client      *map[string][]interface{} `json:"client,omitempty"`
	Realm       *[]string                 `json:"realm,omitempty"`
}

// ConfigPropertyRepresentation defines model for ConfigPropertyRepresentation.
type ConfigPropertyRepresentation struct {
	DefaultValue *map[string]interface{} `json:"defaultValue,omitempty"`
	HelpText     *string                 `json:"helpText,omitempty"`
	Label        *string                 `json:"label,omitempty"`
	Name         *string                 `json:"name,omitempty"`
	Options      *[]string               `json:"options,omitempty"`
	ReadOnly     *bool                   `json:"readOnly,omitempty"`
	Secret       *bool                   `json:"secret,omitempty"`
	Type         *string                 `json:"type,omitempty"`
}

// CredentialRepresentation defines model for CredentialRepresentation.
type CredentialRepresentation struct {
	Algorithm         *string                 `json:"algorithm,omitempty"`
	Config            *map[string]interface{} `json:"config,omitempty"`
	Counter           *int32                  `json:"counter,omitempty"`
	CreatedDate       *int64                  `json:"createdDate,omitempty"`
	CredentialData    *string                 `json:"credentialData,omitempty"`
	Device            *string                 `json:"device,omitempty"`
	Digits            *int32                  `json:"digits,omitempty"`
	HashIterations    *int32                  `json:"hashIterations,omitempty"`
	HashedSaltedValue *string                 `json:"hashedSaltedValue,omitempty"`
	Id                *string                 `json:"id,omitempty"`
	Period            *int32                  `json:"period,omitempty"`
	Priority          *int32                  `json:"priority,omitempty"`
	Salt              *string                 `json:"salt,omitempty"`
	SecretData        *string                 `json:"secretData,omitempty"`
	Temporary         *bool                   `json:"temporary,omitempty"`
	Type              *string                 `json:"type,omitempty"`
	UserLabel         *string                 `json:"userLabel,omitempty"`
	Value             *string                 `json:"value,omitempty"`
}

// DecisionStrategy defines model for DecisionStrategy.
type DecisionStrategy = map[string]interface{}

// FederatedIdentityRepresentation defines model for FederatedIdentityRepresentation.
type FederatedIdentityRepresentation struct {
	IdentityProvider *string `json:"identityProvider,omitempty"`
	UserId           *string `json:"userId,omitempty"`
	UserName         *string `json:"userName,omitempty"`
}

// GlobalRequestResult defines model for GlobalRequestResult.
type GlobalRequestResult struct {
	FailedRequests  *[]string `json:"failedRequests,omitempty"`
	SuccessRequests *[]string `json:"successRequests,omitempty"`
}

// GroupRepresentation defines model for GroupRepresentation.
type GroupRepresentation struct {
	Access      *map[string]bool          `json:"access,omitempty"`
	Attributes  *map[string][]interface{} `json:"attributes,omitempty"`
	ClientRoles *map[string][]interface{} `json:"clientRoles,omitempty"`
	Id          *string                   `json:"id,omitempty"`
	Name        *string                   `json:"name,omitempty"`
	Path        *string                   `json:"path,omitempty"`
	RealmRoles  *[]string                 `json:"realmRoles,omitempty"`
	SubGroups   *[]GroupRepresentation    `json:"subGroups,omitempty"`
}

// IDToken defines model for IDToken.
type IDToken struct {
	Acr                 *string                            `json:"acr,omitempty"`
	Address             *AddressClaimSet                   `json:"address,omitempty"`
	AtHash              *string                            `json:"at_hash,omitempty"`
	AuthTime            *int64                             `json:"auth_time,omitempty"`
	Azp                 *string                            `json:"azp,omitempty"`
	Birthdate           *string                            `json:"birthdate,omitempty"`
	CHash               *string                            `json:"c_hash,omitempty"`
	ClaimsLocales       *string                            `json:"claims_locales,omitempty"`
	Email               *string                            `json:"email,omitempty"`
	EmailVerified       *bool                              `json:"email_verified,omitempty"`
	Exp                 *int64                             `json:"exp,omitempty"`
	FamilyName          *string                            `json:"family_name,omitempty"`
	Gender              *string                            `json:"gender,omitempty"`
	GivenName           *string                            `json:"given_name,omitempty"`
	Iat                 *int64                             `json:"iat,omitempty"`
	Iss                 *string                            `json:"iss,omitempty"`
	Jti                 *string                            `json:"jti,omitempty"`
	Locale              *string                            `json:"locale,omitempty"`
	MiddleName          *string                            `json:"middle_name,omitempty"`
	Name                *string                            `json:"name,omitempty"`
	Nbf                 *int64                             `json:"nbf,omitempty"`
	Nickname            *string                            `json:"nickname,omitempty"`
	Nonce               *string                            `json:"nonce,omitempty"`
	OtherClaims         *map[string]map[string]interface{} `json:"otherClaims,omitempty"`
	PhoneNumber         *string                            `json:"phone_number,omitempty"`
	PhoneNumberVerified *bool                              `json:"phone_number_verified,omitempty"`
	Picture             *string                            `json:"picture,omitempty"`
	PreferredUsername   *string                            `json:"preferred_username,omitempty"`
	Profile             *string                            `json:"profile,omitempty"`
	SHash               *string                            `json:"s_hash,omitempty"`
	SessionState        *string                            `json:"session_state,omitempty"`
	Sid                 *string                            `json:"sid,omitempty"`
	Sub                 *string                            `json:"sub,omitempty"`
	Typ                 *string                            `json:"typ,omitempty"`
	UpdatedAt           *int64                             `json:"updated_at,omitempty"`
	Website             *string                            `json:"website,omitempty"`
	Zoneinfo            *string                            `json:"zoneinfo,omitempty"`
}

// IdentityProviderMapperRepresentation defines model for IdentityProviderMapperRepresentation.
type IdentityProviderMapperRepresentation struct {
	Config                 *map[string]string `json:"config,omitempty"`
	Id                     *string            `json:"id,omitempty"`
	IdentityProviderAlias  *string            `json:"identityProviderAlias,omitempty"`
	IdentityProviderMapper *string            `json:"identityProviderMapper,omitempty"`
	Name                   *string            `json:"name,omitempty"`
}

// IdentityProviderMapperTypeRepresentation defines model for IdentityProviderMapperTypeRepresentation.
type IdentityProviderMapperTypeRepresentation struct {
	Category   *string                         `json:"category,omitempty"`
	HelpText   *string                         `json:"helpText,omitempty"`
	Id         *string                         `json:"id,omitempty"`
	Name       *string                         `json:"name,omitempty"`
	Properties *[]ConfigPropertyRepresentation `json:"properties,omitempty"`
}

// IdentityProviderRepresentation defines model for IdentityProviderRepresentation.
type IdentityProviderRepresentation struct {
	AddReadTokenRoleOnCreate    *bool              `json:"addReadTokenRoleOnCreate,omitempty"`
	Alias                       *string            `json:"alias,omitempty"`
	AuthenticateByDefault       *bool              `json:"authenticateByDefault,omitempty"`
	Config                      *map[string]string `json:"config,omitempty"`
	DisplayName                 *string            `json:"displayName,omitempty"`
	Enabled                     *bool              `json:"enabled,omitempty"`
	FirstBrokerLoginFlowAlias   *string            `json:"firstBrokerLoginFlowAlias,omitempty"`
	InternalId                  *string            `json:"internalId,omitempty"`
	LinkOnly                    *bool              `json:"linkOnly,omitempty"`
	PostBrokerLoginFlowAlias    *string            `json:"postBrokerLoginFlowAlias,omitempty"`
	ProviderId                  *string            `json:"providerId,omitempty"`
	StoreToken                  *bool              `json:"storeToken,omitempty"`
	TrustEmail                  *bool              `json:"trustEmail,omitempty"`
	UpdateProfileFirstLogin     *bool              `json:"updateProfileFirstLogin,omitempty"`
	UpdateProfileFirstLoginMode *string            `json:"updateProfileFirstLoginMode,omitempty"`
}

// KeyMetadataRepresentation defines model for KeyMetadataRepresentation.
type KeyMetadataRepresentation struct {
	Algorithm        *string `json:"algorithm,omitempty"`
	Certificate      *string `json:"certificate,omitempty"`
	Kid              *string `json:"kid,omitempty"`
	ProviderId       *string `json:"providerId,omitempty"`
	ProviderPriority *int64  `json:"providerPriority,omitempty"`
	PublicKey        *string `json:"publicKey,omitempty"`
	Status           *string `json:"status,omitempty"`
	Type             *string `json:"type,omitempty"`
	Use              *KeyUse `json:"use,omitempty"`
}

// KeyStoreConfig defines model for KeyStoreConfig.
type KeyStoreConfig struct {
	Format           *string `json:"format,omitempty"`
	KeyAlias         *string `json:"keyAlias,omitempty"`
	KeyPassword      *string `json:"keyPassword,omitempty"`
	RealmAlias       *string `json:"realmAlias,omitempty"`
	RealmCertificate *bool   `json:"realmCertificate,omitempty"`
	StorePassword    *string `json:"storePassword,omitempty"`
}

// KeyUse defines model for KeyUse.
type KeyUse = map[string]interface{}

// KeysMetadataRepresentation defines model for KeysMetadataRepresentation.
type KeysMetadataRepresentation struct {
	Active *map[string]string           `json:"active,omitempty"`
	Keys   *[]KeyMetadataRepresentation `json:"keys,omitempty"`
}

// Logic defines model for Logic.
type Logic = map[string]interface{}

// ManagementPermissionReference defines model for ManagementPermissionReference.
type ManagementPermissionReference struct {
	Enabled          *bool              `json:"enabled,omitempty"`
	Resource         *string            `json:"resource,omitempty"`
	ScopePermissions *map[string]string `json:"scopePermissions,omitempty"`
}

// MappingsRepresentation defines model for MappingsRepresentation.
type MappingsRepresentation struct {
	ClientMappings *map[string]ClientMappingsRepresentation `json:"clientMappings,omitempty"`
	RealmMappings  *[]RoleRepresentation                    `json:"realmMappings,omitempty"`
}

// OAuthClientRepresentation defines model for OAuthClientRepresentation.
type OAuthClientRepresentation struct {
	Access                                *map[string]bool                 `json:"access,omitempty"`
	AdminUrl                              *string                          `json:"adminUrl,omitempty"`
	AlwaysDisplayInConsole                *bool                            `json:"alwaysDisplayInConsole,omitempty"`
	Attributes                            *map[string]string               `json:"attributes,omitempty"`
	AuthenticationFlowBindingOverrides    *map[string]string               `json:"authenticationFlowBindingOverrides,omitempty"`
	AuthorizationServicesEnabled          *bool                            `json:"authorizationServicesEnabled,omitempty"`
	AuthorizationSettings                 *ResourceServerRepresentation    `json:"authorizationSettings,omitempty"`
	BaseUrl                               *string                          `json:"baseUrl,omitempty"`
	BearerOnly                            *bool                            `json:"bearerOnly,omitempty"`
	Claims                                *ApplicationRepresentationClaims `json:"claims,omitempty"`
	ClientAuthenticatorType               *string                          `json:"clientAuthenticatorType,omitempty"`
	ClientId                              *string                          `json:"clientId,omitempty"`
	ClientTemplate                        *string                          `json:"clientTemplate,omitempty"`
	ConsentRequired                       *bool                            `json:"consentRequired,omitempty"`
	DefaultClientScopes                   *[]string                        `json:"defaultClientScopes,omitempty"`
	DefaultRoles                          *[]string                        `json:"defaultRoles,omitempty"`
	Description                           *string                          `json:"description,omitempty"`
	DirectAccessGrantsEnabled             *bool                            `json:"directAccessGrantsEnabled,omitempty"`
	DirectGrantsOnly                      *bool                            `json:"directGrantsOnly,omitempty"`
	Enabled                               *bool                            `json:"enabled,omitempty"`
	FrontchannelLogout                    *bool                            `json:"frontchannelLogout,omitempty"`
	FullScopeAllowed                      *bool                            `json:"fullScopeAllowed,omitempty"`
	Id                                    *string                          `json:"id,omitempty"`
	ImplicitFlowEnabled                   *bool                            `json:"implicitFlowEnabled,omitempty"`
	Name                                  *string                          `json:"name,omitempty"`
	NodeReRegistrationTimeout             *int32                           `json:"nodeReRegistrationTimeout,omitempty"`
	NotBefore                             *int32                           `json:"notBefore,omitempty"`
	Oauth2DeviceAuthorizationGrantEnabled *bool                            `json:"oauth2DeviceAuthorizationGrantEnabled,omitempty"`
	OptionalClientScopes                  *[]string                        `json:"optionalClientScopes,omitempty"`
	Origin                                *string                          `json:"origin,omitempty"`
	Protocol                              *string                          `json:"protocol,omitempty"`
	ProtocolMappers                       *[]ProtocolMapperRepresentation  `json:"protocolMappers,omitempty"`
	PublicClient                          *bool                            `json:"publicClient,omitempty"`
	RedirectUris                          *[]string                        `json:"redirectUris,omitempty"`
	RegisteredNodes                       *map[string]int32                `json:"registeredNodes,omitempty"`
	RegistrationAccessToken               *string                          `json:"registrationAccessToken,omitempty"`
	RootUrl                               *string                          `json:"rootUrl,omitempty"`
	Secret                                *string                          `json:"secret,omitempty"`
	ServiceAccountsEnabled                *bool                            `json:"serviceAccountsEnabled,omitempty"`
	StandardFlowEnabled                   *bool                            `json:"standardFlowEnabled,omitempty"`
	SurrogateAuthRequired                 *bool                            `json:"surrogateAuthRequired,omitempty"`
	UseTemplateConfig                     *bool                            `json:"useTemplateConfig,omitempty"`
	UseTemplateMappers                    *bool                            `json:"useTemplateMappers,omitempty"`
	UseTemplateScope                      *bool                            `json:"useTemplateScope,omitempty"`
	WebOrigins                            *[]string                        `json:"webOrigins,omitempty"`
}

// Permission defines model for Permission.
type Permission struct {
	Claims *map[string][]interface{} `json:"claims,omitempty"`
	Rsid   *string                   `json:"rsid,omitempty"`
	Rsname *string                   `json:"rsname,omitempty"`
	Scopes *[]string                 `json:"scopes,omitempty"`
}

// PolicyEnforcementMode defines model for PolicyEnforcementMode.
type PolicyEnforcementMode = map[string]interface{}

// PolicyRepresentation defines model for PolicyRepresentation.
type PolicyRepresentation struct {
	Config           *map[string]string        `json:"config,omitempty"`
	DecisionStrategy *DecisionStrategy         `json:"decisionStrategy,omitempty"`
	Description      *string                   `json:"description,omitempty"`
	Id               *string                   `json:"id,omitempty"`
	Logic            *Logic                    `json:"logic,omitempty"`
	Name             *string                   `json:"name,omitempty"`
	Owner            *string                   `json:"owner,omitempty"`
	Policies         *[]string                 `json:"policies,omitempty"`
	Resources        *[]string                 `json:"resources,omitempty"`
	ResourcesData    *[]ResourceRepresentation `json:"resourcesData,omitempty"`
	Scopes           *[]string                 `json:"scopes,omitempty"`
	ScopesData       *[]ScopeRepresentation    `json:"scopesData,omitempty"`
	Type             *string                   `json:"type,omitempty"`
}

// ProtocolMapperRepresentation defines model for ProtocolMapperRepresentation.
type ProtocolMapperRepresentation struct {
	Config          *map[string]string `json:"config,omitempty"`
	ConsentRequired *bool              `json:"consentRequired,omitempty"`
	ConsentText     *string            `json:"consentText,omitempty"`
	Id              *string            `json:"id,omitempty"`
	Name            *string            `json:"name,omitempty"`
	Protocol        *string            `json:"protocol,omitempty"`
	ProtocolMapper  *string            `json:"protocolMapper,omitempty"`
}

// RealmEventsConfigRepresentation defines model for RealmEventsConfigRepresentation.
type RealmEventsConfigRepresentation struct {
	AdminEventsDetailsEnabled *bool     `json:"adminEventsDetailsEnabled,omitempty"`
	AdminEventsEnabled        *bool     `json:"adminEventsEnabled,omitempty"`
	EnabledEventTypes         *[]string `json:"enabledEventTypes,omitempty"`
	EventsEnabled             *bool     `json:"eventsEnabled,omitempty"`
	EventsExpiration          *int64    `json:"eventsExpiration,omitempty"`
	EventsListeners           *[]string `json:"eventsListeners,omitempty"`
}

// RealmRepresentation defines model for RealmRepresentation.
type RealmRepresentation struct {
	AccessCodeLifespan                                        *int32                                  `json:"accessCodeLifespan,omitempty"`
	AccessCodeLifespanLogin                                   *int32                                  `json:"accessCodeLifespanLogin,omitempty"`
	AccessCodeLifespanUserAction                              *int32                                  `json:"accessCodeLifespanUserAction,omitempty"`
	AccessTokenLifespan                                       *int32                                  `json:"accessTokenLifespan,omitempty"`
	AccessTokenLifespanForImplicitFlow                        *int32                                  `json:"accessTokenLifespanForImplicitFlow,omitempty"`
	AccountTheme                                              *string                                 `json:"accountTheme,omitempty"`
	ActionTokenGeneratedByAdminLifespan                       *int32                                  `json:"actionTokenGeneratedByAdminLifespan,omitempty"`
	ActionTokenGeneratedByUserLifespan                        *int32                                  `json:"actionTokenGeneratedByUserLifespan,omitempty"`
	AdminEventsDetailsEnabled                                 *bool                                   `json:"adminEventsDetailsEnabled,omitempty"`
	AdminEventsEnabled                                        *bool                                   `json:"adminEventsEnabled,omitempty"`
	AdminTheme                                                *string                                 `json:"adminTheme,omitempty"`
	ApplicationScopeMappings                                  *map[string][]interface{}               `json:"applicationScopeMappings,omitempty"`
	Applications                                              *[]ApplicationRepresentation            `json:"applications,omitempty"`
	Attributes                                                *map[string]string                      `json:"attributes,omitempty"`
	AuthenticationFlows                                       *[]AuthenticationFlowRepresentation     `json:"authenticationFlows,omitempty"`
	AuthenticatorConfig                                       *[]AuthenticatorConfigRepresentation    `json:"authenticatorConfig,omitempty"`
	BrowserFlow                                               *string                                 `json:"browserFlow,omitempty"`
	BrowserSecurityHeaders                                    *map[string]string                      `json:"browserSecurityHeaders,omitempty"`
	BruteForceProtected                                       *bool                                   `json:"bruteForceProtected,omitempty"`
	Certificate                                               *string                                 `json:"certificate,omitempty"`
	ClientAuthenticationFlow                                  *string                                 `json:"clientAuthenticationFlow,omitempty"`
	ClientOfflineSessionIdleTimeout                           *int32                                  `json:"clientOfflineSessionIdleTimeout,omitempty"`
	ClientOfflineSessionMaxLifespan                           *int32                                  `json:"clientOfflineSessionMaxLifespan,omitempty"`
	ClientPolicies                                            *[]map[string]interface{}               `json:"clientPolicies,omitempty"`
	ClientProfiles                                            *[]map[string]interface{}               `json:"clientProfiles,omitempty"`
	ClientScopeMappings                                       *map[string][]interface{}               `json:"clientScopeMappings,omitempty"`
	ClientScopes                                              *[]ClientScopeRepresentation            `json:"clientScopes,omitempty"`
	ClientSessionIdleTimeout                                  *int32                                  `json:"clientSessionIdleTimeout,omitempty"`
	ClientSessionMaxLifespan                                  *int32                                  `json:"clientSessionMaxLifespan,omitempty"`
	ClientTemplates                                           *[]ClientTemplateRepresentation         `json:"clientTemplates,omitempty"`
	Clients                                                   *[]ClientRepresentation                 `json:"clients,omitempty"`
	CodeSecret                                                *string                                 `json:"codeSecret,omitempty"`
	Components                                                *map[string][]interface{}               `json:"components,omitempty"`
	DefaultDefaultClientScopes                                *[]string                               `json:"defaultDefaultClientScopes,omitempty"`
	DefaultGroups                                             *[]string                               `json:"defaultGroups,omitempty"`
	DefaultLocale                                             *string                                 `json:"defaultLocale,omitempty"`
	DefaultOptionalClientScopes                               *[]string                               `json:"defaultOptionalClientScopes,omitempty"`
	DefaultRole                                               *RoleRepresentation                     `json:"defaultRole,omitempty"`
	DefaultRoles                                              *[]string                               `json:"defaultRoles,omitempty"`
	DefaultSignatureAlgorithm                                 *string                                 `json:"defaultSignatureAlgorithm,omitempty"`
	DirectGrantFlow                                           *string                                 `json:"directGrantFlow,omitempty"`
	DisplayName                                               *string                                 `json:"displayName,omitempty"`
	DisplayNameHtml                                           *string                                 `json:"displayNameHtml,omitempty"`
	DockerAuthenticationFlow                                  *string                                 `json:"dockerAuthenticationFlow,omitempty"`
	DuplicateEmailsAllowed                                    *bool                                   `json:"duplicateEmailsAllowed,omitempty"`
	EditUsernameAllowed                                       *bool                                   `json:"editUsernameAllowed,omitempty"`
	EmailTheme                                                *string                                 `json:"emailTheme,omitempty"`
	Enabled                                                   *bool                                   `json:"enabled,omitempty"`
	EnabledEventTypes                                         *[]string                               `json:"enabledEventTypes,omitempty"`
	EventsEnabled                                             *bool                                   `json:"eventsEnabled,omitempty"`
	EventsExpiration                                          *int64                                  `json:"eventsExpiration,omitempty"`
	EventsListeners                                           *[]string                               `json:"eventsListeners,omitempty"`
	FailureFactor                                             *int32                                  `json:"failureFactor,omitempty"`
	FederatedUsers                                            *[]UserRepresentation                   `json:"federatedUsers,omitempty"`
	Groups                                                    *[]GroupRepresentation                  `json:"groups,omitempty"`
	Id                                                        *string                                 `json:"id,omitempty"`
	IdentityProviderMappers                                   *[]IdentityProviderMapperRepresentation `json:"identityProviderMappers,omitempty"`
	IdentityProviders                                         *[]IdentityProviderRepresentation       `json:"identityProviders,omitempty"`
	InternationalizationEnabled                               *bool                                   `json:"internationalizationEnabled,omitempty"`
	KeycloakVersion                                           *string                                 `json:"keycloakVersion,omitempty"`
	LoginTheme                                                *string                                 `json:"loginTheme,omitempty"`
	LoginWithEmailAllowed                                     *bool                                   `json:"loginWithEmailAllowed,omitempty"`
	MaxDeltaTimeSeconds                                       *int32                                  `json:"maxDeltaTimeSeconds,omitempty"`
	MaxFailureWaitSeconds                                     *int32                                  `json:"maxFailureWaitSeconds,omitempty"`
	MinimumQuickLoginWaitSeconds                              *int32                                  `json:"minimumQuickLoginWaitSeconds,omitempty"`
	NotBefore                                                 *int32                                  `json:"notBefore,omitempty"`
	OAuth2DeviceCodeLifespan                                  *int32                                  `json:"oAuth2DeviceCodeLifespan,omitempty"`
	OAuth2DevicePollingInterval                               *int32                                  `json:"oAuth2DevicePollingInterval,omitempty"`
	Oauth2DeviceCodeLifespan                                  *int32                                  `json:"oauth2DeviceCodeLifespan,omitempty"`
	Oauth2DevicePollingInterval                               *int32                                  `json:"oauth2DevicePollingInterval,omitempty"`
	OauthClients                                              *[]OAuthClientRepresentation            `json:"oauthClients,omitempty"`
	OfflineSessionIdleTimeout                                 *int32                                  `json:"offlineSessionIdleTimeout,omitempty"`
	OfflineSessionMaxLifespan                                 *int32                                  `json:"offlineSessionMaxLifespan,omitempty"`
	OfflineSessionMaxLifespanEnabled                          *bool                                   `json:"offlineSessionMaxLifespanEnabled,omitempty"`
	OtpPolicyAlgorithm                                        *string                                 `json:"otpPolicyAlgorithm,omitempty"`
	OtpPolicyCodeReusable                                     *bool                                   `json:"otpPolicyCodeReusable,omitempty"`
	OtpPolicyDigits                                           *int32                                  `json:"otpPolicyDigits,omitempty"`
	OtpPolicyInitialCounter                                   *int32                                  `json:"otpPolicyInitialCounter,omitempty"`
	OtpPolicyLookAheadWindow                                  *int32                                  `json:"otpPolicyLookAheadWindow,omitempty"`
	OtpPolicyPeriod                                           *int32                                  `json:"otpPolicyPeriod,omitempty"`
	OtpPolicyType                                             *string                                 `json:"otpPolicyType,omitempty"`
	OtpSupportedApplications                                  *[]string                               `json:"otpSupportedApplications,omitempty"`
	PasswordCredentialGrantAllowed                            *bool                                   `json:"passwordCredentialGrantAllowed,omitempty"`
	PasswordPolicy                                            *string                                 `json:"passwordPolicy,omitempty"`
	PermanentLockout                                          *bool                                   `json:"permanentLockout,omitempty"`
	PrivateKey                                                *string                                 `json:"privateKey,omitempty"`
	ProtocolMappers                                           *[]ProtocolMapperRepresentation         `json:"protocolMappers,omitempty"`
	PublicKey                                                 *string                                 `json:"publicKey,omitempty"`
	QuickLoginCheckMilliSeconds                               *int64                                  `json:"quickLoginCheckMilliSeconds,omitempty"`
	Realm                                                     *string                                 `json:"realm,omitempty"`
	RealmCacheEnabled                                         *bool                                   `json:"realmCacheEnabled,omitempty"`
	RefreshTokenMaxReuse                                      *int32                                  `json:"refreshTokenMaxReuse,omitempty"`
	RegistrationAllowed                                       *bool                                   `json:"registrationAllowed,omitempty"`
	RegistrationEmailAsUsername                               *bool                                   `json:"registrationEmailAsUsername,omitempty"`
	RegistrationFlow                                          *string                                 `json:"registrationFlow,omitempty"`
	RememberMe                                                *bool                                   `json:"rememberMe,omitempty"`
	RequiredActions                                           *[]RequiredActionProviderRepresentation `json:"requiredActions,omitempty"`
	RequiredCredentials                                       *[]string                               `json:"requiredCredentials,omitempty"`
	ResetCredentialsFlow                                      *string                                 `json:"resetCredentialsFlow,omitempty"`
	ResetPasswordAllowed                                      *bool                                   `json:"resetPasswordAllowed,omitempty"`
	RevokeRefreshToken                                        *bool                                   `json:"revokeRefreshToken,omitempty"`
	Roles                                                     *RolesRepresentation                    `json:"roles,omitempty"`
	ScopeMappings                                             *[]ScopeMappingRepresentation           `json:"scopeMappings,omitempty"`
	SmtpServer                                                *map[string]string                      `json:"smtpServer,omitempty"`
	Social                                                    *bool                                   `json:"social,omitempty"`
	SocialProviders                                           *map[string]string                      `json:"socialProviders,omitempty"`
	SslRequired                                               *string                                 `json:"sslRequired,omitempty"`
	SsoSessionIdleTimeout                                     *int32                                  `json:"ssoSessionIdleTimeout,omitempty"`
	SsoSessionIdleTimeoutRememberMe                           *int32                                  `json:"ssoSessionIdleTimeoutRememberMe,omitempty"`
	SsoSessionMaxLifespan                                     *int32                                  `json:"ssoSessionMaxLifespan,omitempty"`
	SsoSessionMaxLifespanRememberMe                           *int32                                  `json:"ssoSessionMaxLifespanRememberMe,omitempty"`
	SupportedLocales                                          *[]string                               `json:"supportedLocales,omitempty"`
	UpdateProfileOnInitialSocialLogin                         *bool                                   `json:"updateProfileOnInitialSocialLogin,omitempty"`
	UserCacheEnabled                                          *bool                                   `json:"userCacheEnabled,omitempty"`
	UserFederationMappers                                     *[]UserFederationMapperRepresentation   `json:"userFederationMappers,omitempty"`
	UserFederationProviders                                   *[]UserFederationProviderRepresentation `json:"userFederationProviders,omitempty"`
	UserManagedAccessAllowed                                  *bool                                   `json:"userManagedAccessAllowed,omitempty"`
	Users                                                     *[]UserRepresentation                   `json:"users,omitempty"`
	VerifyEmail                                               *bool                                   `json:"verifyEmail,omitempty"`
	WaitIncrementSeconds                                      *int32                                  `json:"waitIncrementSeconds,omitempty"`
	WebAuthnPolicyAcceptableAaguids                           *[]string                               `json:"webAuthnPolicyAcceptableAaguids,omitempty"`
	WebAuthnPolicyAttestationConveyancePreference             *string                                 `json:"webAuthnPolicyAttestationConveyancePreference,omitempty"`
	WebAuthnPolicyAuthenticatorAttachment                     *string                                 `json:"webAuthnPolicyAuthenticatorAttachment,omitempty"`
	WebAuthnPolicyAvoidSameAuthenticatorRegister              *bool                                   `json:"webAuthnPolicyAvoidSameAuthenticatorRegister,omitempty"`
	WebAuthnPolicyCreateTimeout                               *int32                                  `json:"webAuthnPolicyCreateTimeout,omitempty"`
	WebAuthnPolicyPasswordlessAcceptableAaguids               *[]string                               `json:"webAuthnPolicyPasswordlessAcceptableAaguids,omitempty"`
	WebAuthnPolicyPasswordlessAttestationConveyancePreference *string                                 `json:"webAuthnPolicyPasswordlessAttestationConveyancePreference,omitempty"`
	WebAuthnPolicyPasswordlessAuthenticatorAttachment         *string                                 `json:"webAuthnPolicyPasswordlessAuthenticatorAttachment,omitempty"`
	WebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister  *bool                                   `json:"webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister,omitempty"`
	WebAuthnPolicyPasswordlessCreateTimeout                   *int32                                  `json:"webAuthnPolicyPasswordlessCreateTimeout,omitempty"`
	WebAuthnPolicyPasswordlessRequireResidentKey              *string                                 `json:"webAuthnPolicyPasswordlessRequireResidentKey,omitempty"`
	WebAuthnPolicyPasswordlessRpEntityName                    *string                                 `json:"webAuthnPolicyPasswordlessRpEntityName,omitempty"`
	WebAuthnPolicyPasswordlessRpId                            *string                                 `json:"webAuthnPolicyPasswordlessRpId,omitempty"`
	WebAuthnPolicyPasswordlessSignatureAlgorithms             *[]string                               `json:"webAuthnPolicyPasswordlessSignatureAlgorithms,omitempty"`
	WebAuthnPolicyPasswordlessUserVerificationRequirement     *string                                 `json:"webAuthnPolicyPasswordlessUserVerificationRequirement,omitempty"`
	WebAuthnPolicyRequireResidentKey                          *string                                 `json:"webAuthnPolicyRequireResidentKey,omitempty"`
	WebAuthnPolicyRpEntityName                                *string                                 `json:"webAuthnPolicyRpEntityName,omitempty"`
	WebAuthnPolicyRpId                                        *string                                 `json:"webAuthnPolicyRpId,omitempty"`
	WebAuthnPolicySignatureAlgorithms                         *[]string                               `json:"webAuthnPolicySignatureAlgorithms,omitempty"`
	WebAuthnPolicyUserVerificationRequirement                 *string                                 `json:"webAuthnPolicyUserVerificationRequirement,omitempty"`
}

// RequiredActionProviderRepresentation defines model for RequiredActionProviderRepresentation.
type RequiredActionProviderRepresentation struct {
	Alias         *string            `json:"alias,omitempty"`
	Config        *map[string]string `json:"config,omitempty"`
	DefaultAction *bool              `json:"defaultAction,omitempty"`
	Enabled       *bool              `json:"enabled,omitempty"`
	Name          *string            `json:"name,omitempty"`
	Priority      *int32             `json:"priority,omitempty"`
	ProviderId    *string            `json:"providerId,omitempty"`
}

// ResourceRepresentation defines model for ResourceRepresentation.
type ResourceRepresentation struct {
	Attributes         *map[string][]interface{}    `json:"attributes,omitempty"`
	DisplayName        *string                      `json:"displayName,omitempty"`
	IconUri            *string                      `json:"icon_uri,omitempty"`
	Id                 *string                      `json:"id,omitempty"`
	Name               *string                      `json:"name,omitempty"`
	Owner              *ResourceRepresentationOwner `json:"owner,omitempty"`
	OwnerManagedAccess *bool                        `json:"ownerManagedAccess,omitempty"`
	Scopes             *[]ScopeRepresentation       `json:"scopes,omitempty"`
	ScopesUma          *[]ScopeRepresentation       `json:"scopesUma,omitempty"`
	Type               *string                      `json:"type,omitempty"`
	Uri                *string                      `json:"uri,omitempty"`
	Uris               *[]string                    `json:"uris,omitempty"`
}

// ResourceRepresentationOwner defines model for ResourceRepresentationOwner.
type ResourceRepresentationOwner struct {
	Id   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// ResourceServerRepresentation defines model for ResourceServerRepresentation.
type ResourceServerRepresentation struct {
	AllowRemoteResourceManagement *bool                     `json:"allowRemoteResourceManagement,omitempty"`
	ClientId                      *string                   `json:"clientId,omitempty"`
	DecisionStrategy              *DecisionStrategy         `json:"decisionStrategy,omitempty"`
	Id                            *string                   `json:"id,omitempty"`
	Name                          *string                   `json:"name,omitempty"`
	Policies                      *[]PolicyRepresentation   `json:"policies,omitempty"`
	PolicyEnforcementMode         *PolicyEnforcementMode    `json:"policyEnforcementMode,omitempty"`
	Resources                     *[]ResourceRepresentation `json:"resources,omitempty"`
	Scopes                        *[]ScopeRepresentation    `json:"scopes,omitempty"`
}

// RoleRepresentation defines model for RoleRepresentation.
type RoleRepresentation struct {
	Attributes         *map[string][]interface{} `json:"attributes,omitempty"`
	ClientRole         *bool                     `json:"clientRole,omitempty"`
	Composite          *bool                     `json:"composite,omitempty"`
	Composites         *Composites               `json:"composites,omitempty"`
	ContainerId        *string                   `json:"containerId,omitempty"`
	Description        *string                   `json:"description,omitempty"`
	Id                 *string                   `json:"id,omitempty"`
	Name               *string                   `json:"name,omitempty"`
	ScopeParamRequired *bool                     `json:"scopeParamRequired,omitempty"`
}

// RolesRepresentation defines model for RolesRepresentation.
type RolesRepresentation struct {
	Application *map[string][]interface{} `json:"application,omitempty"`
	Client      *map[string][]interface{} `json:"client,omitempty"`
	Realm       *[]RoleRepresentation     `json:"realm,omitempty"`
}

// ScopeMappingRepresentation defines model for ScopeMappingRepresentation.
type ScopeMappingRepresentation struct {
	Client         *string   `json:"client,omitempty"`
	ClientScope    *string   `json:"clientScope,omitempty"`
	ClientTemplate *string   `json:"clientTemplate,omitempty"`
	Roles          *[]string `json:"roles,omitempty"`
	Self           *string   `json:"self,omitempty"`
}

// ScopeRepresentation defines model for ScopeRepresentation.
type ScopeRepresentation struct {
	DisplayName *string                   `json:"displayName,omitempty"`
	IconUri     *string                   `json:"iconUri,omitempty"`
	Id          *string                   `json:"id,omitempty"`
	Name        *string                   `json:"name,omitempty"`
	Policies    *[]PolicyRepresentation   `json:"policies,omitempty"`
	Resources   *[]ResourceRepresentation `json:"resources,omitempty"`
}

// SocialLinkRepresentation defines model for SocialLinkRepresentation.
type SocialLinkRepresentation struct {
	SocialProvider *string `json:"socialProvider,omitempty"`
	SocialUserId   *string `json:"socialUserId,omitempty"`
	SocialUsername *string `json:"socialUsername,omitempty"`
}

// UserConsentRepresentation defines model for UserConsentRepresentation.
type UserConsentRepresentation struct {
	ClientId            *string   `json:"clientId,omitempty"`
	CreatedDate         *int64    `json:"createdDate,omitempty"`
	GrantedClientScopes *[]string `json:"grantedClientScopes,omitempty"`
	GrantedRealmRoles   *[]string `json:"grantedRealmRoles,omitempty"`
	LastUpdatedDate     *int64    `json:"lastUpdatedDate,omitempty"`
}

// UserFederationMapperRepresentation defines model for UserFederationMapperRepresentation.
type UserFederationMapperRepresentation struct {
	Config                        *map[string]string `json:"config,omitempty"`
	FederationMapperType          *string            `json:"federationMapperType,omitempty"`
	FederationProviderDisplayName *string            `json:"federationProviderDisplayName,omitempty"`
	Id                            *string            `json:"id,omitempty"`
	Name                          *string            `json:"name,omitempty"`
}

// UserFederationProviderRepresentation defines model for UserFederationProviderRepresentation.
type UserFederationProviderRepresentation struct {
	ChangedSyncPeriod *int32             `json:"changedSyncPeriod,omitempty"`
	Config            *map[string]string `json:"config,omitempty"`
	DisplayName       *string            `json:"displayName,omitempty"`
	FullSyncPeriod    *int32             `json:"fullSyncPeriod,omitempty"`
	Id                *string            `json:"id,omitempty"`
	LastSync          *int32             `json:"lastSync,omitempty"`
	Priority          *int32             `json:"priority,omitempty"`
	ProviderName      *string            `json:"providerName,omitempty"`
}

// UserRepresentation defines model for UserRepresentation.
type UserRepresentation struct {
	Access                     *map[string]bool                   `json:"access,omitempty"`
	ApplicationRoles           *map[string][]interface{}          `json:"applicationRoles,omitempty"`
	Attributes                 *map[string][]interface{}          `json:"attributes,omitempty"`
	ClientConsents             *[]UserConsentRepresentation       `json:"clientConsents,omitempty"`
	ClientRoles                *map[string][]interface{}          `json:"clientRoles,omitempty"`
	CreatedTimestamp           *int64                             `json:"createdTimestamp,omitempty"`
	Credentials                *[]CredentialRepresentation        `json:"credentials,omitempty"`
	DisableableCredentialTypes *[]string                          `json:"disableableCredentialTypes,omitempty"`
	Email                      *string                            `json:"email,omitempty"`
	EmailVerified              *bool                              `json:"emailVerified,omitempty"`
	Enabled                    *bool                              `json:"enabled,omitempty"`
	FederatedIdentities        *[]FederatedIdentityRepresentation `json:"federatedIdentities,omitempty"`
	FederationLink             *string                            `json:"federationLink,omitempty"`
	FirstName                  *string                            `json:"firstName,omitempty"`
	Groups                     *[]string                          `json:"groups,omitempty"`
	Id                         *string                            `json:"id,omitempty"`
	LastName                   *string                            `json:"lastName,omitempty"`
	NotBefore                  *int32                             `json:"notBefore,omitempty"`
	Origin                     *string                            `json:"origin,omitempty"`
	RealmRoles                 *[]string                          `json:"realmRoles,omitempty"`
	RequiredActions            *[]string                          `json:"requiredActions,omitempty"`
	Self                       *string                            `json:"self,omitempty"`
	ServiceAccountClientId     *string                            `json:"serviceAccountClientId,omitempty"`
	SocialLinks                *[]SocialLinkRepresentation        `json:"socialLinks,omitempty"`
	Totp                       *bool                              `json:"totp,omitempty"`
	Username                   *string                            `json:"username,omitempty"`
}

// GetParams defines parameters for Get.
type GetParams struct {
	BriefRepresentation *string `form:"briefRepresentation,omitempty" json:"briefRepresentation,omitempty"`
}

// PostJSONBody defines parameters for Post.
type PostJSONBody = openapi_types.File

// GetAdminEventsParams defines parameters for GetAdminEvents.
type GetAdminEventsParams struct {
	AuthClient    *string `form:"authClient,omitempty" json:"authClient,omitempty"`
	AuthIpAddress *string `form:"authIpAddress,omitempty" json:"authIpAddress,omitempty"`
	AuthRealm     *string `form:"authRealm,omitempty" json:"authRealm,omitempty"`

	// AuthUser user id
	AuthUser *string `form:"authUser,omitempty" json:"authUser,omitempty"`
	DateFrom *string `form:"dateFrom,omitempty" json:"dateFrom,omitempty"`
	DateTo   *string `form:"dateTo,omitempty" json:"dateTo,omitempty"`
	First    *string `form:"first,omitempty" json:"first,omitempty"`

	// Max Maximum results size (defaults to 100)
	Max *string `form:"max,omitempty" json:"max,omitempty"`

	// OperationTypes [String]
	OperationTypes *string `form:"operationTypes,omitempty" json:"operationTypes,omitempty"`
	ResourcePath   *string `form:"resourcePath,omitempty" json:"resourcePath,omitempty"`

	// ResourceTypes [String]
	ResourceTypes *string `form:"resourceTypes,omitempty" json:"resourceTypes,omitempty"`
}

// PostCopyJSONBody defines parameters for PostCopy.
type PostCopyJSONBody = string

// PostExecutionJSONBody defines parameters for PostExecution.
type PostExecutionJSONBody = string

// PostFlowJSONBody defines parameters for PostFlow.
type PostFlowJSONBody = string

// PostRegisterRequiredActionJSONBody defines parameters for PostRegisterRequiredAction.
type PostRegisterRequiredActionJSONBody = string

// PostClientDescriptionConverterJSONBody defines parameters for PostClientDescriptionConverter.
type PostClientDescriptionConverterJSONBody = string

// GetProfilesParams defines parameters for GetProfiles.
type GetProfilesParams struct {
	IncludeGlobalProfiles *string `form:"include-global-profiles,omitempty" json:"include-global-profiles,omitempty"`
}

// GetClientScopeScopeMappingsClientCompositeParams defines parameters for GetClientScopeScopeMappingsClientComposite.
type GetClientScopeScopeMappingsClientCompositeParams struct {
	// BriefRepresentation if false, return roles with their attributes
	BriefRepresentation *string `form:"briefRepresentation,omitempty" json:"briefRepresentation,omitempty"`
}

// GetClientScopeScopeMappingsRealmCompositeParams defines parameters for GetClientScopeScopeMappingsRealmComposite.
type GetClientScopeScopeMappingsRealmCompositeParams struct {
	// BriefRepresentation if false, return roles with their attributes
	BriefRepresentation *string `form:"briefRepresentation,omitempty" json:"briefRepresentation,omitempty"`
}

// GetClientTemplateScopeMappingsClientCompositeParams defines parameters for GetClientTemplateScopeMappingsClientComposite.
type GetClientTemplateScopeMappingsClientCompositeParams struct {
	// BriefRepresentation if false, return roles with their attributes
	BriefRepresentation *string `form:"briefRepresentation,omitempty" json:"briefRepresentation,omitempty"`
}

// GetClientTemplateScopeMappingsRealmCompositeParams defines parameters for GetClientTemplateScopeMappingsRealmComposite.
type GetClientTemplateScopeMappingsRealmCompositeParams struct {
	// BriefRepresentation if false, return roles with their attributes
	BriefRepresentation *string `form:"briefRepresentation,omitempty" json:"briefRepresentation,omitempty"`
}

// GetClientsParams defines parameters for GetClients.
type GetClientsParams struct {
	// ClientId filter by clientId
	ClientId *string `form:"clientId,omitempty" json:"clientId,omitempty"`

	// First the first result
	First *string `form:"first,omitempty" json:"first,omitempty"`

	// Max the max results to return
	Max *string `form:"max,omitempty" json:"max,omitempty"`
	Q   *string `form:"q,omitempty" json:"q,omitempty"`

	// Search whether this is a search query or a getClientById query
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// ViewableOnly filter clients that cannot be viewed in full by admin
	ViewableOnly *string `form:"viewableOnly,omitempty" json:"viewableOnly,omitempty"`
}

// GetGenerateExampleAccessTokenParams defines parameters for GetGenerateExampleAccessToken.
type GetGenerateExampleAccessTokenParams struct {
	Scope  *string `form:"scope,omitempty" json:"scope,omitempty"`
	UserId *string `form:"userId,omitempty" json:"userId,omitempty"`
}

// GetGenerateExampleIdTokenParams defines parameters for GetGenerateExampleIdToken.
type GetGenerateExampleIdTokenParams struct {
	Scope  *string `form:"scope,omitempty" json:"scope,omitempty"`
	UserId *string `form:"userId,omitempty" json:"userId,omitempty"`
}

// GetGenerateExampleUserinfoParams defines parameters for GetGenerateExampleUserinfo.
type GetGenerateExampleUserinfoParams struct {
	Scope  *string `form:"scope,omitempty" json:"scope,omitempty"`
	UserId *string `form:"userId,omitempty" json:"userId,omitempty"`
}

// GetProtocolMappersParams defines parameters for GetProtocolMappers.
type GetProtocolMappersParams struct {
	Scope *string `form:"scope,omitempty" json:"scope,omitempty"`
}

// GetGrantedParams defines parameters for GetGranted.
type GetGrantedParams struct {
	Scope *string `form:"scope,omitempty" json:"scope,omitempty"`
}

// GetNotGrantedParams defines parameters for GetNotGranted.
type GetNotGrantedParams struct {
	Scope *string `form:"scope,omitempty" json:"scope,omitempty"`
}

// PostNodesJSONBody defines parameters for PostNodes.
type PostNodesJSONBody = string

// GetOfflineSessionsParams defines parameters for GetOfflineSessions.
type GetOfflineSessionsParams struct {
	// First Paging offset
	First *string `form:"first,omitempty" json:"first,omitempty"`

	// Max Maximum results size (defaults to 100)
	Max *string `form:"max,omitempty" json:"max,omitempty"`
}

// GetClientRolesParams defines parameters for GetClientRoles.
type GetClientRolesParams struct {
	BriefRepresentation *string `form:"briefRepresentation,omitempty" json:"briefRepresentation,omitempty"`
	First               *string `form:"first,omitempty" json:"first,omitempty"`
	Max                 *string `form:"max,omitempty" json:"max,omitempty"`
	Search              *string `form:"search,omitempty" json:"search,omitempty"`
}

// GetClientRoleGroupsParams defines parameters for GetClientRoleGroups.
type GetClientRoleGroupsParams struct {
	// BriefRepresentation if false, return a full representation of the {@code GroupRepresentation} objects.
	BriefRepresentation *string `form:"briefRepresentation,omitempty" json:"briefRepresentation,omitempty"`

	// First first result to return. Ignored if negative or {@code null}.
	First *string `form:"first,omitempty" json:"first,omitempty"`

	// Max maximum number of results to return. Ignored if negative or {@code null}.
	Max *string `form:"max,omitempty" json:"max,omitempty"`
}

// GetClientRoleUsersParams defines parameters for GetClientRoleUsers.
type GetClientRoleUsersParams struct {
	// First first result to return. Ignored if negative or {@code null}.
	First *string `form:"first,omitempty" json:"first,omitempty"`

	// Max maximum number of results to return. Ignored if negative or {@code null}.
	Max *string `form:"max,omitempty" json:"max,omitempty"`
}

// GetClientScopeMappingsClientCompositeParams defines parameters for GetClientScopeMappingsClientComposite.
type GetClientScopeMappingsClientCompositeParams struct {
	// BriefRepresentation if false, return roles with their attributes
	BriefRepresentation *string `form:"briefRepresentation,omitempty" json:"briefRepresentation,omitempty"`
}

// GetClientScopeMappingsRealmCompositeParams defines parameters for GetClientScopeMappingsRealmComposite.
type GetClientScopeMappingsRealmCompositeParams struct {
	// BriefRepresentation if false, return roles with their attributes
	BriefRepresentation *string `form:"briefRepresentation,omitempty" json:"briefRepresentation,omitempty"`
}

// GetClientUserSessionsParams defines parameters for GetClientUserSessions.
type GetClientUserSessionsParams struct {
	// First Paging offset
	First *string `form:"first,omitempty" json:"first,omitempty"`

	// Max Maximum results size (defaults to 100)
	Max *string `form:"max,omitempty" json:"max,omitempty"`
}

// GetComponentsParams defines parameters for GetComponents.
type GetComponentsParams struct {
	Name   *string `form:"name,omitempty" json:"name,omitempty"`
	Parent *string `form:"parent,omitempty" json:"parent,omitempty"`
	Type   *string `form:"type,omitempty" json:"type,omitempty"`
}

// GetSubComponentTypesParams defines parameters for GetSubComponentTypes.
type GetSubComponentTypesParams struct {
	Type *string `form:"type,omitempty" json:"type,omitempty"`
}

// GetEventsParams defines parameters for GetEvents.
type GetEventsParams struct {
	// Client App or oauth client name
	Client *string `form:"client,omitempty" json:"client,omitempty"`

	// DateFrom From date
	DateFrom *string `form:"dateFrom,omitempty" json:"dateFrom,omitempty"`

	// DateTo To date
	DateTo *string `form:"dateTo,omitempty" json:"dateTo,omitempty"`

	// First Paging offset
	First *string `form:"first,omitempty" json:"first,omitempty"`

	// IpAddress IP Address
	IpAddress *string `form:"ipAddress,omitempty" json:"ipAddress,omitempty"`

	// Max Maximum results size (defaults to 100)
	Max *string `form:"max,omitempty" json:"max,omitempty"`

	// Type The types of events to return [String]
	Type *string `form:"type,omitempty" json:"type,omitempty"`

	// User User id
	User *string `form:"user,omitempty" json:"user,omitempty"`
}

// GetGroupsByRealmParams defines parameters for GetGroupsByRealm.
type GetGroupsByRealmParams struct {
	BriefRepresentation *string `form:"briefRepresentation,omitempty" json:"briefRepresentation,omitempty"`
	Exact               *string `form:"exact,omitempty" json:"exact,omitempty"`
	First               *string `form:"first,omitempty" json:"first,omitempty"`
	Max                 *string `form:"max,omitempty" json:"max,omitempty"`
	PopulateHierarchy   *string `form:"populateHierarchy,omitempty" json:"populateHierarchy,omitempty"`
	Q                   *string `form:"q,omitempty" json:"q,omitempty"`
	Search              *string `form:"search,omitempty" json:"search,omitempty"`
}

// GetGroupsCountByRealmParams defines parameters for GetGroupsCountByRealm.
type GetGroupsCountByRealmParams struct {
	Search *string `form:"search,omitempty" json:"search,omitempty"`
	Top    *string `form:"top,omitempty" json:"top,omitempty"`
}

// GetMembersParams defines parameters for GetMembers.
type GetMembersParams struct {
	// BriefRepresentation Only return basic information (only guaranteed to return id, username, created, first and last name, email, enabled state, email verification state, federation link, and access. Note that it means that namely user attributes, required actions, and not before are not returned.)
	BriefRepresentation *string `form:"briefRepresentation,omitempty" json:"briefRepresentation,omitempty"`

	// First Pagination offset
	First *string `form:"first,omitempty" json:"first,omitempty"`

	// Max Maximum results size (defaults to 100)
	Max *string `form:"max,omitempty" json:"max,omitempty"`
}

// GetGroupRoleMappingsClientCompositeParams defines parameters for GetGroupRoleMappingsClientComposite.
type GetGroupRoleMappingsClientCompositeParams struct {
	// BriefRepresentation if false, return roles with their attributes
	BriefRepresentation *string `form:"briefRepresentation,omitempty" json:"briefRepresentation,omitempty"`
}

// GetGroupRoleMappingsRealmCompositeParams defines parameters for GetGroupRoleMappingsRealmComposite.
type GetGroupRoleMappingsRealmCompositeParams struct {
	// BriefRepresentation if false, return roles with their attributes
	BriefRepresentation *string `form:"briefRepresentation,omitempty" json:"briefRepresentation,omitempty"`
}

// PostImportConfigJSONBody defines parameters for PostImportConfig.
type PostImportConfigJSONBody = map[string]interface{}

// GetExportParams defines parameters for GetExport.
type GetExportParams struct {
	// Format Format to use
	Format *string `form:"format,omitempty" json:"format,omitempty"`
}

// GetLocalizationByRealmByLocaleParams defines parameters for GetLocalizationByRealmByLocale.
type GetLocalizationByRealmByLocaleParams struct {
	UseRealmDefaultLocaleFallback *string `form:"useRealmDefaultLocaleFallback,omitempty" json:"useRealmDefaultLocaleFallback,omitempty"`
}

// PostLocalizationJSONBody defines parameters for PostLocalization.
type PostLocalizationJSONBody = string

// PutLocalizationJSONBody defines parameters for PutLocalization.
type PutLocalizationJSONBody = string

// PostPartialExportParams defines parameters for PostPartialExport.
type PostPartialExportParams struct {
	ExportClients        *string `form:"exportClients,omitempty" json:"exportClients,omitempty"`
	ExportGroupsAndRoles *string `form:"exportGroupsAndRoles,omitempty" json:"exportGroupsAndRoles,omitempty"`
}

// PostPartialImportJSONBody defines parameters for PostPartialImport.
type PostPartialImportJSONBody = openapi_types.File

// GetRolesByRealmParams defines parameters for GetRolesByRealm.
type GetRolesByRealmParams struct {
	BriefRepresentation *string `form:"briefRepresentation,omitempty" json:"briefRepresentation,omitempty"`
	First               *string `form:"first,omitempty" json:"first,omitempty"`
	Max                 *string `form:"max,omitempty" json:"max,omitempty"`
	Search              *string `form:"search,omitempty" json:"search,omitempty"`
}

// GetRolesByIdCompositesParams defines parameters for GetRolesByIdComposites.
type GetRolesByIdCompositesParams struct {
	First  *string `form:"first,omitempty" json:"first,omitempty"`
	Max    *string `form:"max,omitempty" json:"max,omitempty"`
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// GetRoleGroupsByRealmByRoleNameParams defines parameters for GetRoleGroupsByRealmByRoleName.
type GetRoleGroupsByRealmByRoleNameParams struct {
	// BriefRepresentation if false, return a full representation of the {@code GroupRepresentation} objects.
	BriefRepresentation *string `form:"briefRepresentation,omitempty" json:"briefRepresentation,omitempty"`

	// First first result to return. Ignored if negative or {@code null}.
	First *string `form:"first,omitempty" json:"first,omitempty"`

	// Max maximum number of results to return. Ignored if negative or {@code null}.
	Max *string `form:"max,omitempty" json:"max,omitempty"`
}

// GetRoleUsersByRealmByRoleNameParams defines parameters for GetRoleUsersByRealmByRoleName.
type GetRoleUsersByRealmByRoleNameParams struct {
	// First first result to return. Ignored if negative or {@code null}.
	First *string `form:"first,omitempty" json:"first,omitempty"`

	// Max maximum number of results to return. Ignored if negative or {@code null}.
	Max *string `form:"max,omitempty" json:"max,omitempty"`
}

// PostTestSmtpConnectionJSONBody defines parameters for PostTestSmtpConnection.
type PostTestSmtpConnectionJSONBody = string

// GetUsersByRealmParams defines parameters for GetUsersByRealm.
type GetUsersByRealmParams struct {
	// BriefRepresentation Boolean which defines whether brief representations are returned (default: false)
	BriefRepresentation *string `form:"briefRepresentation,omitempty" json:"briefRepresentation,omitempty"`

	// Email A String contained in email, or the complete email, if param &quot;exact&quot; is true
	Email *string `form:"email,omitempty" json:"email,omitempty"`

	// EmailVerified whether the email has been verified
	EmailVerified *string `form:"emailVerified,omitempty" json:"emailVerified,omitempty"`

	// Enabled Boolean representing if user is enabled or not
	Enabled *string `form:"enabled,omitempty" json:"enabled,omitempty"`

	// Exact Boolean which defines whether the params &quot;last&quot;, &quot;first&quot;, &quot;email&quot; and &quot;username&quot; must match exactly
	Exact *string `form:"exact,omitempty" json:"exact,omitempty"`

	// First Pagination offset
	First *string `form:"first,omitempty" json:"first,omitempty"`

	// FirstName A String contained in firstName, or the complete firstName, if param &quot;exact&quot; is true
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty"`

	// IdpAlias The alias of an Identity Provider linked to the user
	IdpAlias *string `form:"idpAlias,omitempty" json:"idpAlias,omitempty"`

	// IdpUserId The userId at an Identity Provider linked to the user
	IdpUserId *string `form:"idpUserId,omitempty" json:"idpUserId,omitempty"`

	// LastName A String contained in lastName, or the complete lastName, if param &quot;exact&quot; is true
	LastName *string `form:"lastName,omitempty" json:"lastName,omitempty"`

	// Max Maximum results size (defaults to 100)
	Max *string `form:"max,omitempty" json:"max,omitempty"`

	// Q A query to search for custom attributes, in the format 'key1:value2 key2:value2'
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Search A String contained in username, first or last name, or email. Default search behavior is prefix-based (e.g., foo or foo*). Use foo for infix search and &quot;foo&quot; for exact search.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Username A String contained in username, or the complete username, if param &quot;exact&quot; is true
	Username *string `form:"username,omitempty" json:"username,omitempty"`
}

// GetUsersCountParams defines parameters for GetUsersCount.
type GetUsersCountParams struct {
	// Email email filter
	Email         *string `form:"email,omitempty" json:"email,omitempty"`
	EmailVerified *string `form:"emailVerified,omitempty" json:"emailVerified,omitempty"`

	// Enabled Boolean representing if user is enabled or not
	Enabled *string `form:"enabled,omitempty" json:"enabled,omitempty"`

	// FirstName first name filter
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty"`

	// LastName last name filter
	LastName *string `form:"lastName,omitempty" json:"lastName,omitempty"`
	Q        *string `form:"q,omitempty" json:"q,omitempty"`

	// Search arbitrary search string for all the fields below. Default search behavior is prefix-based (e.g., foo or foo*). Use foo for infix search and &quot;foo&quot; for exact search.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Username username filter
	Username *string `form:"username,omitempty" json:"username,omitempty"`
}

// PutProfileJSONBody defines parameters for PutProfile.
type PutProfileJSONBody = string

// PutUserLabelJSONBody defines parameters for PutUserLabel.
type PutUserLabelJSONBody = string

// PutDisableCredentialTypesJSONBody defines parameters for PutDisableCredentialTypes.
type PutDisableCredentialTypesJSONBody = string

// PutExecuteActionsEmailJSONBody defines parameters for PutExecuteActionsEmail.
type PutExecuteActionsEmailJSONBody = string

// PutExecuteActionsEmailParams defines parameters for PutExecuteActionsEmail.
type PutExecuteActionsEmailParams struct {
	// ClientId Client id
	ClientId *string `form:"client_id,omitempty" json:"client_id,omitempty"`

	// Lifespan Number of seconds after which the generated token expires
	Lifespan *string `form:"lifespan,omitempty" json:"lifespan,omitempty"`

	// RedirectUri Redirect uri
	RedirectUri *string `form:"redirect_uri,omitempty" json:"redirect_uri,omitempty"`
}

// GetUserGroupsParams defines parameters for GetUserGroups.
type GetUserGroupsParams struct {
	BriefRepresentation *string `form:"briefRepresentation,omitempty" json:"briefRepresentation,omitempty"`
	First               *string `form:"first,omitempty" json:"first,omitempty"`
	Max                 *string `form:"max,omitempty" json:"max,omitempty"`
	Search              *string `form:"search,omitempty" json:"search,omitempty"`
}

// GetUserGroupsCountParams defines parameters for GetUserGroupsCount.
type GetUserGroupsCountParams struct {
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// PutResetPasswordEmailParams defines parameters for PutResetPasswordEmail.
type PutResetPasswordEmailParams struct {
	// ClientId client id
	ClientId *string `form:"client_id,omitempty" json:"client_id,omitempty"`

	// RedirectUri redirect uri
	RedirectUri *string `form:"redirect_uri,omitempty" json:"redirect_uri,omitempty"`
}

// GetUserRoleMappingsClientCompositeParams defines parameters for GetUserRoleMappingsClientComposite.
type GetUserRoleMappingsClientCompositeParams struct {
	// BriefRepresentation if false, return roles with their attributes
	BriefRepresentation *string `form:"briefRepresentation,omitempty" json:"briefRepresentation,omitempty"`
}

// GetUserRoleMappingsRealmCompositeParams defines parameters for GetUserRoleMappingsRealmComposite.
type GetUserRoleMappingsRealmCompositeParams struct {
	// BriefRepresentation if false, return roles with their attributes
	BriefRepresentation *string `form:"briefRepresentation,omitempty" json:"briefRepresentation,omitempty"`
}

// PutSendVerifyEmailParams defines parameters for PutSendVerifyEmail.
type PutSendVerifyEmailParams struct {
	// ClientId Client id
	ClientId *string `form:"client_id,omitempty" json:"client_id,omitempty"`

	// RedirectUri Redirect uri
	RedirectUri *string `form:"redirect_uri,omitempty" json:"redirect_uri,omitempty"`
}

// PostJSONRequestBody defines body for Post for application/json ContentType.
type PostJSONRequestBody = PostJSONBody

// PutByRealmJSONRequestBody defines body for PutByRealm for application/json ContentType.
type PutByRealmJSONRequestBody = RealmRepresentation

// PostAuthenticationConfigJSONRequestBody defines body for PostAuthenticationConfig for application/json ContentType.
type PostAuthenticationConfigJSONRequestBody = AuthenticatorConfigRepresentation

// PutAuthenticationConfigJSONRequestBody defines body for PutAuthenticationConfig for application/json ContentType.
type PutAuthenticationConfigJSONRequestBody = AuthenticatorConfigRepresentation

// PostExecutionsJSONRequestBody defines body for PostExecutions for application/json ContentType.
type PostExecutionsJSONRequestBody = AuthenticationExecutionRepresentation

// PostExecutionConfigJSONRequestBody defines body for PostExecutionConfig for application/json ContentType.
type PostExecutionConfigJSONRequestBody = AuthenticatorConfigRepresentation

// PostFlowsJSONRequestBody defines body for PostFlows for application/json ContentType.
type PostFlowsJSONRequestBody = AuthenticationFlowRepresentation

// PostCopyJSONRequestBody defines body for PostCopy for application/json ContentType.
type PostCopyJSONRequestBody = PostCopyJSONBody

// PutExecutionsJSONRequestBody defines body for PutExecutions for application/json ContentType.
type PutExecutionsJSONRequestBody = AuthenticationExecutionInfoRepresentation

// PostExecutionJSONRequestBody defines body for PostExecution for application/json ContentType.
type PostExecutionJSONRequestBody = PostExecutionJSONBody

// PostFlowJSONRequestBody defines body for PostFlow for application/json ContentType.
type PostFlowJSONRequestBody = PostFlowJSONBody

// PutFlowJSONRequestBody defines body for PutFlow for application/json ContentType.
type PutFlowJSONRequestBody = AuthenticationFlowRepresentation

// PostRegisterRequiredActionJSONRequestBody defines body for PostRegisterRequiredAction for application/json ContentType.
type PostRegisterRequiredActionJSONRequestBody = PostRegisterRequiredActionJSONBody

// PutRequiredActionJSONRequestBody defines body for PutRequiredAction for application/json ContentType.
type PutRequiredActionJSONRequestBody = RequiredActionProviderRepresentation

// PostClientDescriptionConverterJSONRequestBody defines body for PostClientDescriptionConverter for application/json ContentType.
type PostClientDescriptionConverterJSONRequestBody = PostClientDescriptionConverterJSONBody

// PutPoliciesJSONRequestBody defines body for PutPolicies for application/json ContentType.
type PutPoliciesJSONRequestBody = ClientPoliciesRepresentation

// PutProfilesJSONRequestBody defines body for PutProfiles for application/json ContentType.
type PutProfilesJSONRequestBody = ClientProfilesRepresentation

// PostClientScopesJSONRequestBody defines body for PostClientScopes for application/json ContentType.
type PostClientScopesJSONRequestBody = ClientScopeRepresentation

// PutClientScopeProtocolMappersModelJSONRequestBody defines body for PutClientScopeProtocolMappersModel for application/json ContentType.
type PutClientScopeProtocolMappersModelJSONRequestBody = ProtocolMapperRepresentation

// PutClientScopeJSONRequestBody defines body for PutClientScope for application/json ContentType.
type PutClientScopeJSONRequestBody = ClientScopeRepresentation

// PostClientScopeProtocolMappersAddModelsJSONRequestBody defines body for PostClientScopeProtocolMappersAddModels for application/json ContentType.
type PostClientScopeProtocolMappersAddModelsJSONRequestBody = ProtocolMapperRepresentation

// PostClientScopeProtocolMappersModelsJSONRequestBody defines body for PostClientScopeProtocolMappersModels for application/json ContentType.
type PostClientScopeProtocolMappersModelsJSONRequestBody = ProtocolMapperRepresentation

// DeleteClientScopeScopeMappingsClientJSONRequestBody defines body for DeleteClientScopeScopeMappingsClient for application/json ContentType.
type DeleteClientScopeScopeMappingsClientJSONRequestBody = RoleRepresentation

// PostClientScopeScopeMappingsClientJSONRequestBody defines body for PostClientScopeScopeMappingsClient for application/json ContentType.
type PostClientScopeScopeMappingsClientJSONRequestBody = RoleRepresentation

// DeleteClientScopeScopeMappingsRealmJSONRequestBody defines body for DeleteClientScopeScopeMappingsRealm for application/json ContentType.
type DeleteClientScopeScopeMappingsRealmJSONRequestBody = RoleRepresentation

// PostClientScopeScopeMappingsRealmJSONRequestBody defines body for PostClientScopeScopeMappingsRealm for application/json ContentType.
type PostClientScopeScopeMappingsRealmJSONRequestBody = RoleRepresentation

// PostClientTemplatesJSONRequestBody defines body for PostClientTemplates for application/json ContentType.
type PostClientTemplatesJSONRequestBody = ClientScopeRepresentation

// PutClientTemplateProtocolMappersModelJSONRequestBody defines body for PutClientTemplateProtocolMappersModel for application/json ContentType.
type PutClientTemplateProtocolMappersModelJSONRequestBody = ProtocolMapperRepresentation

// PutClientTemplateJSONRequestBody defines body for PutClientTemplate for application/json ContentType.
type PutClientTemplateJSONRequestBody = ClientScopeRepresentation

// PostClientTemplateProtocolMappersAddModelsJSONRequestBody defines body for PostClientTemplateProtocolMappersAddModels for application/json ContentType.
type PostClientTemplateProtocolMappersAddModelsJSONRequestBody = ProtocolMapperRepresentation

// PostClientTemplateProtocolMappersModelsJSONRequestBody defines body for PostClientTemplateProtocolMappersModels for application/json ContentType.
type PostClientTemplateProtocolMappersModelsJSONRequestBody = ProtocolMapperRepresentation

// DeleteClientTemplateScopeMappingsClientJSONRequestBody defines body for DeleteClientTemplateScopeMappingsClient for application/json ContentType.
type DeleteClientTemplateScopeMappingsClientJSONRequestBody = RoleRepresentation

// PostClientTemplateScopeMappingsClientJSONRequestBody defines body for PostClientTemplateScopeMappingsClient for application/json ContentType.
type PostClientTemplateScopeMappingsClientJSONRequestBody = RoleRepresentation

// DeleteClientTemplateScopeMappingsRealmJSONRequestBody defines body for DeleteClientTemplateScopeMappingsRealm for application/json ContentType.
type DeleteClientTemplateScopeMappingsRealmJSONRequestBody = RoleRepresentation

// PostClientTemplateScopeMappingsRealmJSONRequestBody defines body for PostClientTemplateScopeMappingsRealm for application/json ContentType.
type PostClientTemplateScopeMappingsRealmJSONRequestBody = RoleRepresentation

// PostClientsJSONRequestBody defines body for PostClients for application/json ContentType.
type PostClientsJSONRequestBody = ClientRepresentation

// PostClientsInitialAccessJSONRequestBody defines body for PostClientsInitialAccess for application/json ContentType.
type PostClientsInitialAccessJSONRequestBody = ClientInitialAccessCreatePresentation

// PutClientProtocolMappersModelJSONRequestBody defines body for PutClientProtocolMappersModel for application/json ContentType.
type PutClientProtocolMappersModelJSONRequestBody = ProtocolMapperRepresentation

// PutClientJSONRequestBody defines body for PutClient for application/json ContentType.
type PutClientJSONRequestBody = ClientRepresentation

// PostDownloadJSONRequestBody defines body for PostDownload for application/json ContentType.
type PostDownloadJSONRequestBody = KeyStoreConfig

// PostGenerateAndDownloadJSONRequestBody defines body for PostGenerateAndDownload for application/json ContentType.
type PostGenerateAndDownloadJSONRequestBody = KeyStoreConfig

// PutClientManagementPermissionsJSONRequestBody defines body for PutClientManagementPermissions for application/json ContentType.
type PutClientManagementPermissionsJSONRequestBody = ManagementPermissionReference

// PostNodesJSONRequestBody defines body for PostNodes for application/json ContentType.
type PostNodesJSONRequestBody = PostNodesJSONBody

// PostClientProtocolMappersAddModelsJSONRequestBody defines body for PostClientProtocolMappersAddModels for application/json ContentType.
type PostClientProtocolMappersAddModelsJSONRequestBody = ProtocolMapperRepresentation

// PostClientProtocolMappersModelsJSONRequestBody defines body for PostClientProtocolMappersModels for application/json ContentType.
type PostClientProtocolMappersModelsJSONRequestBody = ProtocolMapperRepresentation

// PostClientRolesJSONRequestBody defines body for PostClientRoles for application/json ContentType.
type PostClientRolesJSONRequestBody = RoleRepresentation

// PutClientRoleJSONRequestBody defines body for PutClientRole for application/json ContentType.
type PutClientRoleJSONRequestBody = RoleRepresentation

// DeleteClientRoleCompositesJSONRequestBody defines body for DeleteClientRoleComposites for application/json ContentType.
type DeleteClientRoleCompositesJSONRequestBody = RoleRepresentation

// PostClientRoleCompositesJSONRequestBody defines body for PostClientRoleComposites for application/json ContentType.
type PostClientRoleCompositesJSONRequestBody = RoleRepresentation

// PutClientRoleManagementPermissionsJSONRequestBody defines body for PutClientRoleManagementPermissions for application/json ContentType.
type PutClientRoleManagementPermissionsJSONRequestBody = ManagementPermissionReference

// DeleteClientScopeMappingsClientJSONRequestBody defines body for DeleteClientScopeMappingsClient for application/json ContentType.
type DeleteClientScopeMappingsClientJSONRequestBody = RoleRepresentation

// PostClientScopeMappingsClientJSONRequestBody defines body for PostClientScopeMappingsClient for application/json ContentType.
type PostClientScopeMappingsClientJSONRequestBody = RoleRepresentation

// DeleteClientScopeMappingsRealmJSONRequestBody defines body for DeleteClientScopeMappingsRealm for application/json ContentType.
type DeleteClientScopeMappingsRealmJSONRequestBody = RoleRepresentation

// PostClientScopeMappingsRealmJSONRequestBody defines body for PostClientScopeMappingsRealm for application/json ContentType.
type PostClientScopeMappingsRealmJSONRequestBody = RoleRepresentation

// PostComponentsJSONRequestBody defines body for PostComponents for application/json ContentType.
type PostComponentsJSONRequestBody = ComponentRepresentation

// PutComponentJSONRequestBody defines body for PutComponent for application/json ContentType.
type PutComponentJSONRequestBody = ComponentRepresentation

// PutEventsConfigJSONRequestBody defines body for PutEventsConfig for application/json ContentType.
type PutEventsConfigJSONRequestBody = RealmEventsConfigRepresentation

// PostGroupsJSONRequestBody defines body for PostGroups for application/json ContentType.
type PostGroupsJSONRequestBody = GroupRepresentation

// PutGroupByRealmByIdJSONRequestBody defines body for PutGroupByRealmById for application/json ContentType.
type PutGroupByRealmByIdJSONRequestBody = GroupRepresentation

// PostChildrenJSONRequestBody defines body for PostChildren for application/json ContentType.
type PostChildrenJSONRequestBody = GroupRepresentation

// PutGroupManagementPermissionsJSONRequestBody defines body for PutGroupManagementPermissions for application/json ContentType.
type PutGroupManagementPermissionsJSONRequestBody = ManagementPermissionReference

// DeleteGroupRoleMappingsClientJSONRequestBody defines body for DeleteGroupRoleMappingsClient for application/json ContentType.
type DeleteGroupRoleMappingsClientJSONRequestBody = RoleRepresentation

// PostGroupRoleMappingsClientJSONRequestBody defines body for PostGroupRoleMappingsClient for application/json ContentType.
type PostGroupRoleMappingsClientJSONRequestBody = RoleRepresentation

// DeleteGroupRoleMappingsRealmJSONRequestBody defines body for DeleteGroupRoleMappingsRealm for application/json ContentType.
type DeleteGroupRoleMappingsRealmJSONRequestBody = RoleRepresentation

// PostGroupRoleMappingsRealmJSONRequestBody defines body for PostGroupRoleMappingsRealm for application/json ContentType.
type PostGroupRoleMappingsRealmJSONRequestBody = RoleRepresentation

// PostImportConfigJSONRequestBody defines body for PostImportConfig for application/json ContentType.
type PostImportConfigJSONRequestBody = PostImportConfigJSONBody

// PostInstancesJSONRequestBody defines body for PostInstances for application/json ContentType.
type PostInstancesJSONRequestBody = IdentityProviderRepresentation

// PutInstanceJSONRequestBody defines body for PutInstance for application/json ContentType.
type PutInstanceJSONRequestBody = IdentityProviderRepresentation

// PutInstanceManagementPermissionsJSONRequestBody defines body for PutInstanceManagementPermissions for application/json ContentType.
type PutInstanceManagementPermissionsJSONRequestBody = ManagementPermissionReference

// PostMappersJSONRequestBody defines body for PostMappers for application/json ContentType.
type PostMappersJSONRequestBody = IdentityProviderMapperRepresentation

// PutMapperJSONRequestBody defines body for PutMapper for application/json ContentType.
type PutMapperJSONRequestBody = IdentityProviderMapperRepresentation

// PostLocalizationJSONRequestBody defines body for PostLocalization for application/json ContentType.
type PostLocalizationJSONRequestBody = PostLocalizationJSONBody

// PutLocalizationJSONRequestBody defines body for PutLocalization for application/json ContentType.
type PutLocalizationJSONRequestBody = PutLocalizationJSONBody

// PostPartialImportJSONRequestBody defines body for PostPartialImport for application/json ContentType.
type PostPartialImportJSONRequestBody = PostPartialImportJSONBody

// PostRolesByRealmJSONRequestBody defines body for PostRolesByRealm for application/json ContentType.
type PostRolesByRealmJSONRequestBody = RoleRepresentation

// PutRolesByIdJSONRequestBody defines body for PutRolesById for application/json ContentType.
type PutRolesByIdJSONRequestBody = RoleRepresentation

// DeleteRolesByIdCompositesJSONRequestBody defines body for DeleteRolesByIdComposites for application/json ContentType.
type DeleteRolesByIdCompositesJSONRequestBody = RoleRepresentation

// PostRolesByIdCompositesJSONRequestBody defines body for PostRolesByIdComposites for application/json ContentType.
type PostRolesByIdCompositesJSONRequestBody = RoleRepresentation

// PutRolesByIdManagementPermissionsJSONRequestBody defines body for PutRolesByIdManagementPermissions for application/json ContentType.
type PutRolesByIdManagementPermissionsJSONRequestBody = ManagementPermissionReference

// PutRoleByRealmByRoleNameJSONRequestBody defines body for PutRoleByRealmByRoleName for application/json ContentType.
type PutRoleByRealmByRoleNameJSONRequestBody = RoleRepresentation

// DeleteRoleCompositesByRealmByRoleNameJSONRequestBody defines body for DeleteRoleCompositesByRealmByRoleName for application/json ContentType.
type DeleteRoleCompositesByRealmByRoleNameJSONRequestBody = RoleRepresentation

// PostRoleCompositesByRealmByRoleNameJSONRequestBody defines body for PostRoleCompositesByRealmByRoleName for application/json ContentType.
type PostRoleCompositesByRealmByRoleNameJSONRequestBody = RoleRepresentation

// PutRoleManagementPermissionsByRealmByRoleNameJSONRequestBody defines body for PutRoleManagementPermissionsByRealmByRoleName for application/json ContentType.
type PutRoleManagementPermissionsByRealmByRoleNameJSONRequestBody = ManagementPermissionReference

// PostTestSmtpConnectionJSONRequestBody defines body for PostTestSmtpConnection for application/json ContentType.
type PostTestSmtpConnectionJSONRequestBody = PostTestSmtpConnectionJSONBody

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = UserRepresentation

// PutUsersManagementPermissionsJSONRequestBody defines body for PutUsersManagementPermissions for application/json ContentType.
type PutUsersManagementPermissionsJSONRequestBody = ManagementPermissionReference

// PutProfileJSONRequestBody defines body for PutProfile for application/json ContentType.
type PutProfileJSONRequestBody = PutProfileJSONBody

// PutUserJSONRequestBody defines body for PutUser for application/json ContentType.
type PutUserJSONRequestBody = UserRepresentation

// PutUserLabelJSONRequestBody defines body for PutUserLabel for application/json ContentType.
type PutUserLabelJSONRequestBody = PutUserLabelJSONBody

// PutDisableCredentialTypesJSONRequestBody defines body for PutDisableCredentialTypes for application/json ContentType.
type PutDisableCredentialTypesJSONRequestBody = PutDisableCredentialTypesJSONBody

// PutExecuteActionsEmailJSONRequestBody defines body for PutExecuteActionsEmail for application/json ContentType.
type PutExecuteActionsEmailJSONRequestBody = PutExecuteActionsEmailJSONBody

// PutResetPasswordJSONRequestBody defines body for PutResetPassword for application/json ContentType.
type PutResetPasswordJSONRequestBody = CredentialRepresentation

// DeleteUserRoleMappingsClientJSONRequestBody defines body for DeleteUserRoleMappingsClient for application/json ContentType.
type DeleteUserRoleMappingsClientJSONRequestBody = RoleRepresentation

// PostUserRoleMappingsClientJSONRequestBody defines body for PostUserRoleMappingsClient for application/json ContentType.
type PostUserRoleMappingsClientJSONRequestBody = RoleRepresentation

// DeleteUserRoleMappingsRealmJSONRequestBody defines body for DeleteUserRoleMappingsRealm for application/json ContentType.
type DeleteUserRoleMappingsRealmJSONRequestBody = RoleRepresentation

// PostUserRoleMappingsRealmJSONRequestBody defines body for PostUserRoleMappingsRealm for application/json ContentType.
type PostUserRoleMappingsRealmJSONRequestBody = RoleRepresentation

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Get request
	Get(ctx context.Context, params *GetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostWithBody request with any body
	PostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post(ctx context.Context, body PostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteByRealm request
	DeleteByRealm(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetByRealm request
	GetByRealm(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutByRealmWithBody request with any body
	PutByRealmWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutByRealm(ctx context.Context, realm string, body PutByRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminEvents request
	DeleteAdminEvents(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminEvents request
	GetAdminEvents(ctx context.Context, realm string, params *GetAdminEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUsers request
	DeleteUsers(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteBruteForceUser request
	DeleteBruteForceUser(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBruteForceUser request
	GetBruteForceUser(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthenticatorProviders request
	GetAuthenticatorProviders(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientAuthenticatorProviders request
	GetClientAuthenticatorProviders(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthenticationConfigWithBody request with any body
	PostAuthenticationConfigWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthenticationConfig(ctx context.Context, realm string, body PostAuthenticationConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConfigDescription request
	GetConfigDescription(ctx context.Context, realm string, providerId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConfig request
	DeleteConfig(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthenticationConfig request
	GetAuthenticationConfig(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAuthenticationConfigWithBody request with any body
	PutAuthenticationConfigWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAuthenticationConfig(ctx context.Context, realm string, id string, body PutAuthenticationConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostExecutionsWithBody request with any body
	PostExecutionsWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostExecutions(ctx context.Context, realm string, body PostExecutionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteExecution request
	DeleteExecution(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetExecution request
	GetExecution(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostExecutionConfigWithBody request with any body
	PostExecutionConfigWithBody(ctx context.Context, realm string, executionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostExecutionConfig(ctx context.Context, realm string, executionId string, body PostExecutionConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetExecutionConfig request
	GetExecutionConfig(ctx context.Context, realm string, executionId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostExecutionLowerPriority request
	PostExecutionLowerPriority(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostExecutionRaisePriority request
	PostExecutionRaisePriority(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFlows request
	GetFlows(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFlowsWithBody request with any body
	PostFlowsWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFlows(ctx context.Context, realm string, body PostFlowsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCopyWithBody request with any body
	PostCopyWithBody(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCopy(ctx context.Context, realm string, flowAlias string, body PostCopyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetExecutions request
	GetExecutions(ctx context.Context, realm string, flowAlias string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutExecutionsWithBody request with any body
	PutExecutionsWithBody(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutExecutions(ctx context.Context, realm string, flowAlias string, body PutExecutionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostExecutionWithBody request with any body
	PostExecutionWithBody(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostExecution(ctx context.Context, realm string, flowAlias string, body PostExecutionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFlowWithBody request with any body
	PostFlowWithBody(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFlow(ctx context.Context, realm string, flowAlias string, body PostFlowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFlow request
	DeleteFlow(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFlow request
	GetFlow(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutFlowWithBody request with any body
	PutFlowWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutFlow(ctx context.Context, realm string, id string, body PutFlowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFormActionProviders request
	GetFormActionProviders(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFormProviders request
	GetFormProviders(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPerClientConfigDescription request
	GetPerClientConfigDescription(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRegisterRequiredActionWithBody request with any body
	PostRegisterRequiredActionWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRegisterRequiredAction(ctx context.Context, realm string, body PostRegisterRequiredActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRequiredActions request
	GetRequiredActions(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRequiredAction request
	DeleteRequiredAction(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRequiredAction request
	GetRequiredAction(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRequiredActionWithBody request with any body
	PutRequiredActionWithBody(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRequiredAction(ctx context.Context, realm string, alias string, body PutRequiredActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRequiredActionLowerPriority request
	PostRequiredActionLowerPriority(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRequiredActionRaisePriority request
	PostRequiredActionRaisePriority(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUnregisteredRequiredActions request
	GetUnregisteredRequiredActions(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostClientDescriptionConverterWithBody request with any body
	PostClientDescriptionConverterWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostClientDescriptionConverter(ctx context.Context, realm string, body PostClientDescriptionConverterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPolicies request
	GetPolicies(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPoliciesWithBody request with any body
	PutPoliciesWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPolicies(ctx context.Context, realm string, body PutPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProfiles request
	GetProfiles(ctx context.Context, realm string, params *GetProfilesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutProfilesWithBody request with any body
	PutProfilesWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutProfiles(ctx context.Context, realm string, body PutProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProviders request
	GetProviders(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientScopes request
	GetClientScopes(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostClientScopesWithBody request with any body
	PostClientScopesWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostClientScopes(ctx context.Context, realm string, body PostClientScopesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteClientScopeProtocolMappersModel request
	DeleteClientScopeProtocolMappersModel(ctx context.Context, realm string, id1 string, id2 string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientScopeProtocolMappersModel request
	GetClientScopeProtocolMappersModel(ctx context.Context, realm string, id1 string, id2 string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutClientScopeProtocolMappersModelWithBody request with any body
	PutClientScopeProtocolMappersModelWithBody(ctx context.Context, realm string, id1 string, id2 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutClientScopeProtocolMappersModel(ctx context.Context, realm string, id1 string, id2 string, body PutClientScopeProtocolMappersModelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteClientScope request
	DeleteClientScope(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientScope request
	GetClientScope(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutClientScopeWithBody request with any body
	PutClientScopeWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutClientScope(ctx context.Context, realm string, id string, body PutClientScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostClientScopeProtocolMappersAddModelsWithBody request with any body
	PostClientScopeProtocolMappersAddModelsWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostClientScopeProtocolMappersAddModels(ctx context.Context, realm string, id string, body PostClientScopeProtocolMappersAddModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientScopeProtocolMappersModels request
	GetClientScopeProtocolMappersModels(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostClientScopeProtocolMappersModelsWithBody request with any body
	PostClientScopeProtocolMappersModelsWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostClientScopeProtocolMappersModels(ctx context.Context, realm string, id string, body PostClientScopeProtocolMappersModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientScopeProtocolMappersProtocol request
	GetClientScopeProtocolMappersProtocol(ctx context.Context, realm string, id string, protocol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientScopeScopeMappings request
	GetClientScopeScopeMappings(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteClientScopeScopeMappingsClientWithBody request with any body
	DeleteClientScopeScopeMappingsClientWithBody(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteClientScopeScopeMappingsClient(ctx context.Context, realm string, id string, client string, body DeleteClientScopeScopeMappingsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientScopeScopeMappingsClient request
	GetClientScopeScopeMappingsClient(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostClientScopeScopeMappingsClientWithBody request with any body
	PostClientScopeScopeMappingsClientWithBody(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostClientScopeScopeMappingsClient(ctx context.Context, realm string, id string, client string, body PostClientScopeScopeMappingsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientScopeScopeMappingsClientAvailable request
	GetClientScopeScopeMappingsClientAvailable(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientScopeScopeMappingsClientComposite request
	GetClientScopeScopeMappingsClientComposite(ctx context.Context, realm string, id string, client string, params *GetClientScopeScopeMappingsClientCompositeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteClientScopeScopeMappingsRealmWithBody request with any body
	DeleteClientScopeScopeMappingsRealmWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteClientScopeScopeMappingsRealm(ctx context.Context, realm string, id string, body DeleteClientScopeScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientScopeScopeMappingsRealm request
	GetClientScopeScopeMappingsRealm(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostClientScopeScopeMappingsRealmWithBody request with any body
	PostClientScopeScopeMappingsRealmWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostClientScopeScopeMappingsRealm(ctx context.Context, realm string, id string, body PostClientScopeScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientScopeScopeMappingsRealmAvailable request
	GetClientScopeScopeMappingsRealmAvailable(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientScopeScopeMappingsRealmComposite request
	GetClientScopeScopeMappingsRealmComposite(ctx context.Context, realm string, id string, params *GetClientScopeScopeMappingsRealmCompositeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientSessionStats request
	GetClientSessionStats(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientTemplates request
	GetClientTemplates(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostClientTemplatesWithBody request with any body
	PostClientTemplatesWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostClientTemplates(ctx context.Context, realm string, body PostClientTemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteClientTemplateProtocolMappersModel request
	DeleteClientTemplateProtocolMappersModel(ctx context.Context, realm string, id1 string, id2 string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientTemplateProtocolMappersModel request
	GetClientTemplateProtocolMappersModel(ctx context.Context, realm string, id1 string, id2 string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutClientTemplateProtocolMappersModelWithBody request with any body
	PutClientTemplateProtocolMappersModelWithBody(ctx context.Context, realm string, id1 string, id2 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutClientTemplateProtocolMappersModel(ctx context.Context, realm string, id1 string, id2 string, body PutClientTemplateProtocolMappersModelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteClientTemplate request
	DeleteClientTemplate(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientTemplate request
	GetClientTemplate(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutClientTemplateWithBody request with any body
	PutClientTemplateWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutClientTemplate(ctx context.Context, realm string, id string, body PutClientTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostClientTemplateProtocolMappersAddModelsWithBody request with any body
	PostClientTemplateProtocolMappersAddModelsWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostClientTemplateProtocolMappersAddModels(ctx context.Context, realm string, id string, body PostClientTemplateProtocolMappersAddModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientTemplateProtocolMappersModels request
	GetClientTemplateProtocolMappersModels(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostClientTemplateProtocolMappersModelsWithBody request with any body
	PostClientTemplateProtocolMappersModelsWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostClientTemplateProtocolMappersModels(ctx context.Context, realm string, id string, body PostClientTemplateProtocolMappersModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientTemplateProtocolMappersProtocol request
	GetClientTemplateProtocolMappersProtocol(ctx context.Context, realm string, id string, protocol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientTemplateScopeMappings request
	GetClientTemplateScopeMappings(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteClientTemplateScopeMappingsClientWithBody request with any body
	DeleteClientTemplateScopeMappingsClientWithBody(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteClientTemplateScopeMappingsClient(ctx context.Context, realm string, id string, client string, body DeleteClientTemplateScopeMappingsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientTemplateScopeMappingsClient request
	GetClientTemplateScopeMappingsClient(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostClientTemplateScopeMappingsClientWithBody request with any body
	PostClientTemplateScopeMappingsClientWithBody(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostClientTemplateScopeMappingsClient(ctx context.Context, realm string, id string, client string, body PostClientTemplateScopeMappingsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientTemplateScopeMappingsClientAvailable request
	GetClientTemplateScopeMappingsClientAvailable(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientTemplateScopeMappingsClientComposite request
	GetClientTemplateScopeMappingsClientComposite(ctx context.Context, realm string, id string, client string, params *GetClientTemplateScopeMappingsClientCompositeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteClientTemplateScopeMappingsRealmWithBody request with any body
	DeleteClientTemplateScopeMappingsRealmWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteClientTemplateScopeMappingsRealm(ctx context.Context, realm string, id string, body DeleteClientTemplateScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientTemplateScopeMappingsRealm request
	GetClientTemplateScopeMappingsRealm(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostClientTemplateScopeMappingsRealmWithBody request with any body
	PostClientTemplateScopeMappingsRealmWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostClientTemplateScopeMappingsRealm(ctx context.Context, realm string, id string, body PostClientTemplateScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientTemplateScopeMappingsRealmAvailable request
	GetClientTemplateScopeMappingsRealmAvailable(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientTemplateScopeMappingsRealmComposite request
	GetClientTemplateScopeMappingsRealmComposite(ctx context.Context, realm string, id string, params *GetClientTemplateScopeMappingsRealmCompositeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClients request
	GetClients(ctx context.Context, realm string, params *GetClientsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostClientsWithBody request with any body
	PostClientsWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostClients(ctx context.Context, realm string, body PostClientsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientsInitialAccess request
	GetClientsInitialAccess(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostClientsInitialAccessWithBody request with any body
	PostClientsInitialAccessWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostClientsInitialAccess(ctx context.Context, realm string, body PostClientsInitialAccessJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteClientsInitialAcces request
	DeleteClientsInitialAcces(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteClientProtocolMappersModel request
	DeleteClientProtocolMappersModel(ctx context.Context, realm string, id1 string, id2 string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientProtocolMappersModel request
	GetClientProtocolMappersModel(ctx context.Context, realm string, id1 string, id2 string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutClientProtocolMappersModelWithBody request with any body
	PutClientProtocolMappersModelWithBody(ctx context.Context, realm string, id1 string, id2 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutClientProtocolMappersModel(ctx context.Context, realm string, id1 string, id2 string, body PutClientProtocolMappersModelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteClientByRealmById request
	DeleteClientByRealmById(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientByRealmById request
	GetClientByRealmById(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutClientWithBody request with any body
	PutClientWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutClient(ctx context.Context, realm string, id string, body PutClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCertificate request
	GetCertificate(ctx context.Context, realm string, id string, attr string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDownloadWithBody request with any body
	PostDownloadWithBody(ctx context.Context, realm string, id string, attr string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDownload(ctx context.Context, realm string, id string, attr string, body PostDownloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGenerate request
	PostGenerate(ctx context.Context, realm string, id string, attr string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGenerateAndDownloadWithBody request with any body
	PostGenerateAndDownloadWithBody(ctx context.Context, realm string, id string, attr string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGenerateAndDownload(ctx context.Context, realm string, id string, attr string, body PostGenerateAndDownloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUpload request
	PostUpload(ctx context.Context, realm string, id string, attr string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUploadCertificate request
	PostUploadCertificate(ctx context.Context, realm string, id string, attr string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientSecret request
	GetClientSecret(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostClientSecret request
	PostClientSecret(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRotated request
	DeleteRotated(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRotated request
	GetRotated(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDefaultClientScopes request
	GetDefaultClientScopes(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDefaultClientScope request
	DeleteDefaultClientScope(ctx context.Context, realm string, id string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutDefaultClientScope request
	PutDefaultClientScope(ctx context.Context, realm string, id string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGenerateExampleAccessToken request
	GetGenerateExampleAccessToken(ctx context.Context, realm string, id string, params *GetGenerateExampleAccessTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGenerateExampleIdToken request
	GetGenerateExampleIdToken(ctx context.Context, realm string, id string, params *GetGenerateExampleIdTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGenerateExampleUserinfo request
	GetGenerateExampleUserinfo(ctx context.Context, realm string, id string, params *GetGenerateExampleUserinfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProtocolMappers request
	GetProtocolMappers(ctx context.Context, realm string, id string, params *GetProtocolMappersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGranted request
	GetGranted(ctx context.Context, realm string, id string, roleContainerId string, params *GetGrantedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNotGranted request
	GetNotGranted(ctx context.Context, realm string, id string, roleContainerId string, params *GetNotGrantedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInstallationProvider request
	GetInstallationProvider(ctx context.Context, realm string, id string, providerId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientManagementPermissions request
	GetClientManagementPermissions(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutClientManagementPermissionsWithBody request with any body
	PutClientManagementPermissionsWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutClientManagementPermissions(ctx context.Context, realm string, id string, body PutClientManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostNodesWithBody request with any body
	PostNodesWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostNodes(ctx context.Context, realm string, id string, body PostNodesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNode request
	DeleteNode(ctx context.Context, realm string, id string, node string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOfflineSessionCount request
	GetOfflineSessionCount(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOfflineSessions request
	GetOfflineSessions(ctx context.Context, realm string, id string, params *GetOfflineSessionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOptionalClientScopes request
	GetOptionalClientScopes(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOptionalClientScope request
	DeleteOptionalClientScope(ctx context.Context, realm string, id string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOptionalClientScope request
	PutOptionalClientScope(ctx context.Context, realm string, id string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostClientProtocolMappersAddModelsWithBody request with any body
	PostClientProtocolMappersAddModelsWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostClientProtocolMappersAddModels(ctx context.Context, realm string, id string, body PostClientProtocolMappersAddModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientProtocolMappersModels request
	GetClientProtocolMappersModels(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostClientProtocolMappersModelsWithBody request with any body
	PostClientProtocolMappersModelsWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostClientProtocolMappersModels(ctx context.Context, realm string, id string, body PostClientProtocolMappersModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientProtocolMappersProtocol request
	GetClientProtocolMappersProtocol(ctx context.Context, realm string, id string, protocol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostClientPushRevocation request
	PostClientPushRevocation(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRegistrationAccessToken request
	PostRegistrationAccessToken(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientRoles request
	GetClientRoles(ctx context.Context, realm string, id string, params *GetClientRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostClientRolesWithBody request with any body
	PostClientRolesWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostClientRoles(ctx context.Context, realm string, id string, body PostClientRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteClientRole request
	DeleteClientRole(ctx context.Context, realm string, id string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientRole request
	GetClientRole(ctx context.Context, realm string, id string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutClientRoleWithBody request with any body
	PutClientRoleWithBody(ctx context.Context, realm string, id string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutClientRole(ctx context.Context, realm string, id string, roleName string, body PutClientRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteClientRoleCompositesWithBody request with any body
	DeleteClientRoleCompositesWithBody(ctx context.Context, realm string, id string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteClientRoleComposites(ctx context.Context, realm string, id string, roleName string, body DeleteClientRoleCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientRoleComposites request
	GetClientRoleComposites(ctx context.Context, realm string, id string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostClientRoleCompositesWithBody request with any body
	PostClientRoleCompositesWithBody(ctx context.Context, realm string, id string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostClientRoleComposites(ctx context.Context, realm string, id string, roleName string, body PostClientRoleCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientRoleCompositesClient request
	GetClientRoleCompositesClient(ctx context.Context, realm string, id string, roleName string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientRoleCompositesRealm request
	GetClientRoleCompositesRealm(ctx context.Context, realm string, id string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientRoleGroups request
	GetClientRoleGroups(ctx context.Context, realm string, id string, roleName string, params *GetClientRoleGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientRoleManagementPermissions request
	GetClientRoleManagementPermissions(ctx context.Context, realm string, id string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutClientRoleManagementPermissionsWithBody request with any body
	PutClientRoleManagementPermissionsWithBody(ctx context.Context, realm string, id string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutClientRoleManagementPermissions(ctx context.Context, realm string, id string, roleName string, body PutClientRoleManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientRoleUsers request
	GetClientRoleUsers(ctx context.Context, realm string, id string, roleName string, params *GetClientRoleUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientScopeMappings request
	GetClientScopeMappings(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteClientScopeMappingsClientWithBody request with any body
	DeleteClientScopeMappingsClientWithBody(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteClientScopeMappingsClient(ctx context.Context, realm string, id string, client string, body DeleteClientScopeMappingsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientScopeMappingsClient request
	GetClientScopeMappingsClient(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostClientScopeMappingsClientWithBody request with any body
	PostClientScopeMappingsClientWithBody(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostClientScopeMappingsClient(ctx context.Context, realm string, id string, client string, body PostClientScopeMappingsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientScopeMappingsClientAvailable request
	GetClientScopeMappingsClientAvailable(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientScopeMappingsClientComposite request
	GetClientScopeMappingsClientComposite(ctx context.Context, realm string, id string, client string, params *GetClientScopeMappingsClientCompositeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteClientScopeMappingsRealmWithBody request with any body
	DeleteClientScopeMappingsRealmWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteClientScopeMappingsRealm(ctx context.Context, realm string, id string, body DeleteClientScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientScopeMappingsRealm request
	GetClientScopeMappingsRealm(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostClientScopeMappingsRealmWithBody request with any body
	PostClientScopeMappingsRealmWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostClientScopeMappingsRealm(ctx context.Context, realm string, id string, body PostClientScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientScopeMappingsRealmAvailable request
	GetClientScopeMappingsRealmAvailable(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientScopeMappingsRealmComposite request
	GetClientScopeMappingsRealmComposite(ctx context.Context, realm string, id string, params *GetClientScopeMappingsRealmCompositeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceAccountUser request
	GetServiceAccountUser(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSessionCount request
	GetSessionCount(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTestNodesAvailable request
	GetTestNodesAvailable(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientUserSessions request
	GetClientUserSessions(ctx context.Context, realm string, id string, params *GetClientUserSessionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetComponents request
	GetComponents(ctx context.Context, realm string, params *GetComponentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostComponentsWithBody request with any body
	PostComponentsWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostComponents(ctx context.Context, realm string, body PostComponentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteComponent request
	DeleteComponent(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetComponent request
	GetComponent(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutComponentWithBody request with any body
	PutComponentWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutComponent(ctx context.Context, realm string, id string, body PutComponentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSubComponentTypes request
	GetSubComponentTypes(ctx context.Context, realm string, id string, params *GetSubComponentTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCredentialRegistrators request
	GetCredentialRegistrators(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDefaultDefaultClientScopes request
	GetDefaultDefaultClientScopes(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDefaultDefaultClientScope request
	DeleteDefaultDefaultClientScope(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutDefaultDefaultClientScope request
	PutDefaultDefaultClientScope(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDefaultGroups request
	GetDefaultGroups(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDefaultGroup request
	DeleteDefaultGroup(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutDefaultGroup request
	PutDefaultGroup(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDefaultOptionalClientScopes request
	GetDefaultOptionalClientScopes(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDefaultOptionalClientScope request
	DeleteDefaultOptionalClientScope(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutDefaultOptionalClientScope request
	PutDefaultOptionalClientScope(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEvents request
	DeleteEvents(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEvents request
	GetEvents(ctx context.Context, realm string, params *GetEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEventsConfig request
	GetEventsConfig(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutEventsConfigWithBody request with any body
	PutEventsConfigWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutEventsConfig(ctx context.Context, realm string, body PutEventsConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGroupByPath request
	GetGroupByPath(ctx context.Context, realm string, path string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGroupsByRealm request
	GetGroupsByRealm(ctx context.Context, realm string, params *GetGroupsByRealmParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGroupsWithBody request with any body
	PostGroupsWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGroups(ctx context.Context, realm string, body PostGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGroupsCountByRealm request
	GetGroupsCountByRealm(ctx context.Context, realm string, params *GetGroupsCountByRealmParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGroupByRealmById request
	DeleteGroupByRealmById(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGroup request
	GetGroup(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutGroupByRealmByIdWithBody request with any body
	PutGroupByRealmByIdWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutGroupByRealmById(ctx context.Context, realm string, id string, body PutGroupByRealmByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostChildrenWithBody request with any body
	PostChildrenWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostChildren(ctx context.Context, realm string, id string, body PostChildrenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGroupManagementPermissions request
	GetGroupManagementPermissions(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutGroupManagementPermissionsWithBody request with any body
	PutGroupManagementPermissionsWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutGroupManagementPermissions(ctx context.Context, realm string, id string, body PutGroupManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMembers request
	GetMembers(ctx context.Context, realm string, id string, params *GetMembersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGroupRoleMappings request
	GetGroupRoleMappings(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGroupRoleMappingsClientWithBody request with any body
	DeleteGroupRoleMappingsClientWithBody(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteGroupRoleMappingsClient(ctx context.Context, realm string, id string, client string, body DeleteGroupRoleMappingsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGroupRoleMappingsClient request
	GetGroupRoleMappingsClient(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGroupRoleMappingsClientWithBody request with any body
	PostGroupRoleMappingsClientWithBody(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGroupRoleMappingsClient(ctx context.Context, realm string, id string, client string, body PostGroupRoleMappingsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGroupRoleMappingsClientAvailable request
	GetGroupRoleMappingsClientAvailable(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGroupRoleMappingsClientComposite request
	GetGroupRoleMappingsClientComposite(ctx context.Context, realm string, id string, client string, params *GetGroupRoleMappingsClientCompositeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGroupRoleMappingsRealmWithBody request with any body
	DeleteGroupRoleMappingsRealmWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteGroupRoleMappingsRealm(ctx context.Context, realm string, id string, body DeleteGroupRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGroupRoleMappingsRealm request
	GetGroupRoleMappingsRealm(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGroupRoleMappingsRealmWithBody request with any body
	PostGroupRoleMappingsRealmWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGroupRoleMappingsRealm(ctx context.Context, realm string, id string, body PostGroupRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGroupRoleMappingsRealmAvailable request
	GetGroupRoleMappingsRealmAvailable(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGroupRoleMappingsRealmComposite request
	GetGroupRoleMappingsRealmComposite(ctx context.Context, realm string, id string, params *GetGroupRoleMappingsRealmCompositeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostImportConfigWithBody request with any body
	PostImportConfigWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostImportConfig(ctx context.Context, realm string, body PostImportConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInstances request
	GetInstances(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInstancesWithBody request with any body
	PostInstancesWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInstances(ctx context.Context, realm string, body PostInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteInstance request
	DeleteInstance(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInstance request
	GetInstance(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutInstanceWithBody request with any body
	PutInstanceWithBody(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutInstance(ctx context.Context, realm string, alias string, body PutInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetExport request
	GetExport(ctx context.Context, realm string, alias string, params *GetExportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInstanceManagementPermissions request
	GetInstanceManagementPermissions(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutInstanceManagementPermissionsWithBody request with any body
	PutInstanceManagementPermissionsWithBody(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutInstanceManagementPermissions(ctx context.Context, realm string, alias string, body PutInstanceManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMapperTypes request
	GetMapperTypes(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMappers request
	GetMappers(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMappersWithBody request with any body
	PostMappersWithBody(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMappers(ctx context.Context, realm string, alias string, body PostMappersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMapper request
	DeleteMapper(ctx context.Context, realm string, alias string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMapper request
	GetMapper(ctx context.Context, realm string, alias string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutMapperWithBody request with any body
	PutMapperWithBody(ctx context.Context, realm string, alias string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutMapper(ctx context.Context, realm string, alias string, id string, body PutMapperJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdentityProviderProvider request
	GetIdentityProviderProvider(ctx context.Context, realm string, providerId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKeys request
	GetKeys(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLocalizationByRealm request
	GetLocalizationByRealm(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteLocalizationByRealmByLocale request
	DeleteLocalizationByRealmByLocale(ctx context.Context, realm string, locale string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLocalizationByRealmByLocale request
	GetLocalizationByRealmByLocale(ctx context.Context, realm string, locale string, params *GetLocalizationByRealmByLocaleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLocalizationWithBody request with any body
	PostLocalizationWithBody(ctx context.Context, realm string, locale string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostLocalization(ctx context.Context, realm string, locale string, body PostLocalizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteLocalizationByRealmByLocaleByKey request
	DeleteLocalizationByRealmByLocaleByKey(ctx context.Context, realm string, locale string, key string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLocalizationByRealmByLocaleByKey request
	GetLocalizationByRealmByLocaleByKey(ctx context.Context, realm string, locale string, key string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutLocalizationWithBody request with any body
	PutLocalizationWithBody(ctx context.Context, realm string, locale string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutLocalization(ctx context.Context, realm string, locale string, key string, body PutLocalizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLogoutAll request
	PostLogoutAll(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPartialExport request
	PostPartialExport(ctx context.Context, realm string, params *PostPartialExportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPartialImportWithBody request with any body
	PostPartialImportWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPartialImport(ctx context.Context, realm string, body PostPartialImportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPushRevocationByRealm request
	PostPushRevocationByRealm(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRolesByRealm request
	GetRolesByRealm(ctx context.Context, realm string, params *GetRolesByRealmParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRolesByRealmWithBody request with any body
	PostRolesByRealmWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRolesByRealm(ctx context.Context, realm string, body PostRolesByRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRolesById request
	DeleteRolesById(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRolesById request
	GetRolesById(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRolesByIdWithBody request with any body
	PutRolesByIdWithBody(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRolesById(ctx context.Context, realm string, roleId string, body PutRolesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRolesByIdCompositesWithBody request with any body
	DeleteRolesByIdCompositesWithBody(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteRolesByIdComposites(ctx context.Context, realm string, roleId string, body DeleteRolesByIdCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRolesByIdComposites request
	GetRolesByIdComposites(ctx context.Context, realm string, roleId string, params *GetRolesByIdCompositesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRolesByIdCompositesWithBody request with any body
	PostRolesByIdCompositesWithBody(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRolesByIdComposites(ctx context.Context, realm string, roleId string, body PostRolesByIdCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRolesByIdCompositesClient request
	GetRolesByIdCompositesClient(ctx context.Context, realm string, roleId string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRolesByIdCompositesRealm request
	GetRolesByIdCompositesRealm(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRolesByIdManagementPermissions request
	GetRolesByIdManagementPermissions(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRolesByIdManagementPermissionsWithBody request with any body
	PutRolesByIdManagementPermissionsWithBody(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRolesByIdManagementPermissions(ctx context.Context, realm string, roleId string, body PutRolesByIdManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRoleByRealmByRoleName request
	DeleteRoleByRealmByRoleName(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRoleByRealmByRoleName request
	GetRoleByRealmByRoleName(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRoleByRealmByRoleNameWithBody request with any body
	PutRoleByRealmByRoleNameWithBody(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRoleByRealmByRoleName(ctx context.Context, realm string, roleName string, body PutRoleByRealmByRoleNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRoleCompositesByRealmByRoleNameWithBody request with any body
	DeleteRoleCompositesByRealmByRoleNameWithBody(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteRoleCompositesByRealmByRoleName(ctx context.Context, realm string, roleName string, body DeleteRoleCompositesByRealmByRoleNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRoleCompositesByRealmByRoleName request
	GetRoleCompositesByRealmByRoleName(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRoleCompositesByRealmByRoleNameWithBody request with any body
	PostRoleCompositesByRealmByRoleNameWithBody(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRoleCompositesByRealmByRoleName(ctx context.Context, realm string, roleName string, body PostRoleCompositesByRealmByRoleNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRoleCompositesClientByRealmByRoleNameByClientUuid request
	GetRoleCompositesClientByRealmByRoleNameByClientUuid(ctx context.Context, realm string, roleName string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRoleCompositesRealmByRealmByRoleName request
	GetRoleCompositesRealmByRealmByRoleName(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRoleGroupsByRealmByRoleName request
	GetRoleGroupsByRealmByRoleName(ctx context.Context, realm string, roleName string, params *GetRoleGroupsByRealmByRoleNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRoleManagementPermissionsByRealmByRoleName request
	GetRoleManagementPermissionsByRealmByRoleName(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRoleManagementPermissionsByRealmByRoleNameWithBody request with any body
	PutRoleManagementPermissionsByRealmByRoleNameWithBody(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRoleManagementPermissionsByRealmByRoleName(ctx context.Context, realm string, roleName string, body PutRoleManagementPermissionsByRealmByRoleNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRoleUsersByRealmByRoleName request
	GetRoleUsersByRealmByRoleName(ctx context.Context, realm string, roleName string, params *GetRoleUsersByRealmByRoleNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSession request
	DeleteSession(ctx context.Context, realm string, session string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTestSmtpConnectionWithBody request with any body
	PostTestSmtpConnectionWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTestSmtpConnection(ctx context.Context, realm string, body PostTestSmtpConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersByRealm request
	GetUsersByRealm(ctx context.Context, realm string, params *GetUsersByRealmParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUsersWithBody request with any body
	PostUsersWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUsers(ctx context.Context, realm string, body PostUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersManagementPermissions request
	GetUsersManagementPermissions(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutUsersManagementPermissionsWithBody request with any body
	PutUsersManagementPermissionsWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutUsersManagementPermissions(ctx context.Context, realm string, body PutUsersManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersCount request
	GetUsersCount(ctx context.Context, realm string, params *GetUsersCountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProfile request
	GetProfile(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutProfileWithBody request with any body
	PutProfileWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutProfile(ctx context.Context, realm string, body PutProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserByRealmById request
	DeleteUserByRealmById(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserByRealmById request
	GetUserByRealmById(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutUserWithBody request with any body
	PutUserWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutUser(ctx context.Context, realm string, id string, body PutUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConfiguredUserStorageCredentialTypes request
	GetConfiguredUserStorageCredentialTypes(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsents request
	GetConsents(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConsent request
	DeleteConsent(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCredentials request
	GetCredentials(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCredential request
	DeleteCredential(ctx context.Context, realm string, id string, credentialId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMoveAfter request
	PostMoveAfter(ctx context.Context, realm string, id string, credentialId string, newPreviousCredentialId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMoveToFirst request
	PostMoveToFirst(ctx context.Context, realm string, id string, credentialId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutUserLabelWithBody request with any body
	PutUserLabelWithBody(ctx context.Context, realm string, id string, credentialId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutUserLabel(ctx context.Context, realm string, id string, credentialId string, body PutUserLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutDisableCredentialTypesWithBody request with any body
	PutDisableCredentialTypesWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutDisableCredentialTypes(ctx context.Context, realm string, id string, body PutDisableCredentialTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutExecuteActionsEmailWithBody request with any body
	PutExecuteActionsEmailWithBody(ctx context.Context, realm string, id string, params *PutExecuteActionsEmailParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutExecuteActionsEmail(ctx context.Context, realm string, id string, params *PutExecuteActionsEmailParams, body PutExecuteActionsEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFederatedIdentity request
	GetFederatedIdentity(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFederatedIdentity request
	DeleteFederatedIdentity(ctx context.Context, realm string, id string, provider string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFederatedIdentity request
	PostFederatedIdentity(ctx context.Context, realm string, id string, provider string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserGroups request
	GetUserGroups(ctx context.Context, realm string, id string, params *GetUserGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserGroupsCount request
	GetUserGroupsCount(ctx context.Context, realm string, id string, params *GetUserGroupsCountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserGroup request
	DeleteUserGroup(ctx context.Context, realm string, id string, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutUserGroup request
	PutUserGroup(ctx context.Context, realm string, id string, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostImpersonation request
	PostImpersonation(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLogout request
	PostLogout(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOfflineSession request
	GetOfflineSession(ctx context.Context, realm string, id string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutResetPasswordWithBody request with any body
	PutResetPasswordWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutResetPassword(ctx context.Context, realm string, id string, body PutResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutResetPasswordEmail request
	PutResetPasswordEmail(ctx context.Context, realm string, id string, params *PutResetPasswordEmailParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserRoleMappings request
	GetUserRoleMappings(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserRoleMappingsClientWithBody request with any body
	DeleteUserRoleMappingsClientWithBody(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteUserRoleMappingsClient(ctx context.Context, realm string, id string, client string, body DeleteUserRoleMappingsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserRoleMappingsClient request
	GetUserRoleMappingsClient(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserRoleMappingsClientWithBody request with any body
	PostUserRoleMappingsClientWithBody(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserRoleMappingsClient(ctx context.Context, realm string, id string, client string, body PostUserRoleMappingsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserRoleMappingsClientAvailable request
	GetUserRoleMappingsClientAvailable(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserRoleMappingsClientComposite request
	GetUserRoleMappingsClientComposite(ctx context.Context, realm string, id string, client string, params *GetUserRoleMappingsClientCompositeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserRoleMappingsRealmWithBody request with any body
	DeleteUserRoleMappingsRealmWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteUserRoleMappingsRealm(ctx context.Context, realm string, id string, body DeleteUserRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserRoleMappingsRealm request
	GetUserRoleMappingsRealm(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserRoleMappingsRealmWithBody request with any body
	PostUserRoleMappingsRealmWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserRoleMappingsRealm(ctx context.Context, realm string, id string, body PostUserRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserRoleMappingsRealmAvailable request
	GetUserRoleMappingsRealmAvailable(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserRoleMappingsRealmComposite request
	GetUserRoleMappingsRealmComposite(ctx context.Context, realm string, id string, params *GetUserRoleMappingsRealmCompositeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSendVerifyEmail request
	PutSendVerifyEmail(ctx context.Context, realm string, id string, params *PutSendVerifyEmailParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSessions request
	GetSessions(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Get(ctx context.Context, params *GetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post(ctx context.Context, body PostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteByRealm(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteByRealmRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetByRealm(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetByRealmRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutByRealmWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutByRealmRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutByRealm(ctx context.Context, realm string, body PutByRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutByRealmRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminEvents(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminEventsRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminEvents(ctx context.Context, realm string, params *GetAdminEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminEventsRequest(c.Server, realm, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUsers(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUsersRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBruteForceUser(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBruteForceUserRequest(c.Server, realm, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBruteForceUser(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBruteForceUserRequest(c.Server, realm, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthenticatorProviders(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthenticatorProvidersRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientAuthenticatorProviders(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientAuthenticatorProvidersRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthenticationConfigWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthenticationConfigRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthenticationConfig(ctx context.Context, realm string, body PostAuthenticationConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthenticationConfigRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConfigDescription(ctx context.Context, realm string, providerId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConfigDescriptionRequest(c.Server, realm, providerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConfig(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConfigRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthenticationConfig(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthenticationConfigRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAuthenticationConfigWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAuthenticationConfigRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAuthenticationConfig(ctx context.Context, realm string, id string, body PutAuthenticationConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAuthenticationConfigRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostExecutionsWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostExecutionsRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostExecutions(ctx context.Context, realm string, body PostExecutionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostExecutionsRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteExecution(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteExecutionRequest(c.Server, realm, executionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetExecution(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetExecutionRequest(c.Server, realm, executionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostExecutionConfigWithBody(ctx context.Context, realm string, executionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostExecutionConfigRequestWithBody(c.Server, realm, executionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostExecutionConfig(ctx context.Context, realm string, executionId string, body PostExecutionConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostExecutionConfigRequest(c.Server, realm, executionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetExecutionConfig(ctx context.Context, realm string, executionId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetExecutionConfigRequest(c.Server, realm, executionId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostExecutionLowerPriority(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostExecutionLowerPriorityRequest(c.Server, realm, executionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostExecutionRaisePriority(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostExecutionRaisePriorityRequest(c.Server, realm, executionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFlows(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFlowsRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFlowsWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFlowsRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFlows(ctx context.Context, realm string, body PostFlowsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFlowsRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCopyWithBody(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCopyRequestWithBody(c.Server, realm, flowAlias, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCopy(ctx context.Context, realm string, flowAlias string, body PostCopyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCopyRequest(c.Server, realm, flowAlias, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetExecutions(ctx context.Context, realm string, flowAlias string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetExecutionsRequest(c.Server, realm, flowAlias)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutExecutionsWithBody(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutExecutionsRequestWithBody(c.Server, realm, flowAlias, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutExecutions(ctx context.Context, realm string, flowAlias string, body PutExecutionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutExecutionsRequest(c.Server, realm, flowAlias, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostExecutionWithBody(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostExecutionRequestWithBody(c.Server, realm, flowAlias, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostExecution(ctx context.Context, realm string, flowAlias string, body PostExecutionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostExecutionRequest(c.Server, realm, flowAlias, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFlowWithBody(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFlowRequestWithBody(c.Server, realm, flowAlias, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFlow(ctx context.Context, realm string, flowAlias string, body PostFlowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFlowRequest(c.Server, realm, flowAlias, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFlow(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFlowRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFlow(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFlowRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFlowWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFlowRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFlow(ctx context.Context, realm string, id string, body PutFlowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFlowRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFormActionProviders(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFormActionProvidersRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFormProviders(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFormProvidersRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPerClientConfigDescription(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPerClientConfigDescriptionRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRegisterRequiredActionWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRegisterRequiredActionRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRegisterRequiredAction(ctx context.Context, realm string, body PostRegisterRequiredActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRegisterRequiredActionRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRequiredActions(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequiredActionsRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRequiredAction(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRequiredActionRequest(c.Server, realm, alias)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRequiredAction(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequiredActionRequest(c.Server, realm, alias)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRequiredActionWithBody(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRequiredActionRequestWithBody(c.Server, realm, alias, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRequiredAction(ctx context.Context, realm string, alias string, body PutRequiredActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRequiredActionRequest(c.Server, realm, alias, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRequiredActionLowerPriority(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRequiredActionLowerPriorityRequest(c.Server, realm, alias)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRequiredActionRaisePriority(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRequiredActionRaisePriorityRequest(c.Server, realm, alias)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUnregisteredRequiredActions(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUnregisteredRequiredActionsRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientDescriptionConverterWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientDescriptionConverterRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientDescriptionConverter(ctx context.Context, realm string, body PostClientDescriptionConverterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientDescriptionConverterRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPolicies(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPoliciesRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPoliciesWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPoliciesRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPolicies(ctx context.Context, realm string, body PutPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPoliciesRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProfiles(ctx context.Context, realm string, params *GetProfilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProfilesRequest(c.Server, realm, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutProfilesWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutProfilesRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutProfiles(ctx context.Context, realm string, body PutProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutProfilesRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProviders(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProvidersRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientScopes(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientScopesRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientScopesWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientScopesRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientScopes(ctx context.Context, realm string, body PostClientScopesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientScopesRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteClientScopeProtocolMappersModel(ctx context.Context, realm string, id1 string, id2 string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteClientScopeProtocolMappersModelRequest(c.Server, realm, id1, id2)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientScopeProtocolMappersModel(ctx context.Context, realm string, id1 string, id2 string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientScopeProtocolMappersModelRequest(c.Server, realm, id1, id2)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutClientScopeProtocolMappersModelWithBody(ctx context.Context, realm string, id1 string, id2 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutClientScopeProtocolMappersModelRequestWithBody(c.Server, realm, id1, id2, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutClientScopeProtocolMappersModel(ctx context.Context, realm string, id1 string, id2 string, body PutClientScopeProtocolMappersModelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutClientScopeProtocolMappersModelRequest(c.Server, realm, id1, id2, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteClientScope(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteClientScopeRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientScope(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientScopeRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutClientScopeWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutClientScopeRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutClientScope(ctx context.Context, realm string, id string, body PutClientScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutClientScopeRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientScopeProtocolMappersAddModelsWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientScopeProtocolMappersAddModelsRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientScopeProtocolMappersAddModels(ctx context.Context, realm string, id string, body PostClientScopeProtocolMappersAddModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientScopeProtocolMappersAddModelsRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientScopeProtocolMappersModels(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientScopeProtocolMappersModelsRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientScopeProtocolMappersModelsWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientScopeProtocolMappersModelsRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientScopeProtocolMappersModels(ctx context.Context, realm string, id string, body PostClientScopeProtocolMappersModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientScopeProtocolMappersModelsRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientScopeProtocolMappersProtocol(ctx context.Context, realm string, id string, protocol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientScopeProtocolMappersProtocolRequest(c.Server, realm, id, protocol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientScopeScopeMappings(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientScopeScopeMappingsRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteClientScopeScopeMappingsClientWithBody(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteClientScopeScopeMappingsClientRequestWithBody(c.Server, realm, id, client, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteClientScopeScopeMappingsClient(ctx context.Context, realm string, id string, client string, body DeleteClientScopeScopeMappingsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteClientScopeScopeMappingsClientRequest(c.Server, realm, id, client, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientScopeScopeMappingsClient(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientScopeScopeMappingsClientRequest(c.Server, realm, id, client)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientScopeScopeMappingsClientWithBody(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientScopeScopeMappingsClientRequestWithBody(c.Server, realm, id, client, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientScopeScopeMappingsClient(ctx context.Context, realm string, id string, client string, body PostClientScopeScopeMappingsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientScopeScopeMappingsClientRequest(c.Server, realm, id, client, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientScopeScopeMappingsClientAvailable(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientScopeScopeMappingsClientAvailableRequest(c.Server, realm, id, client)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientScopeScopeMappingsClientComposite(ctx context.Context, realm string, id string, client string, params *GetClientScopeScopeMappingsClientCompositeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientScopeScopeMappingsClientCompositeRequest(c.Server, realm, id, client, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteClientScopeScopeMappingsRealmWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteClientScopeScopeMappingsRealmRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteClientScopeScopeMappingsRealm(ctx context.Context, realm string, id string, body DeleteClientScopeScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteClientScopeScopeMappingsRealmRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientScopeScopeMappingsRealm(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientScopeScopeMappingsRealmRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientScopeScopeMappingsRealmWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientScopeScopeMappingsRealmRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientScopeScopeMappingsRealm(ctx context.Context, realm string, id string, body PostClientScopeScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientScopeScopeMappingsRealmRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientScopeScopeMappingsRealmAvailable(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientScopeScopeMappingsRealmAvailableRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientScopeScopeMappingsRealmComposite(ctx context.Context, realm string, id string, params *GetClientScopeScopeMappingsRealmCompositeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientScopeScopeMappingsRealmCompositeRequest(c.Server, realm, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientSessionStats(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientSessionStatsRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientTemplates(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientTemplatesRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientTemplatesWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientTemplatesRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientTemplates(ctx context.Context, realm string, body PostClientTemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientTemplatesRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteClientTemplateProtocolMappersModel(ctx context.Context, realm string, id1 string, id2 string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteClientTemplateProtocolMappersModelRequest(c.Server, realm, id1, id2)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientTemplateProtocolMappersModel(ctx context.Context, realm string, id1 string, id2 string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientTemplateProtocolMappersModelRequest(c.Server, realm, id1, id2)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutClientTemplateProtocolMappersModelWithBody(ctx context.Context, realm string, id1 string, id2 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutClientTemplateProtocolMappersModelRequestWithBody(c.Server, realm, id1, id2, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutClientTemplateProtocolMappersModel(ctx context.Context, realm string, id1 string, id2 string, body PutClientTemplateProtocolMappersModelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutClientTemplateProtocolMappersModelRequest(c.Server, realm, id1, id2, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteClientTemplate(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteClientTemplateRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientTemplate(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientTemplateRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutClientTemplateWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutClientTemplateRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutClientTemplate(ctx context.Context, realm string, id string, body PutClientTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutClientTemplateRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientTemplateProtocolMappersAddModelsWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientTemplateProtocolMappersAddModelsRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientTemplateProtocolMappersAddModels(ctx context.Context, realm string, id string, body PostClientTemplateProtocolMappersAddModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientTemplateProtocolMappersAddModelsRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientTemplateProtocolMappersModels(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientTemplateProtocolMappersModelsRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientTemplateProtocolMappersModelsWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientTemplateProtocolMappersModelsRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientTemplateProtocolMappersModels(ctx context.Context, realm string, id string, body PostClientTemplateProtocolMappersModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientTemplateProtocolMappersModelsRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientTemplateProtocolMappersProtocol(ctx context.Context, realm string, id string, protocol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientTemplateProtocolMappersProtocolRequest(c.Server, realm, id, protocol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientTemplateScopeMappings(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientTemplateScopeMappingsRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteClientTemplateScopeMappingsClientWithBody(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteClientTemplateScopeMappingsClientRequestWithBody(c.Server, realm, id, client, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteClientTemplateScopeMappingsClient(ctx context.Context, realm string, id string, client string, body DeleteClientTemplateScopeMappingsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteClientTemplateScopeMappingsClientRequest(c.Server, realm, id, client, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientTemplateScopeMappingsClient(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientTemplateScopeMappingsClientRequest(c.Server, realm, id, client)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientTemplateScopeMappingsClientWithBody(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientTemplateScopeMappingsClientRequestWithBody(c.Server, realm, id, client, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientTemplateScopeMappingsClient(ctx context.Context, realm string, id string, client string, body PostClientTemplateScopeMappingsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientTemplateScopeMappingsClientRequest(c.Server, realm, id, client, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientTemplateScopeMappingsClientAvailable(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientTemplateScopeMappingsClientAvailableRequest(c.Server, realm, id, client)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientTemplateScopeMappingsClientComposite(ctx context.Context, realm string, id string, client string, params *GetClientTemplateScopeMappingsClientCompositeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientTemplateScopeMappingsClientCompositeRequest(c.Server, realm, id, client, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteClientTemplateScopeMappingsRealmWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteClientTemplateScopeMappingsRealmRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteClientTemplateScopeMappingsRealm(ctx context.Context, realm string, id string, body DeleteClientTemplateScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteClientTemplateScopeMappingsRealmRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientTemplateScopeMappingsRealm(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientTemplateScopeMappingsRealmRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientTemplateScopeMappingsRealmWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientTemplateScopeMappingsRealmRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientTemplateScopeMappingsRealm(ctx context.Context, realm string, id string, body PostClientTemplateScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientTemplateScopeMappingsRealmRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientTemplateScopeMappingsRealmAvailable(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientTemplateScopeMappingsRealmAvailableRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientTemplateScopeMappingsRealmComposite(ctx context.Context, realm string, id string, params *GetClientTemplateScopeMappingsRealmCompositeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientTemplateScopeMappingsRealmCompositeRequest(c.Server, realm, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClients(ctx context.Context, realm string, params *GetClientsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientsRequest(c.Server, realm, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientsWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientsRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClients(ctx context.Context, realm string, body PostClientsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientsRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientsInitialAccess(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientsInitialAccessRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientsInitialAccessWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientsInitialAccessRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientsInitialAccess(ctx context.Context, realm string, body PostClientsInitialAccessJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientsInitialAccessRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteClientsInitialAcces(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteClientsInitialAccesRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteClientProtocolMappersModel(ctx context.Context, realm string, id1 string, id2 string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteClientProtocolMappersModelRequest(c.Server, realm, id1, id2)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientProtocolMappersModel(ctx context.Context, realm string, id1 string, id2 string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientProtocolMappersModelRequest(c.Server, realm, id1, id2)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutClientProtocolMappersModelWithBody(ctx context.Context, realm string, id1 string, id2 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutClientProtocolMappersModelRequestWithBody(c.Server, realm, id1, id2, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutClientProtocolMappersModel(ctx context.Context, realm string, id1 string, id2 string, body PutClientProtocolMappersModelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutClientProtocolMappersModelRequest(c.Server, realm, id1, id2, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteClientByRealmById(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteClientByRealmByIdRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientByRealmById(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientByRealmByIdRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutClientWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutClientRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutClient(ctx context.Context, realm string, id string, body PutClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutClientRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCertificate(ctx context.Context, realm string, id string, attr string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCertificateRequest(c.Server, realm, id, attr)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDownloadWithBody(ctx context.Context, realm string, id string, attr string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDownloadRequestWithBody(c.Server, realm, id, attr, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDownload(ctx context.Context, realm string, id string, attr string, body PostDownloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDownloadRequest(c.Server, realm, id, attr, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGenerate(ctx context.Context, realm string, id string, attr string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGenerateRequest(c.Server, realm, id, attr)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGenerateAndDownloadWithBody(ctx context.Context, realm string, id string, attr string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGenerateAndDownloadRequestWithBody(c.Server, realm, id, attr, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGenerateAndDownload(ctx context.Context, realm string, id string, attr string, body PostGenerateAndDownloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGenerateAndDownloadRequest(c.Server, realm, id, attr, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUpload(ctx context.Context, realm string, id string, attr string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUploadRequest(c.Server, realm, id, attr)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUploadCertificate(ctx context.Context, realm string, id string, attr string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUploadCertificateRequest(c.Server, realm, id, attr)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientSecret(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientSecretRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientSecret(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientSecretRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRotated(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRotatedRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRotated(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRotatedRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDefaultClientScopes(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDefaultClientScopesRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDefaultClientScope(ctx context.Context, realm string, id string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDefaultClientScopeRequest(c.Server, realm, id, clientScopeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDefaultClientScope(ctx context.Context, realm string, id string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDefaultClientScopeRequest(c.Server, realm, id, clientScopeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGenerateExampleAccessToken(ctx context.Context, realm string, id string, params *GetGenerateExampleAccessTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGenerateExampleAccessTokenRequest(c.Server, realm, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGenerateExampleIdToken(ctx context.Context, realm string, id string, params *GetGenerateExampleIdTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGenerateExampleIdTokenRequest(c.Server, realm, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGenerateExampleUserinfo(ctx context.Context, realm string, id string, params *GetGenerateExampleUserinfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGenerateExampleUserinfoRequest(c.Server, realm, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProtocolMappers(ctx context.Context, realm string, id string, params *GetProtocolMappersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProtocolMappersRequest(c.Server, realm, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGranted(ctx context.Context, realm string, id string, roleContainerId string, params *GetGrantedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGrantedRequest(c.Server, realm, id, roleContainerId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNotGranted(ctx context.Context, realm string, id string, roleContainerId string, params *GetNotGrantedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNotGrantedRequest(c.Server, realm, id, roleContainerId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInstallationProvider(ctx context.Context, realm string, id string, providerId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInstallationProviderRequest(c.Server, realm, id, providerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientManagementPermissions(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientManagementPermissionsRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutClientManagementPermissionsWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutClientManagementPermissionsRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutClientManagementPermissions(ctx context.Context, realm string, id string, body PutClientManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutClientManagementPermissionsRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNodesWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNodesRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNodes(ctx context.Context, realm string, id string, body PostNodesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNodesRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNode(ctx context.Context, realm string, id string, node string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNodeRequest(c.Server, realm, id, node)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOfflineSessionCount(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOfflineSessionCountRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOfflineSessions(ctx context.Context, realm string, id string, params *GetOfflineSessionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOfflineSessionsRequest(c.Server, realm, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOptionalClientScopes(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOptionalClientScopesRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOptionalClientScope(ctx context.Context, realm string, id string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOptionalClientScopeRequest(c.Server, realm, id, clientScopeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOptionalClientScope(ctx context.Context, realm string, id string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOptionalClientScopeRequest(c.Server, realm, id, clientScopeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientProtocolMappersAddModelsWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientProtocolMappersAddModelsRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientProtocolMappersAddModels(ctx context.Context, realm string, id string, body PostClientProtocolMappersAddModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientProtocolMappersAddModelsRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientProtocolMappersModels(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientProtocolMappersModelsRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientProtocolMappersModelsWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientProtocolMappersModelsRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientProtocolMappersModels(ctx context.Context, realm string, id string, body PostClientProtocolMappersModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientProtocolMappersModelsRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientProtocolMappersProtocol(ctx context.Context, realm string, id string, protocol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientProtocolMappersProtocolRequest(c.Server, realm, id, protocol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientPushRevocation(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientPushRevocationRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRegistrationAccessToken(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRegistrationAccessTokenRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientRoles(ctx context.Context, realm string, id string, params *GetClientRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientRolesRequest(c.Server, realm, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientRolesWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientRolesRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientRoles(ctx context.Context, realm string, id string, body PostClientRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientRolesRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteClientRole(ctx context.Context, realm string, id string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteClientRoleRequest(c.Server, realm, id, roleName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientRole(ctx context.Context, realm string, id string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientRoleRequest(c.Server, realm, id, roleName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutClientRoleWithBody(ctx context.Context, realm string, id string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutClientRoleRequestWithBody(c.Server, realm, id, roleName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutClientRole(ctx context.Context, realm string, id string, roleName string, body PutClientRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutClientRoleRequest(c.Server, realm, id, roleName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteClientRoleCompositesWithBody(ctx context.Context, realm string, id string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteClientRoleCompositesRequestWithBody(c.Server, realm, id, roleName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteClientRoleComposites(ctx context.Context, realm string, id string, roleName string, body DeleteClientRoleCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteClientRoleCompositesRequest(c.Server, realm, id, roleName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientRoleComposites(ctx context.Context, realm string, id string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientRoleCompositesRequest(c.Server, realm, id, roleName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientRoleCompositesWithBody(ctx context.Context, realm string, id string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientRoleCompositesRequestWithBody(c.Server, realm, id, roleName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientRoleComposites(ctx context.Context, realm string, id string, roleName string, body PostClientRoleCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientRoleCompositesRequest(c.Server, realm, id, roleName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientRoleCompositesClient(ctx context.Context, realm string, id string, roleName string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientRoleCompositesClientRequest(c.Server, realm, id, roleName, clientUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientRoleCompositesRealm(ctx context.Context, realm string, id string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientRoleCompositesRealmRequest(c.Server, realm, id, roleName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientRoleGroups(ctx context.Context, realm string, id string, roleName string, params *GetClientRoleGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientRoleGroupsRequest(c.Server, realm, id, roleName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientRoleManagementPermissions(ctx context.Context, realm string, id string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientRoleManagementPermissionsRequest(c.Server, realm, id, roleName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutClientRoleManagementPermissionsWithBody(ctx context.Context, realm string, id string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutClientRoleManagementPermissionsRequestWithBody(c.Server, realm, id, roleName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutClientRoleManagementPermissions(ctx context.Context, realm string, id string, roleName string, body PutClientRoleManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutClientRoleManagementPermissionsRequest(c.Server, realm, id, roleName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientRoleUsers(ctx context.Context, realm string, id string, roleName string, params *GetClientRoleUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientRoleUsersRequest(c.Server, realm, id, roleName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientScopeMappings(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientScopeMappingsRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteClientScopeMappingsClientWithBody(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteClientScopeMappingsClientRequestWithBody(c.Server, realm, id, client, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteClientScopeMappingsClient(ctx context.Context, realm string, id string, client string, body DeleteClientScopeMappingsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteClientScopeMappingsClientRequest(c.Server, realm, id, client, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientScopeMappingsClient(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientScopeMappingsClientRequest(c.Server, realm, id, client)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientScopeMappingsClientWithBody(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientScopeMappingsClientRequestWithBody(c.Server, realm, id, client, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientScopeMappingsClient(ctx context.Context, realm string, id string, client string, body PostClientScopeMappingsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientScopeMappingsClientRequest(c.Server, realm, id, client, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientScopeMappingsClientAvailable(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientScopeMappingsClientAvailableRequest(c.Server, realm, id, client)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientScopeMappingsClientComposite(ctx context.Context, realm string, id string, client string, params *GetClientScopeMappingsClientCompositeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientScopeMappingsClientCompositeRequest(c.Server, realm, id, client, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteClientScopeMappingsRealmWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteClientScopeMappingsRealmRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteClientScopeMappingsRealm(ctx context.Context, realm string, id string, body DeleteClientScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteClientScopeMappingsRealmRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientScopeMappingsRealm(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientScopeMappingsRealmRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientScopeMappingsRealmWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientScopeMappingsRealmRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientScopeMappingsRealm(ctx context.Context, realm string, id string, body PostClientScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientScopeMappingsRealmRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientScopeMappingsRealmAvailable(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientScopeMappingsRealmAvailableRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientScopeMappingsRealmComposite(ctx context.Context, realm string, id string, params *GetClientScopeMappingsRealmCompositeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientScopeMappingsRealmCompositeRequest(c.Server, realm, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceAccountUser(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceAccountUserRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSessionCount(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSessionCountRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTestNodesAvailable(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTestNodesAvailableRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientUserSessions(ctx context.Context, realm string, id string, params *GetClientUserSessionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientUserSessionsRequest(c.Server, realm, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetComponents(ctx context.Context, realm string, params *GetComponentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetComponentsRequest(c.Server, realm, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostComponentsWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostComponentsRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostComponents(ctx context.Context, realm string, body PostComponentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostComponentsRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteComponent(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteComponentRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetComponent(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetComponentRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutComponentWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutComponentRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutComponent(ctx context.Context, realm string, id string, body PutComponentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutComponentRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSubComponentTypes(ctx context.Context, realm string, id string, params *GetSubComponentTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSubComponentTypesRequest(c.Server, realm, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCredentialRegistrators(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCredentialRegistratorsRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDefaultDefaultClientScopes(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDefaultDefaultClientScopesRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDefaultDefaultClientScope(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDefaultDefaultClientScopeRequest(c.Server, realm, clientScopeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDefaultDefaultClientScope(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDefaultDefaultClientScopeRequest(c.Server, realm, clientScopeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDefaultGroups(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDefaultGroupsRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDefaultGroup(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDefaultGroupRequest(c.Server, realm, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDefaultGroup(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDefaultGroupRequest(c.Server, realm, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDefaultOptionalClientScopes(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDefaultOptionalClientScopesRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDefaultOptionalClientScope(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDefaultOptionalClientScopeRequest(c.Server, realm, clientScopeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDefaultOptionalClientScope(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDefaultOptionalClientScopeRequest(c.Server, realm, clientScopeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEvents(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEventsRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEvents(ctx context.Context, realm string, params *GetEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEventsRequest(c.Server, realm, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEventsConfig(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEventsConfigRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutEventsConfigWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutEventsConfigRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutEventsConfig(ctx context.Context, realm string, body PutEventsConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutEventsConfigRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGroupByPath(ctx context.Context, realm string, path string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupByPathRequest(c.Server, realm, path)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGroupsByRealm(ctx context.Context, realm string, params *GetGroupsByRealmParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupsByRealmRequest(c.Server, realm, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGroupsWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupsRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGroups(ctx context.Context, realm string, body PostGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupsRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGroupsCountByRealm(ctx context.Context, realm string, params *GetGroupsCountByRealmParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupsCountByRealmRequest(c.Server, realm, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGroupByRealmById(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGroupByRealmByIdRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGroup(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutGroupByRealmByIdWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutGroupByRealmByIdRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutGroupByRealmById(ctx context.Context, realm string, id string, body PutGroupByRealmByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutGroupByRealmByIdRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChildrenWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChildrenRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChildren(ctx context.Context, realm string, id string, body PostChildrenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChildrenRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGroupManagementPermissions(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupManagementPermissionsRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutGroupManagementPermissionsWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutGroupManagementPermissionsRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutGroupManagementPermissions(ctx context.Context, realm string, id string, body PutGroupManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutGroupManagementPermissionsRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMembers(ctx context.Context, realm string, id string, params *GetMembersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMembersRequest(c.Server, realm, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGroupRoleMappings(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupRoleMappingsRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGroupRoleMappingsClientWithBody(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGroupRoleMappingsClientRequestWithBody(c.Server, realm, id, client, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGroupRoleMappingsClient(ctx context.Context, realm string, id string, client string, body DeleteGroupRoleMappingsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGroupRoleMappingsClientRequest(c.Server, realm, id, client, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGroupRoleMappingsClient(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupRoleMappingsClientRequest(c.Server, realm, id, client)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGroupRoleMappingsClientWithBody(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupRoleMappingsClientRequestWithBody(c.Server, realm, id, client, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGroupRoleMappingsClient(ctx context.Context, realm string, id string, client string, body PostGroupRoleMappingsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupRoleMappingsClientRequest(c.Server, realm, id, client, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGroupRoleMappingsClientAvailable(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupRoleMappingsClientAvailableRequest(c.Server, realm, id, client)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGroupRoleMappingsClientComposite(ctx context.Context, realm string, id string, client string, params *GetGroupRoleMappingsClientCompositeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupRoleMappingsClientCompositeRequest(c.Server, realm, id, client, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGroupRoleMappingsRealmWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGroupRoleMappingsRealmRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGroupRoleMappingsRealm(ctx context.Context, realm string, id string, body DeleteGroupRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGroupRoleMappingsRealmRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGroupRoleMappingsRealm(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupRoleMappingsRealmRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGroupRoleMappingsRealmWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupRoleMappingsRealmRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGroupRoleMappingsRealm(ctx context.Context, realm string, id string, body PostGroupRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupRoleMappingsRealmRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGroupRoleMappingsRealmAvailable(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupRoleMappingsRealmAvailableRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGroupRoleMappingsRealmComposite(ctx context.Context, realm string, id string, params *GetGroupRoleMappingsRealmCompositeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupRoleMappingsRealmCompositeRequest(c.Server, realm, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostImportConfigWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostImportConfigRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostImportConfig(ctx context.Context, realm string, body PostImportConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostImportConfigRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInstances(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInstancesRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInstancesWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInstancesRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInstances(ctx context.Context, realm string, body PostInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInstancesRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteInstance(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteInstanceRequest(c.Server, realm, alias)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInstance(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInstanceRequest(c.Server, realm, alias)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutInstanceWithBody(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutInstanceRequestWithBody(c.Server, realm, alias, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutInstance(ctx context.Context, realm string, alias string, body PutInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutInstanceRequest(c.Server, realm, alias, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetExport(ctx context.Context, realm string, alias string, params *GetExportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetExportRequest(c.Server, realm, alias, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInstanceManagementPermissions(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInstanceManagementPermissionsRequest(c.Server, realm, alias)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutInstanceManagementPermissionsWithBody(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutInstanceManagementPermissionsRequestWithBody(c.Server, realm, alias, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutInstanceManagementPermissions(ctx context.Context, realm string, alias string, body PutInstanceManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutInstanceManagementPermissionsRequest(c.Server, realm, alias, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMapperTypes(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMapperTypesRequest(c.Server, realm, alias)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMappers(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMappersRequest(c.Server, realm, alias)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMappersWithBody(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMappersRequestWithBody(c.Server, realm, alias, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMappers(ctx context.Context, realm string, alias string, body PostMappersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMappersRequest(c.Server, realm, alias, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMapper(ctx context.Context, realm string, alias string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMapperRequest(c.Server, realm, alias, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMapper(ctx context.Context, realm string, alias string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMapperRequest(c.Server, realm, alias, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutMapperWithBody(ctx context.Context, realm string, alias string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutMapperRequestWithBody(c.Server, realm, alias, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutMapper(ctx context.Context, realm string, alias string, id string, body PutMapperJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutMapperRequest(c.Server, realm, alias, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdentityProviderProvider(ctx context.Context, realm string, providerId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdentityProviderProviderRequest(c.Server, realm, providerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKeys(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKeysRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLocalizationByRealm(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLocalizationByRealmRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteLocalizationByRealmByLocale(ctx context.Context, realm string, locale string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteLocalizationByRealmByLocaleRequest(c.Server, realm, locale)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLocalizationByRealmByLocale(ctx context.Context, realm string, locale string, params *GetLocalizationByRealmByLocaleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLocalizationByRealmByLocaleRequest(c.Server, realm, locale, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLocalizationWithBody(ctx context.Context, realm string, locale string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLocalizationRequestWithBody(c.Server, realm, locale, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLocalization(ctx context.Context, realm string, locale string, body PostLocalizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLocalizationRequest(c.Server, realm, locale, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteLocalizationByRealmByLocaleByKey(ctx context.Context, realm string, locale string, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteLocalizationByRealmByLocaleByKeyRequest(c.Server, realm, locale, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLocalizationByRealmByLocaleByKey(ctx context.Context, realm string, locale string, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLocalizationByRealmByLocaleByKeyRequest(c.Server, realm, locale, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLocalizationWithBody(ctx context.Context, realm string, locale string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLocalizationRequestWithBody(c.Server, realm, locale, key, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLocalization(ctx context.Context, realm string, locale string, key string, body PutLocalizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLocalizationRequest(c.Server, realm, locale, key, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLogoutAll(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLogoutAllRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPartialExport(ctx context.Context, realm string, params *PostPartialExportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPartialExportRequest(c.Server, realm, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPartialImportWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPartialImportRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPartialImport(ctx context.Context, realm string, body PostPartialImportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPartialImportRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPushRevocationByRealm(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPushRevocationByRealmRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRolesByRealm(ctx context.Context, realm string, params *GetRolesByRealmParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRolesByRealmRequest(c.Server, realm, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRolesByRealmWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRolesByRealmRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRolesByRealm(ctx context.Context, realm string, body PostRolesByRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRolesByRealmRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRolesById(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRolesByIdRequest(c.Server, realm, roleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRolesById(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRolesByIdRequest(c.Server, realm, roleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRolesByIdWithBody(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRolesByIdRequestWithBody(c.Server, realm, roleId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRolesById(ctx context.Context, realm string, roleId string, body PutRolesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRolesByIdRequest(c.Server, realm, roleId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRolesByIdCompositesWithBody(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRolesByIdCompositesRequestWithBody(c.Server, realm, roleId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRolesByIdComposites(ctx context.Context, realm string, roleId string, body DeleteRolesByIdCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRolesByIdCompositesRequest(c.Server, realm, roleId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRolesByIdComposites(ctx context.Context, realm string, roleId string, params *GetRolesByIdCompositesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRolesByIdCompositesRequest(c.Server, realm, roleId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRolesByIdCompositesWithBody(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRolesByIdCompositesRequestWithBody(c.Server, realm, roleId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRolesByIdComposites(ctx context.Context, realm string, roleId string, body PostRolesByIdCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRolesByIdCompositesRequest(c.Server, realm, roleId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRolesByIdCompositesClient(ctx context.Context, realm string, roleId string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRolesByIdCompositesClientRequest(c.Server, realm, roleId, clientUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRolesByIdCompositesRealm(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRolesByIdCompositesRealmRequest(c.Server, realm, roleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRolesByIdManagementPermissions(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRolesByIdManagementPermissionsRequest(c.Server, realm, roleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRolesByIdManagementPermissionsWithBody(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRolesByIdManagementPermissionsRequestWithBody(c.Server, realm, roleId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRolesByIdManagementPermissions(ctx context.Context, realm string, roleId string, body PutRolesByIdManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRolesByIdManagementPermissionsRequest(c.Server, realm, roleId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRoleByRealmByRoleName(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRoleByRealmByRoleNameRequest(c.Server, realm, roleName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRoleByRealmByRoleName(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRoleByRealmByRoleNameRequest(c.Server, realm, roleName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRoleByRealmByRoleNameWithBody(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRoleByRealmByRoleNameRequestWithBody(c.Server, realm, roleName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRoleByRealmByRoleName(ctx context.Context, realm string, roleName string, body PutRoleByRealmByRoleNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRoleByRealmByRoleNameRequest(c.Server, realm, roleName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRoleCompositesByRealmByRoleNameWithBody(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRoleCompositesByRealmByRoleNameRequestWithBody(c.Server, realm, roleName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRoleCompositesByRealmByRoleName(ctx context.Context, realm string, roleName string, body DeleteRoleCompositesByRealmByRoleNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRoleCompositesByRealmByRoleNameRequest(c.Server, realm, roleName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRoleCompositesByRealmByRoleName(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRoleCompositesByRealmByRoleNameRequest(c.Server, realm, roleName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRoleCompositesByRealmByRoleNameWithBody(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRoleCompositesByRealmByRoleNameRequestWithBody(c.Server, realm, roleName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRoleCompositesByRealmByRoleName(ctx context.Context, realm string, roleName string, body PostRoleCompositesByRealmByRoleNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRoleCompositesByRealmByRoleNameRequest(c.Server, realm, roleName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRoleCompositesClientByRealmByRoleNameByClientUuid(ctx context.Context, realm string, roleName string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRoleCompositesClientByRealmByRoleNameByClientUuidRequest(c.Server, realm, roleName, clientUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRoleCompositesRealmByRealmByRoleName(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRoleCompositesRealmByRealmByRoleNameRequest(c.Server, realm, roleName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRoleGroupsByRealmByRoleName(ctx context.Context, realm string, roleName string, params *GetRoleGroupsByRealmByRoleNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRoleGroupsByRealmByRoleNameRequest(c.Server, realm, roleName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRoleManagementPermissionsByRealmByRoleName(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRoleManagementPermissionsByRealmByRoleNameRequest(c.Server, realm, roleName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRoleManagementPermissionsByRealmByRoleNameWithBody(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRoleManagementPermissionsByRealmByRoleNameRequestWithBody(c.Server, realm, roleName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRoleManagementPermissionsByRealmByRoleName(ctx context.Context, realm string, roleName string, body PutRoleManagementPermissionsByRealmByRoleNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRoleManagementPermissionsByRealmByRoleNameRequest(c.Server, realm, roleName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRoleUsersByRealmByRoleName(ctx context.Context, realm string, roleName string, params *GetRoleUsersByRealmByRoleNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRoleUsersByRealmByRoleNameRequest(c.Server, realm, roleName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSession(ctx context.Context, realm string, session string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSessionRequest(c.Server, realm, session)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTestSmtpConnectionWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTestSmtpConnectionRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTestSmtpConnection(ctx context.Context, realm string, body PostTestSmtpConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTestSmtpConnectionRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersByRealm(ctx context.Context, realm string, params *GetUsersByRealmParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersByRealmRequest(c.Server, realm, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsers(ctx context.Context, realm string, body PostUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersManagementPermissions(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersManagementPermissionsRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUsersManagementPermissionsWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUsersManagementPermissionsRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUsersManagementPermissions(ctx context.Context, realm string, body PutUsersManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUsersManagementPermissionsRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersCount(ctx context.Context, realm string, params *GetUsersCountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersCountRequest(c.Server, realm, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProfile(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProfileRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutProfileWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutProfileRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutProfile(ctx context.Context, realm string, body PutProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutProfileRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserByRealmById(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserByRealmByIdRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserByRealmById(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserByRealmByIdRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUserWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUserRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUser(ctx context.Context, realm string, id string, body PutUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUserRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConfiguredUserStorageCredentialTypes(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConfiguredUserStorageCredentialTypesRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsents(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsentsRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConsent(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConsentRequest(c.Server, realm, id, client)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCredentials(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCredentialsRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCredential(ctx context.Context, realm string, id string, credentialId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCredentialRequest(c.Server, realm, id, credentialId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMoveAfter(ctx context.Context, realm string, id string, credentialId string, newPreviousCredentialId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMoveAfterRequest(c.Server, realm, id, credentialId, newPreviousCredentialId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMoveToFirst(ctx context.Context, realm string, id string, credentialId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMoveToFirstRequest(c.Server, realm, id, credentialId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUserLabelWithBody(ctx context.Context, realm string, id string, credentialId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUserLabelRequestWithBody(c.Server, realm, id, credentialId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUserLabel(ctx context.Context, realm string, id string, credentialId string, body PutUserLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUserLabelRequest(c.Server, realm, id, credentialId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDisableCredentialTypesWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDisableCredentialTypesRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDisableCredentialTypes(ctx context.Context, realm string, id string, body PutDisableCredentialTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDisableCredentialTypesRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutExecuteActionsEmailWithBody(ctx context.Context, realm string, id string, params *PutExecuteActionsEmailParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutExecuteActionsEmailRequestWithBody(c.Server, realm, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutExecuteActionsEmail(ctx context.Context, realm string, id string, params *PutExecuteActionsEmailParams, body PutExecuteActionsEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutExecuteActionsEmailRequest(c.Server, realm, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFederatedIdentity(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFederatedIdentityRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFederatedIdentity(ctx context.Context, realm string, id string, provider string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFederatedIdentityRequest(c.Server, realm, id, provider)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFederatedIdentity(ctx context.Context, realm string, id string, provider string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFederatedIdentityRequest(c.Server, realm, id, provider)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserGroups(ctx context.Context, realm string, id string, params *GetUserGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserGroupsRequest(c.Server, realm, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserGroupsCount(ctx context.Context, realm string, id string, params *GetUserGroupsCountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserGroupsCountRequest(c.Server, realm, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserGroup(ctx context.Context, realm string, id string, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserGroupRequest(c.Server, realm, id, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUserGroup(ctx context.Context, realm string, id string, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUserGroupRequest(c.Server, realm, id, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostImpersonation(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostImpersonationRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLogout(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLogoutRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOfflineSession(ctx context.Context, realm string, id string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOfflineSessionRequest(c.Server, realm, id, clientUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutResetPasswordWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutResetPasswordRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutResetPassword(ctx context.Context, realm string, id string, body PutResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutResetPasswordRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutResetPasswordEmail(ctx context.Context, realm string, id string, params *PutResetPasswordEmailParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutResetPasswordEmailRequest(c.Server, realm, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserRoleMappings(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRoleMappingsRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserRoleMappingsClientWithBody(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserRoleMappingsClientRequestWithBody(c.Server, realm, id, client, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserRoleMappingsClient(ctx context.Context, realm string, id string, client string, body DeleteUserRoleMappingsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserRoleMappingsClientRequest(c.Server, realm, id, client, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserRoleMappingsClient(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRoleMappingsClientRequest(c.Server, realm, id, client)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserRoleMappingsClientWithBody(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserRoleMappingsClientRequestWithBody(c.Server, realm, id, client, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserRoleMappingsClient(ctx context.Context, realm string, id string, client string, body PostUserRoleMappingsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserRoleMappingsClientRequest(c.Server, realm, id, client, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserRoleMappingsClientAvailable(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRoleMappingsClientAvailableRequest(c.Server, realm, id, client)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserRoleMappingsClientComposite(ctx context.Context, realm string, id string, client string, params *GetUserRoleMappingsClientCompositeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRoleMappingsClientCompositeRequest(c.Server, realm, id, client, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserRoleMappingsRealmWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserRoleMappingsRealmRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserRoleMappingsRealm(ctx context.Context, realm string, id string, body DeleteUserRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserRoleMappingsRealmRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserRoleMappingsRealm(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRoleMappingsRealmRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserRoleMappingsRealmWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserRoleMappingsRealmRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserRoleMappingsRealm(ctx context.Context, realm string, id string, body PostUserRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserRoleMappingsRealmRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserRoleMappingsRealmAvailable(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRoleMappingsRealmAvailableRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserRoleMappingsRealmComposite(ctx context.Context, realm string, id string, params *GetUserRoleMappingsRealmCompositeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRoleMappingsRealmCompositeRequest(c.Server, realm, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSendVerifyEmail(ctx context.Context, realm string, id string, params *PutSendVerifyEmailParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSendVerifyEmailRequest(c.Server, realm, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSessions(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSessionsRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRequest generates requests for Get
func NewGetRequest(server string, params *GetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRequest calls the generic Post builder with application/json body
func NewPostRequest(server string, body PostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRequestWithBody(server, "application/json", bodyReader)
}

// NewPostRequestWithBody generates requests for Post with any type of body
func NewPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteByRealmRequest generates requests for DeleteByRealm
func NewDeleteByRealmRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetByRealmRequest generates requests for GetByRealm
func NewGetByRealmRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutByRealmRequest calls the generic PutByRealm builder with application/json body
func NewPutByRealmRequest(server string, realm string, body PutByRealmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutByRealmRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPutByRealmRequestWithBody generates requests for PutByRealm with any type of body
func NewPutByRealmRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAdminEventsRequest generates requests for DeleteAdminEvents
func NewDeleteAdminEventsRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/admin-events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminEventsRequest generates requests for GetAdminEvents
func NewGetAdminEventsRequest(server string, realm string, params *GetAdminEventsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/admin-events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AuthClient != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "authClient", runtime.ParamLocationQuery, *params.AuthClient); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AuthIpAddress != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "authIpAddress", runtime.ParamLocationQuery, *params.AuthIpAddress); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AuthRealm != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "authRealm", runtime.ParamLocationQuery, *params.AuthRealm); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AuthUser != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "authUser", runtime.ParamLocationQuery, *params.AuthUser); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DateFrom != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateFrom", runtime.ParamLocationQuery, *params.DateFrom); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DateTo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateTo", runtime.ParamLocationQuery, *params.DateTo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OperationTypes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "operationTypes", runtime.ParamLocationQuery, *params.OperationTypes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ResourcePath != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resourcePath", runtime.ParamLocationQuery, *params.ResourcePath); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ResourceTypes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resourceTypes", runtime.ParamLocationQuery, *params.ResourceTypes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteUsersRequest generates requests for DeleteUsers
func NewDeleteUsersRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/attack-detection/brute-force/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteBruteForceUserRequest generates requests for DeleteBruteForceUser
func NewDeleteBruteForceUserRequest(server string, realm string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/attack-detection/brute-force/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBruteForceUserRequest generates requests for GetBruteForceUser
func NewGetBruteForceUserRequest(server string, realm string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/attack-detection/brute-force/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAuthenticatorProvidersRequest generates requests for GetAuthenticatorProviders
func NewGetAuthenticatorProvidersRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/authenticator-providers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClientAuthenticatorProvidersRequest generates requests for GetClientAuthenticatorProviders
func NewGetClientAuthenticatorProvidersRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/client-authenticator-providers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAuthenticationConfigRequest calls the generic PostAuthenticationConfig builder with application/json body
func NewPostAuthenticationConfigRequest(server string, realm string, body PostAuthenticationConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthenticationConfigRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostAuthenticationConfigRequestWithBody generates requests for PostAuthenticationConfig with any type of body
func NewPostAuthenticationConfigRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/config", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetConfigDescriptionRequest generates requests for GetConfigDescription
func NewGetConfigDescriptionRequest(server string, realm string, providerId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "providerId", runtime.ParamLocationPath, providerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/config-description/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteConfigRequest generates requests for DeleteConfig
func NewDeleteConfigRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/config/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAuthenticationConfigRequest generates requests for GetAuthenticationConfig
func NewGetAuthenticationConfigRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/config/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAuthenticationConfigRequest calls the generic PutAuthenticationConfig builder with application/json body
func NewPutAuthenticationConfigRequest(server string, realm string, id string, body PutAuthenticationConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAuthenticationConfigRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPutAuthenticationConfigRequestWithBody generates requests for PutAuthenticationConfig with any type of body
func NewPutAuthenticationConfigRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/config/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostExecutionsRequest calls the generic PostExecutions builder with application/json body
func NewPostExecutionsRequest(server string, realm string, body PostExecutionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostExecutionsRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostExecutionsRequestWithBody generates requests for PostExecutions with any type of body
func NewPostExecutionsRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/executions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteExecutionRequest generates requests for DeleteExecution
func NewDeleteExecutionRequest(server string, realm string, executionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "executionId", runtime.ParamLocationPath, executionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/executions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetExecutionRequest generates requests for GetExecution
func NewGetExecutionRequest(server string, realm string, executionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "executionId", runtime.ParamLocationPath, executionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/executions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostExecutionConfigRequest calls the generic PostExecutionConfig builder with application/json body
func NewPostExecutionConfigRequest(server string, realm string, executionId string, body PostExecutionConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostExecutionConfigRequestWithBody(server, realm, executionId, "application/json", bodyReader)
}

// NewPostExecutionConfigRequestWithBody generates requests for PostExecutionConfig with any type of body
func NewPostExecutionConfigRequestWithBody(server string, realm string, executionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "executionId", runtime.ParamLocationPath, executionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/executions/%s/config", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetExecutionConfigRequest generates requests for GetExecutionConfig
func NewGetExecutionConfigRequest(server string, realm string, executionId string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "executionId", runtime.ParamLocationPath, executionId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/executions/%s/config/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostExecutionLowerPriorityRequest generates requests for PostExecutionLowerPriority
func NewPostExecutionLowerPriorityRequest(server string, realm string, executionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "executionId", runtime.ParamLocationPath, executionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/executions/%s/lower-priority", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostExecutionRaisePriorityRequest generates requests for PostExecutionRaisePriority
func NewPostExecutionRaisePriorityRequest(server string, realm string, executionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "executionId", runtime.ParamLocationPath, executionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/executions/%s/raise-priority", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFlowsRequest generates requests for GetFlows
func NewGetFlowsRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/flows", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostFlowsRequest calls the generic PostFlows builder with application/json body
func NewPostFlowsRequest(server string, realm string, body PostFlowsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFlowsRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostFlowsRequestWithBody generates requests for PostFlows with any type of body
func NewPostFlowsRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/flows", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCopyRequest calls the generic PostCopy builder with application/json body
func NewPostCopyRequest(server string, realm string, flowAlias string, body PostCopyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCopyRequestWithBody(server, realm, flowAlias, "application/json", bodyReader)
}

// NewPostCopyRequestWithBody generates requests for PostCopy with any type of body
func NewPostCopyRequestWithBody(server string, realm string, flowAlias string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "flowAlias", runtime.ParamLocationPath, flowAlias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/flows/%s/copy", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetExecutionsRequest generates requests for GetExecutions
func NewGetExecutionsRequest(server string, realm string, flowAlias string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "flowAlias", runtime.ParamLocationPath, flowAlias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/flows/%s/executions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutExecutionsRequest calls the generic PutExecutions builder with application/json body
func NewPutExecutionsRequest(server string, realm string, flowAlias string, body PutExecutionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutExecutionsRequestWithBody(server, realm, flowAlias, "application/json", bodyReader)
}

// NewPutExecutionsRequestWithBody generates requests for PutExecutions with any type of body
func NewPutExecutionsRequestWithBody(server string, realm string, flowAlias string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "flowAlias", runtime.ParamLocationPath, flowAlias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/flows/%s/executions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostExecutionRequest calls the generic PostExecution builder with application/json body
func NewPostExecutionRequest(server string, realm string, flowAlias string, body PostExecutionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostExecutionRequestWithBody(server, realm, flowAlias, "application/json", bodyReader)
}

// NewPostExecutionRequestWithBody generates requests for PostExecution with any type of body
func NewPostExecutionRequestWithBody(server string, realm string, flowAlias string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "flowAlias", runtime.ParamLocationPath, flowAlias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/flows/%s/executions/execution", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostFlowRequest calls the generic PostFlow builder with application/json body
func NewPostFlowRequest(server string, realm string, flowAlias string, body PostFlowJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFlowRequestWithBody(server, realm, flowAlias, "application/json", bodyReader)
}

// NewPostFlowRequestWithBody generates requests for PostFlow with any type of body
func NewPostFlowRequestWithBody(server string, realm string, flowAlias string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "flowAlias", runtime.ParamLocationPath, flowAlias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/flows/%s/executions/flow", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFlowRequest generates requests for DeleteFlow
func NewDeleteFlowRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/flows/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFlowRequest generates requests for GetFlow
func NewGetFlowRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/flows/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutFlowRequest calls the generic PutFlow builder with application/json body
func NewPutFlowRequest(server string, realm string, id string, body PutFlowJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutFlowRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPutFlowRequestWithBody generates requests for PutFlow with any type of body
func NewPutFlowRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/flows/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetFormActionProvidersRequest generates requests for GetFormActionProviders
func NewGetFormActionProvidersRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/form-action-providers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFormProvidersRequest generates requests for GetFormProviders
func NewGetFormProvidersRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/form-providers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPerClientConfigDescriptionRequest generates requests for GetPerClientConfigDescription
func NewGetPerClientConfigDescriptionRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/per-client-config-description", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRegisterRequiredActionRequest calls the generic PostRegisterRequiredAction builder with application/json body
func NewPostRegisterRequiredActionRequest(server string, realm string, body PostRegisterRequiredActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRegisterRequiredActionRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostRegisterRequiredActionRequestWithBody generates requests for PostRegisterRequiredAction with any type of body
func NewPostRegisterRequiredActionRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/register-required-action", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRequiredActionsRequest generates requests for GetRequiredActions
func NewGetRequiredActionsRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/required-actions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRequiredActionRequest generates requests for DeleteRequiredAction
func NewDeleteRequiredActionRequest(server string, realm string, alias string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/required-actions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRequiredActionRequest generates requests for GetRequiredAction
func NewGetRequiredActionRequest(server string, realm string, alias string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/required-actions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRequiredActionRequest calls the generic PutRequiredAction builder with application/json body
func NewPutRequiredActionRequest(server string, realm string, alias string, body PutRequiredActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRequiredActionRequestWithBody(server, realm, alias, "application/json", bodyReader)
}

// NewPutRequiredActionRequestWithBody generates requests for PutRequiredAction with any type of body
func NewPutRequiredActionRequestWithBody(server string, realm string, alias string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/required-actions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostRequiredActionLowerPriorityRequest generates requests for PostRequiredActionLowerPriority
func NewPostRequiredActionLowerPriorityRequest(server string, realm string, alias string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/required-actions/%s/lower-priority", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRequiredActionRaisePriorityRequest generates requests for PostRequiredActionRaisePriority
func NewPostRequiredActionRaisePriorityRequest(server string, realm string, alias string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/required-actions/%s/raise-priority", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUnregisteredRequiredActionsRequest generates requests for GetUnregisteredRequiredActions
func NewGetUnregisteredRequiredActionsRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/unregistered-required-actions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostClientDescriptionConverterRequest calls the generic PostClientDescriptionConverter builder with application/json body
func NewPostClientDescriptionConverterRequest(server string, realm string, body PostClientDescriptionConverterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostClientDescriptionConverterRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostClientDescriptionConverterRequestWithBody generates requests for PostClientDescriptionConverter with any type of body
func NewPostClientDescriptionConverterRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-description-converter", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPoliciesRequest generates requests for GetPolicies
func NewGetPoliciesRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-policies/policies", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPoliciesRequest calls the generic PutPolicies builder with application/json body
func NewPutPoliciesRequest(server string, realm string, body PutPoliciesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPoliciesRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPutPoliciesRequestWithBody generates requests for PutPolicies with any type of body
func NewPutPoliciesRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-policies/policies", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProfilesRequest generates requests for GetProfiles
func NewGetProfilesRequest(server string, realm string, params *GetProfilesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-policies/profiles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeGlobalProfiles != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include-global-profiles", runtime.ParamLocationQuery, *params.IncludeGlobalProfiles); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutProfilesRequest calls the generic PutProfiles builder with application/json body
func NewPutProfilesRequest(server string, realm string, body PutProfilesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutProfilesRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPutProfilesRequestWithBody generates requests for PutProfiles with any type of body
func NewPutProfilesRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-policies/profiles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProvidersRequest generates requests for GetProviders
func NewGetProvidersRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-registration-policy/providers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClientScopesRequest generates requests for GetClientScopes
func NewGetClientScopesRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-scopes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostClientScopesRequest calls the generic PostClientScopes builder with application/json body
func NewPostClientScopesRequest(server string, realm string, body PostClientScopesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostClientScopesRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostClientScopesRequestWithBody generates requests for PostClientScopes with any type of body
func NewPostClientScopesRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-scopes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteClientScopeProtocolMappersModelRequest generates requests for DeleteClientScopeProtocolMappersModel
func NewDeleteClientScopeProtocolMappersModelRequest(server string, realm string, id1 string, id2 string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id1", runtime.ParamLocationPath, id1)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id2", runtime.ParamLocationPath, id2)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-scopes/%s/protocol-mappers/models/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClientScopeProtocolMappersModelRequest generates requests for GetClientScopeProtocolMappersModel
func NewGetClientScopeProtocolMappersModelRequest(server string, realm string, id1 string, id2 string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id1", runtime.ParamLocationPath, id1)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id2", runtime.ParamLocationPath, id2)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-scopes/%s/protocol-mappers/models/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutClientScopeProtocolMappersModelRequest calls the generic PutClientScopeProtocolMappersModel builder with application/json body
func NewPutClientScopeProtocolMappersModelRequest(server string, realm string, id1 string, id2 string, body PutClientScopeProtocolMappersModelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutClientScopeProtocolMappersModelRequestWithBody(server, realm, id1, id2, "application/json", bodyReader)
}

// NewPutClientScopeProtocolMappersModelRequestWithBody generates requests for PutClientScopeProtocolMappersModel with any type of body
func NewPutClientScopeProtocolMappersModelRequestWithBody(server string, realm string, id1 string, id2 string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id1", runtime.ParamLocationPath, id1)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id2", runtime.ParamLocationPath, id2)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-scopes/%s/protocol-mappers/models/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteClientScopeRequest generates requests for DeleteClientScope
func NewDeleteClientScopeRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-scopes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClientScopeRequest generates requests for GetClientScope
func NewGetClientScopeRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-scopes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutClientScopeRequest calls the generic PutClientScope builder with application/json body
func NewPutClientScopeRequest(server string, realm string, id string, body PutClientScopeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutClientScopeRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPutClientScopeRequestWithBody generates requests for PutClientScope with any type of body
func NewPutClientScopeRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-scopes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostClientScopeProtocolMappersAddModelsRequest calls the generic PostClientScopeProtocolMappersAddModels builder with application/json body
func NewPostClientScopeProtocolMappersAddModelsRequest(server string, realm string, id string, body PostClientScopeProtocolMappersAddModelsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostClientScopeProtocolMappersAddModelsRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPostClientScopeProtocolMappersAddModelsRequestWithBody generates requests for PostClientScopeProtocolMappersAddModels with any type of body
func NewPostClientScopeProtocolMappersAddModelsRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-scopes/%s/protocol-mappers/add-models", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetClientScopeProtocolMappersModelsRequest generates requests for GetClientScopeProtocolMappersModels
func NewGetClientScopeProtocolMappersModelsRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-scopes/%s/protocol-mappers/models", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostClientScopeProtocolMappersModelsRequest calls the generic PostClientScopeProtocolMappersModels builder with application/json body
func NewPostClientScopeProtocolMappersModelsRequest(server string, realm string, id string, body PostClientScopeProtocolMappersModelsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostClientScopeProtocolMappersModelsRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPostClientScopeProtocolMappersModelsRequestWithBody generates requests for PostClientScopeProtocolMappersModels with any type of body
func NewPostClientScopeProtocolMappersModelsRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-scopes/%s/protocol-mappers/models", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetClientScopeProtocolMappersProtocolRequest generates requests for GetClientScopeProtocolMappersProtocol
func NewGetClientScopeProtocolMappersProtocolRequest(server string, realm string, id string, protocol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "protocol", runtime.ParamLocationPath, protocol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-scopes/%s/protocol-mappers/protocol/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClientScopeScopeMappingsRequest generates requests for GetClientScopeScopeMappings
func NewGetClientScopeScopeMappingsRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-scopes/%s/scope-mappings", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteClientScopeScopeMappingsClientRequest calls the generic DeleteClientScopeScopeMappingsClient builder with application/json body
func NewDeleteClientScopeScopeMappingsClientRequest(server string, realm string, id string, client string, body DeleteClientScopeScopeMappingsClientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteClientScopeScopeMappingsClientRequestWithBody(server, realm, id, client, "application/json", bodyReader)
}

// NewDeleteClientScopeScopeMappingsClientRequestWithBody generates requests for DeleteClientScopeScopeMappingsClient with any type of body
func NewDeleteClientScopeScopeMappingsClientRequestWithBody(server string, realm string, id string, client string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-scopes/%s/scope-mappings/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetClientScopeScopeMappingsClientRequest generates requests for GetClientScopeScopeMappingsClient
func NewGetClientScopeScopeMappingsClientRequest(server string, realm string, id string, client string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-scopes/%s/scope-mappings/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostClientScopeScopeMappingsClientRequest calls the generic PostClientScopeScopeMappingsClient builder with application/json body
func NewPostClientScopeScopeMappingsClientRequest(server string, realm string, id string, client string, body PostClientScopeScopeMappingsClientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostClientScopeScopeMappingsClientRequestWithBody(server, realm, id, client, "application/json", bodyReader)
}

// NewPostClientScopeScopeMappingsClientRequestWithBody generates requests for PostClientScopeScopeMappingsClient with any type of body
func NewPostClientScopeScopeMappingsClientRequestWithBody(server string, realm string, id string, client string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-scopes/%s/scope-mappings/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetClientScopeScopeMappingsClientAvailableRequest generates requests for GetClientScopeScopeMappingsClientAvailable
func NewGetClientScopeScopeMappingsClientAvailableRequest(server string, realm string, id string, client string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-scopes/%s/scope-mappings/clients/%s/available", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClientScopeScopeMappingsClientCompositeRequest generates requests for GetClientScopeScopeMappingsClientComposite
func NewGetClientScopeScopeMappingsClientCompositeRequest(server string, realm string, id string, client string, params *GetClientScopeScopeMappingsClientCompositeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-scopes/%s/scope-mappings/clients/%s/composite", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteClientScopeScopeMappingsRealmRequest calls the generic DeleteClientScopeScopeMappingsRealm builder with application/json body
func NewDeleteClientScopeScopeMappingsRealmRequest(server string, realm string, id string, body DeleteClientScopeScopeMappingsRealmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteClientScopeScopeMappingsRealmRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewDeleteClientScopeScopeMappingsRealmRequestWithBody generates requests for DeleteClientScopeScopeMappingsRealm with any type of body
func NewDeleteClientScopeScopeMappingsRealmRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-scopes/%s/scope-mappings/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetClientScopeScopeMappingsRealmRequest generates requests for GetClientScopeScopeMappingsRealm
func NewGetClientScopeScopeMappingsRealmRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-scopes/%s/scope-mappings/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostClientScopeScopeMappingsRealmRequest calls the generic PostClientScopeScopeMappingsRealm builder with application/json body
func NewPostClientScopeScopeMappingsRealmRequest(server string, realm string, id string, body PostClientScopeScopeMappingsRealmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostClientScopeScopeMappingsRealmRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPostClientScopeScopeMappingsRealmRequestWithBody generates requests for PostClientScopeScopeMappingsRealm with any type of body
func NewPostClientScopeScopeMappingsRealmRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-scopes/%s/scope-mappings/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetClientScopeScopeMappingsRealmAvailableRequest generates requests for GetClientScopeScopeMappingsRealmAvailable
func NewGetClientScopeScopeMappingsRealmAvailableRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-scopes/%s/scope-mappings/realm/available", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClientScopeScopeMappingsRealmCompositeRequest generates requests for GetClientScopeScopeMappingsRealmComposite
func NewGetClientScopeScopeMappingsRealmCompositeRequest(server string, realm string, id string, params *GetClientScopeScopeMappingsRealmCompositeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-scopes/%s/scope-mappings/realm/composite", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClientSessionStatsRequest generates requests for GetClientSessionStats
func NewGetClientSessionStatsRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-session-stats", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClientTemplatesRequest generates requests for GetClientTemplates
func NewGetClientTemplatesRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-templates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostClientTemplatesRequest calls the generic PostClientTemplates builder with application/json body
func NewPostClientTemplatesRequest(server string, realm string, body PostClientTemplatesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostClientTemplatesRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostClientTemplatesRequestWithBody generates requests for PostClientTemplates with any type of body
func NewPostClientTemplatesRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-templates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteClientTemplateProtocolMappersModelRequest generates requests for DeleteClientTemplateProtocolMappersModel
func NewDeleteClientTemplateProtocolMappersModelRequest(server string, realm string, id1 string, id2 string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id1", runtime.ParamLocationPath, id1)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id2", runtime.ParamLocationPath, id2)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-templates/%s/protocol-mappers/models/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClientTemplateProtocolMappersModelRequest generates requests for GetClientTemplateProtocolMappersModel
func NewGetClientTemplateProtocolMappersModelRequest(server string, realm string, id1 string, id2 string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id1", runtime.ParamLocationPath, id1)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id2", runtime.ParamLocationPath, id2)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-templates/%s/protocol-mappers/models/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutClientTemplateProtocolMappersModelRequest calls the generic PutClientTemplateProtocolMappersModel builder with application/json body
func NewPutClientTemplateProtocolMappersModelRequest(server string, realm string, id1 string, id2 string, body PutClientTemplateProtocolMappersModelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutClientTemplateProtocolMappersModelRequestWithBody(server, realm, id1, id2, "application/json", bodyReader)
}

// NewPutClientTemplateProtocolMappersModelRequestWithBody generates requests for PutClientTemplateProtocolMappersModel with any type of body
func NewPutClientTemplateProtocolMappersModelRequestWithBody(server string, realm string, id1 string, id2 string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id1", runtime.ParamLocationPath, id1)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id2", runtime.ParamLocationPath, id2)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-templates/%s/protocol-mappers/models/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteClientTemplateRequest generates requests for DeleteClientTemplate
func NewDeleteClientTemplateRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-templates/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClientTemplateRequest generates requests for GetClientTemplate
func NewGetClientTemplateRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-templates/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutClientTemplateRequest calls the generic PutClientTemplate builder with application/json body
func NewPutClientTemplateRequest(server string, realm string, id string, body PutClientTemplateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutClientTemplateRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPutClientTemplateRequestWithBody generates requests for PutClientTemplate with any type of body
func NewPutClientTemplateRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-templates/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostClientTemplateProtocolMappersAddModelsRequest calls the generic PostClientTemplateProtocolMappersAddModels builder with application/json body
func NewPostClientTemplateProtocolMappersAddModelsRequest(server string, realm string, id string, body PostClientTemplateProtocolMappersAddModelsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostClientTemplateProtocolMappersAddModelsRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPostClientTemplateProtocolMappersAddModelsRequestWithBody generates requests for PostClientTemplateProtocolMappersAddModels with any type of body
func NewPostClientTemplateProtocolMappersAddModelsRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-templates/%s/protocol-mappers/add-models", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetClientTemplateProtocolMappersModelsRequest generates requests for GetClientTemplateProtocolMappersModels
func NewGetClientTemplateProtocolMappersModelsRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-templates/%s/protocol-mappers/models", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostClientTemplateProtocolMappersModelsRequest calls the generic PostClientTemplateProtocolMappersModels builder with application/json body
func NewPostClientTemplateProtocolMappersModelsRequest(server string, realm string, id string, body PostClientTemplateProtocolMappersModelsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostClientTemplateProtocolMappersModelsRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPostClientTemplateProtocolMappersModelsRequestWithBody generates requests for PostClientTemplateProtocolMappersModels with any type of body
func NewPostClientTemplateProtocolMappersModelsRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-templates/%s/protocol-mappers/models", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetClientTemplateProtocolMappersProtocolRequest generates requests for GetClientTemplateProtocolMappersProtocol
func NewGetClientTemplateProtocolMappersProtocolRequest(server string, realm string, id string, protocol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "protocol", runtime.ParamLocationPath, protocol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-templates/%s/protocol-mappers/protocol/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClientTemplateScopeMappingsRequest generates requests for GetClientTemplateScopeMappings
func NewGetClientTemplateScopeMappingsRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-templates/%s/scope-mappings", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteClientTemplateScopeMappingsClientRequest calls the generic DeleteClientTemplateScopeMappingsClient builder with application/json body
func NewDeleteClientTemplateScopeMappingsClientRequest(server string, realm string, id string, client string, body DeleteClientTemplateScopeMappingsClientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteClientTemplateScopeMappingsClientRequestWithBody(server, realm, id, client, "application/json", bodyReader)
}

// NewDeleteClientTemplateScopeMappingsClientRequestWithBody generates requests for DeleteClientTemplateScopeMappingsClient with any type of body
func NewDeleteClientTemplateScopeMappingsClientRequestWithBody(server string, realm string, id string, client string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-templates/%s/scope-mappings/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetClientTemplateScopeMappingsClientRequest generates requests for GetClientTemplateScopeMappingsClient
func NewGetClientTemplateScopeMappingsClientRequest(server string, realm string, id string, client string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-templates/%s/scope-mappings/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostClientTemplateScopeMappingsClientRequest calls the generic PostClientTemplateScopeMappingsClient builder with application/json body
func NewPostClientTemplateScopeMappingsClientRequest(server string, realm string, id string, client string, body PostClientTemplateScopeMappingsClientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostClientTemplateScopeMappingsClientRequestWithBody(server, realm, id, client, "application/json", bodyReader)
}

// NewPostClientTemplateScopeMappingsClientRequestWithBody generates requests for PostClientTemplateScopeMappingsClient with any type of body
func NewPostClientTemplateScopeMappingsClientRequestWithBody(server string, realm string, id string, client string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-templates/%s/scope-mappings/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetClientTemplateScopeMappingsClientAvailableRequest generates requests for GetClientTemplateScopeMappingsClientAvailable
func NewGetClientTemplateScopeMappingsClientAvailableRequest(server string, realm string, id string, client string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-templates/%s/scope-mappings/clients/%s/available", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClientTemplateScopeMappingsClientCompositeRequest generates requests for GetClientTemplateScopeMappingsClientComposite
func NewGetClientTemplateScopeMappingsClientCompositeRequest(server string, realm string, id string, client string, params *GetClientTemplateScopeMappingsClientCompositeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-templates/%s/scope-mappings/clients/%s/composite", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteClientTemplateScopeMappingsRealmRequest calls the generic DeleteClientTemplateScopeMappingsRealm builder with application/json body
func NewDeleteClientTemplateScopeMappingsRealmRequest(server string, realm string, id string, body DeleteClientTemplateScopeMappingsRealmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteClientTemplateScopeMappingsRealmRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewDeleteClientTemplateScopeMappingsRealmRequestWithBody generates requests for DeleteClientTemplateScopeMappingsRealm with any type of body
func NewDeleteClientTemplateScopeMappingsRealmRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-templates/%s/scope-mappings/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetClientTemplateScopeMappingsRealmRequest generates requests for GetClientTemplateScopeMappingsRealm
func NewGetClientTemplateScopeMappingsRealmRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-templates/%s/scope-mappings/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostClientTemplateScopeMappingsRealmRequest calls the generic PostClientTemplateScopeMappingsRealm builder with application/json body
func NewPostClientTemplateScopeMappingsRealmRequest(server string, realm string, id string, body PostClientTemplateScopeMappingsRealmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostClientTemplateScopeMappingsRealmRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPostClientTemplateScopeMappingsRealmRequestWithBody generates requests for PostClientTemplateScopeMappingsRealm with any type of body
func NewPostClientTemplateScopeMappingsRealmRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-templates/%s/scope-mappings/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetClientTemplateScopeMappingsRealmAvailableRequest generates requests for GetClientTemplateScopeMappingsRealmAvailable
func NewGetClientTemplateScopeMappingsRealmAvailableRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-templates/%s/scope-mappings/realm/available", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClientTemplateScopeMappingsRealmCompositeRequest generates requests for GetClientTemplateScopeMappingsRealmComposite
func NewGetClientTemplateScopeMappingsRealmCompositeRequest(server string, realm string, id string, params *GetClientTemplateScopeMappingsRealmCompositeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-templates/%s/scope-mappings/realm/composite", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClientsRequest generates requests for GetClients
func NewGetClientsRequest(server string, realm string, params *GetClientsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ClientId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clientId", runtime.ParamLocationQuery, *params.ClientId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ViewableOnly != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "viewableOnly", runtime.ParamLocationQuery, *params.ViewableOnly); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostClientsRequest calls the generic PostClients builder with application/json body
func NewPostClientsRequest(server string, realm string, body PostClientsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostClientsRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostClientsRequestWithBody generates requests for PostClients with any type of body
func NewPostClientsRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetClientsInitialAccessRequest generates requests for GetClientsInitialAccess
func NewGetClientsInitialAccessRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients-initial-access", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostClientsInitialAccessRequest calls the generic PostClientsInitialAccess builder with application/json body
func NewPostClientsInitialAccessRequest(server string, realm string, body PostClientsInitialAccessJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostClientsInitialAccessRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostClientsInitialAccessRequestWithBody generates requests for PostClientsInitialAccess with any type of body
func NewPostClientsInitialAccessRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients-initial-access", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteClientsInitialAccesRequest generates requests for DeleteClientsInitialAcces
func NewDeleteClientsInitialAccesRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients-initial-access/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteClientProtocolMappersModelRequest generates requests for DeleteClientProtocolMappersModel
func NewDeleteClientProtocolMappersModelRequest(server string, realm string, id1 string, id2 string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id1", runtime.ParamLocationPath, id1)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id2", runtime.ParamLocationPath, id2)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/protocol-mappers/models/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClientProtocolMappersModelRequest generates requests for GetClientProtocolMappersModel
func NewGetClientProtocolMappersModelRequest(server string, realm string, id1 string, id2 string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id1", runtime.ParamLocationPath, id1)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id2", runtime.ParamLocationPath, id2)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/protocol-mappers/models/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutClientProtocolMappersModelRequest calls the generic PutClientProtocolMappersModel builder with application/json body
func NewPutClientProtocolMappersModelRequest(server string, realm string, id1 string, id2 string, body PutClientProtocolMappersModelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutClientProtocolMappersModelRequestWithBody(server, realm, id1, id2, "application/json", bodyReader)
}

// NewPutClientProtocolMappersModelRequestWithBody generates requests for PutClientProtocolMappersModel with any type of body
func NewPutClientProtocolMappersModelRequestWithBody(server string, realm string, id1 string, id2 string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id1", runtime.ParamLocationPath, id1)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id2", runtime.ParamLocationPath, id2)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/protocol-mappers/models/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteClientByRealmByIdRequest generates requests for DeleteClientByRealmById
func NewDeleteClientByRealmByIdRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClientByRealmByIdRequest generates requests for GetClientByRealmById
func NewGetClientByRealmByIdRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutClientRequest calls the generic PutClient builder with application/json body
func NewPutClientRequest(server string, realm string, id string, body PutClientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutClientRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPutClientRequestWithBody generates requests for PutClient with any type of body
func NewPutClientRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCertificateRequest generates requests for GetCertificate
func NewGetCertificateRequest(server string, realm string, id string, attr string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "attr", runtime.ParamLocationPath, attr)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/certificates/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDownloadRequest calls the generic PostDownload builder with application/json body
func NewPostDownloadRequest(server string, realm string, id string, attr string, body PostDownloadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDownloadRequestWithBody(server, realm, id, attr, "application/json", bodyReader)
}

// NewPostDownloadRequestWithBody generates requests for PostDownload with any type of body
func NewPostDownloadRequestWithBody(server string, realm string, id string, attr string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "attr", runtime.ParamLocationPath, attr)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/certificates/%s/download", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostGenerateRequest generates requests for PostGenerate
func NewPostGenerateRequest(server string, realm string, id string, attr string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "attr", runtime.ParamLocationPath, attr)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/certificates/%s/generate", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGenerateAndDownloadRequest calls the generic PostGenerateAndDownload builder with application/json body
func NewPostGenerateAndDownloadRequest(server string, realm string, id string, attr string, body PostGenerateAndDownloadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGenerateAndDownloadRequestWithBody(server, realm, id, attr, "application/json", bodyReader)
}

// NewPostGenerateAndDownloadRequestWithBody generates requests for PostGenerateAndDownload with any type of body
func NewPostGenerateAndDownloadRequestWithBody(server string, realm string, id string, attr string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "attr", runtime.ParamLocationPath, attr)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/certificates/%s/generate-and-download", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUploadRequest generates requests for PostUpload
func NewPostUploadRequest(server string, realm string, id string, attr string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "attr", runtime.ParamLocationPath, attr)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/certificates/%s/upload", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUploadCertificateRequest generates requests for PostUploadCertificate
func NewPostUploadCertificateRequest(server string, realm string, id string, attr string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "attr", runtime.ParamLocationPath, attr)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/certificates/%s/upload-certificate", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClientSecretRequest generates requests for GetClientSecret
func NewGetClientSecretRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/client-secret", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostClientSecretRequest generates requests for PostClientSecret
func NewPostClientSecretRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/client-secret", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRotatedRequest generates requests for DeleteRotated
func NewDeleteRotatedRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/client-secret/rotated", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRotatedRequest generates requests for GetRotated
func NewGetRotatedRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/client-secret/rotated", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDefaultClientScopesRequest generates requests for GetDefaultClientScopes
func NewGetDefaultClientScopesRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/default-client-scopes", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteDefaultClientScopeRequest generates requests for DeleteDefaultClientScope
func NewDeleteDefaultClientScopeRequest(server string, realm string, id string, clientScopeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "clientScopeId", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/default-client-scopes/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutDefaultClientScopeRequest generates requests for PutDefaultClientScope
func NewPutDefaultClientScopeRequest(server string, realm string, id string, clientScopeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "clientScopeId", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/default-client-scopes/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGenerateExampleAccessTokenRequest generates requests for GetGenerateExampleAccessToken
func NewGetGenerateExampleAccessTokenRequest(server string, realm string, id string, params *GetGenerateExampleAccessTokenParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/evaluate-scopes/generate-example-access-token", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Scope != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope", runtime.ParamLocationQuery, *params.Scope); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGenerateExampleIdTokenRequest generates requests for GetGenerateExampleIdToken
func NewGetGenerateExampleIdTokenRequest(server string, realm string, id string, params *GetGenerateExampleIdTokenParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/evaluate-scopes/generate-example-id-token", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Scope != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope", runtime.ParamLocationQuery, *params.Scope); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGenerateExampleUserinfoRequest generates requests for GetGenerateExampleUserinfo
func NewGetGenerateExampleUserinfoRequest(server string, realm string, id string, params *GetGenerateExampleUserinfoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/evaluate-scopes/generate-example-userinfo", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Scope != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope", runtime.ParamLocationQuery, *params.Scope); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProtocolMappersRequest generates requests for GetProtocolMappers
func NewGetProtocolMappersRequest(server string, realm string, id string, params *GetProtocolMappersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/evaluate-scopes/protocol-mappers", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Scope != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope", runtime.ParamLocationQuery, *params.Scope); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGrantedRequest generates requests for GetGranted
func NewGetGrantedRequest(server string, realm string, id string, roleContainerId string, params *GetGrantedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "roleContainerId", runtime.ParamLocationPath, roleContainerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/evaluate-scopes/scope-mappings/%s/granted", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Scope != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope", runtime.ParamLocationQuery, *params.Scope); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNotGrantedRequest generates requests for GetNotGranted
func NewGetNotGrantedRequest(server string, realm string, id string, roleContainerId string, params *GetNotGrantedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "roleContainerId", runtime.ParamLocationPath, roleContainerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/evaluate-scopes/scope-mappings/%s/not-granted", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Scope != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope", runtime.ParamLocationQuery, *params.Scope); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInstallationProviderRequest generates requests for GetInstallationProvider
func NewGetInstallationProviderRequest(server string, realm string, id string, providerId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "providerId", runtime.ParamLocationPath, providerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/installation/providers/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClientManagementPermissionsRequest generates requests for GetClientManagementPermissions
func NewGetClientManagementPermissionsRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/management/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutClientManagementPermissionsRequest calls the generic PutClientManagementPermissions builder with application/json body
func NewPutClientManagementPermissionsRequest(server string, realm string, id string, body PutClientManagementPermissionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutClientManagementPermissionsRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPutClientManagementPermissionsRequestWithBody generates requests for PutClientManagementPermissions with any type of body
func NewPutClientManagementPermissionsRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/management/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostNodesRequest calls the generic PostNodes builder with application/json body
func NewPostNodesRequest(server string, realm string, id string, body PostNodesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostNodesRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPostNodesRequestWithBody generates requests for PostNodes with any type of body
func NewPostNodesRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/nodes", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteNodeRequest generates requests for DeleteNode
func NewDeleteNodeRequest(server string, realm string, id string, node string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "node", runtime.ParamLocationPath, node)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/nodes/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOfflineSessionCountRequest generates requests for GetOfflineSessionCount
func NewGetOfflineSessionCountRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/offline-session-count", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOfflineSessionsRequest generates requests for GetOfflineSessions
func NewGetOfflineSessionsRequest(server string, realm string, id string, params *GetOfflineSessionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/offline-sessions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOptionalClientScopesRequest generates requests for GetOptionalClientScopes
func NewGetOptionalClientScopesRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/optional-client-scopes", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteOptionalClientScopeRequest generates requests for DeleteOptionalClientScope
func NewDeleteOptionalClientScopeRequest(server string, realm string, id string, clientScopeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "clientScopeId", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/optional-client-scopes/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutOptionalClientScopeRequest generates requests for PutOptionalClientScope
func NewPutOptionalClientScopeRequest(server string, realm string, id string, clientScopeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "clientScopeId", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/optional-client-scopes/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostClientProtocolMappersAddModelsRequest calls the generic PostClientProtocolMappersAddModels builder with application/json body
func NewPostClientProtocolMappersAddModelsRequest(server string, realm string, id string, body PostClientProtocolMappersAddModelsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostClientProtocolMappersAddModelsRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPostClientProtocolMappersAddModelsRequestWithBody generates requests for PostClientProtocolMappersAddModels with any type of body
func NewPostClientProtocolMappersAddModelsRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/protocol-mappers/add-models", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetClientProtocolMappersModelsRequest generates requests for GetClientProtocolMappersModels
func NewGetClientProtocolMappersModelsRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/protocol-mappers/models", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostClientProtocolMappersModelsRequest calls the generic PostClientProtocolMappersModels builder with application/json body
func NewPostClientProtocolMappersModelsRequest(server string, realm string, id string, body PostClientProtocolMappersModelsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostClientProtocolMappersModelsRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPostClientProtocolMappersModelsRequestWithBody generates requests for PostClientProtocolMappersModels with any type of body
func NewPostClientProtocolMappersModelsRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/protocol-mappers/models", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetClientProtocolMappersProtocolRequest generates requests for GetClientProtocolMappersProtocol
func NewGetClientProtocolMappersProtocolRequest(server string, realm string, id string, protocol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "protocol", runtime.ParamLocationPath, protocol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/protocol-mappers/protocol/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostClientPushRevocationRequest generates requests for PostClientPushRevocation
func NewPostClientPushRevocationRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/push-revocation", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRegistrationAccessTokenRequest generates requests for PostRegistrationAccessToken
func NewPostRegistrationAccessTokenRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/registration-access-token", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClientRolesRequest generates requests for GetClientRoles
func NewGetClientRolesRequest(server string, realm string, id string, params *GetClientRolesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/roles", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostClientRolesRequest calls the generic PostClientRoles builder with application/json body
func NewPostClientRolesRequest(server string, realm string, id string, body PostClientRolesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostClientRolesRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPostClientRolesRequestWithBody generates requests for PostClientRoles with any type of body
func NewPostClientRolesRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/roles", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteClientRoleRequest generates requests for DeleteClientRole
func NewDeleteClientRoleRequest(server string, realm string, id string, roleName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/roles/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClientRoleRequest generates requests for GetClientRole
func NewGetClientRoleRequest(server string, realm string, id string, roleName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/roles/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutClientRoleRequest calls the generic PutClientRole builder with application/json body
func NewPutClientRoleRequest(server string, realm string, id string, roleName string, body PutClientRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutClientRoleRequestWithBody(server, realm, id, roleName, "application/json", bodyReader)
}

// NewPutClientRoleRequestWithBody generates requests for PutClientRole with any type of body
func NewPutClientRoleRequestWithBody(server string, realm string, id string, roleName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/roles/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteClientRoleCompositesRequest calls the generic DeleteClientRoleComposites builder with application/json body
func NewDeleteClientRoleCompositesRequest(server string, realm string, id string, roleName string, body DeleteClientRoleCompositesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteClientRoleCompositesRequestWithBody(server, realm, id, roleName, "application/json", bodyReader)
}

// NewDeleteClientRoleCompositesRequestWithBody generates requests for DeleteClientRoleComposites with any type of body
func NewDeleteClientRoleCompositesRequestWithBody(server string, realm string, id string, roleName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/roles/%s/composites", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetClientRoleCompositesRequest generates requests for GetClientRoleComposites
func NewGetClientRoleCompositesRequest(server string, realm string, id string, roleName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/roles/%s/composites", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostClientRoleCompositesRequest calls the generic PostClientRoleComposites builder with application/json body
func NewPostClientRoleCompositesRequest(server string, realm string, id string, roleName string, body PostClientRoleCompositesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostClientRoleCompositesRequestWithBody(server, realm, id, roleName, "application/json", bodyReader)
}

// NewPostClientRoleCompositesRequestWithBody generates requests for PostClientRoleComposites with any type of body
func NewPostClientRoleCompositesRequestWithBody(server string, realm string, id string, roleName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/roles/%s/composites", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetClientRoleCompositesClientRequest generates requests for GetClientRoleCompositesClient
func NewGetClientRoleCompositesClientRequest(server string, realm string, id string, roleName string, clientUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "clientUuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/roles/%s/composites/clients/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClientRoleCompositesRealmRequest generates requests for GetClientRoleCompositesRealm
func NewGetClientRoleCompositesRealmRequest(server string, realm string, id string, roleName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/roles/%s/composites/realm", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClientRoleGroupsRequest generates requests for GetClientRoleGroups
func NewGetClientRoleGroupsRequest(server string, realm string, id string, roleName string, params *GetClientRoleGroupsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/roles/%s/groups", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClientRoleManagementPermissionsRequest generates requests for GetClientRoleManagementPermissions
func NewGetClientRoleManagementPermissionsRequest(server string, realm string, id string, roleName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/roles/%s/management/permissions", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutClientRoleManagementPermissionsRequest calls the generic PutClientRoleManagementPermissions builder with application/json body
func NewPutClientRoleManagementPermissionsRequest(server string, realm string, id string, roleName string, body PutClientRoleManagementPermissionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutClientRoleManagementPermissionsRequestWithBody(server, realm, id, roleName, "application/json", bodyReader)
}

// NewPutClientRoleManagementPermissionsRequestWithBody generates requests for PutClientRoleManagementPermissions with any type of body
func NewPutClientRoleManagementPermissionsRequestWithBody(server string, realm string, id string, roleName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/roles/%s/management/permissions", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetClientRoleUsersRequest generates requests for GetClientRoleUsers
func NewGetClientRoleUsersRequest(server string, realm string, id string, roleName string, params *GetClientRoleUsersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/roles/%s/users", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClientScopeMappingsRequest generates requests for GetClientScopeMappings
func NewGetClientScopeMappingsRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/scope-mappings", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteClientScopeMappingsClientRequest calls the generic DeleteClientScopeMappingsClient builder with application/json body
func NewDeleteClientScopeMappingsClientRequest(server string, realm string, id string, client string, body DeleteClientScopeMappingsClientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteClientScopeMappingsClientRequestWithBody(server, realm, id, client, "application/json", bodyReader)
}

// NewDeleteClientScopeMappingsClientRequestWithBody generates requests for DeleteClientScopeMappingsClient with any type of body
func NewDeleteClientScopeMappingsClientRequestWithBody(server string, realm string, id string, client string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/scope-mappings/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetClientScopeMappingsClientRequest generates requests for GetClientScopeMappingsClient
func NewGetClientScopeMappingsClientRequest(server string, realm string, id string, client string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/scope-mappings/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostClientScopeMappingsClientRequest calls the generic PostClientScopeMappingsClient builder with application/json body
func NewPostClientScopeMappingsClientRequest(server string, realm string, id string, client string, body PostClientScopeMappingsClientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostClientScopeMappingsClientRequestWithBody(server, realm, id, client, "application/json", bodyReader)
}

// NewPostClientScopeMappingsClientRequestWithBody generates requests for PostClientScopeMappingsClient with any type of body
func NewPostClientScopeMappingsClientRequestWithBody(server string, realm string, id string, client string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/scope-mappings/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetClientScopeMappingsClientAvailableRequest generates requests for GetClientScopeMappingsClientAvailable
func NewGetClientScopeMappingsClientAvailableRequest(server string, realm string, id string, client string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/scope-mappings/clients/%s/available", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClientScopeMappingsClientCompositeRequest generates requests for GetClientScopeMappingsClientComposite
func NewGetClientScopeMappingsClientCompositeRequest(server string, realm string, id string, client string, params *GetClientScopeMappingsClientCompositeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/scope-mappings/clients/%s/composite", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteClientScopeMappingsRealmRequest calls the generic DeleteClientScopeMappingsRealm builder with application/json body
func NewDeleteClientScopeMappingsRealmRequest(server string, realm string, id string, body DeleteClientScopeMappingsRealmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteClientScopeMappingsRealmRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewDeleteClientScopeMappingsRealmRequestWithBody generates requests for DeleteClientScopeMappingsRealm with any type of body
func NewDeleteClientScopeMappingsRealmRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/scope-mappings/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetClientScopeMappingsRealmRequest generates requests for GetClientScopeMappingsRealm
func NewGetClientScopeMappingsRealmRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/scope-mappings/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostClientScopeMappingsRealmRequest calls the generic PostClientScopeMappingsRealm builder with application/json body
func NewPostClientScopeMappingsRealmRequest(server string, realm string, id string, body PostClientScopeMappingsRealmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostClientScopeMappingsRealmRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPostClientScopeMappingsRealmRequestWithBody generates requests for PostClientScopeMappingsRealm with any type of body
func NewPostClientScopeMappingsRealmRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/scope-mappings/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetClientScopeMappingsRealmAvailableRequest generates requests for GetClientScopeMappingsRealmAvailable
func NewGetClientScopeMappingsRealmAvailableRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/scope-mappings/realm/available", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClientScopeMappingsRealmCompositeRequest generates requests for GetClientScopeMappingsRealmComposite
func NewGetClientScopeMappingsRealmCompositeRequest(server string, realm string, id string, params *GetClientScopeMappingsRealmCompositeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/scope-mappings/realm/composite", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceAccountUserRequest generates requests for GetServiceAccountUser
func NewGetServiceAccountUserRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/service-account-user", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSessionCountRequest generates requests for GetSessionCount
func NewGetSessionCountRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/session-count", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTestNodesAvailableRequest generates requests for GetTestNodesAvailable
func NewGetTestNodesAvailableRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/test-nodes-available", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClientUserSessionsRequest generates requests for GetClientUserSessions
func NewGetClientUserSessionsRequest(server string, realm string, id string, params *GetClientUserSessionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/user-sessions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetComponentsRequest generates requests for GetComponents
func NewGetComponentsRequest(server string, realm string, params *GetComponentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/components", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Parent != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent", runtime.ParamLocationQuery, *params.Parent); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostComponentsRequest calls the generic PostComponents builder with application/json body
func NewPostComponentsRequest(server string, realm string, body PostComponentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostComponentsRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostComponentsRequestWithBody generates requests for PostComponents with any type of body
func NewPostComponentsRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/components", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteComponentRequest generates requests for DeleteComponent
func NewDeleteComponentRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/components/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetComponentRequest generates requests for GetComponent
func NewGetComponentRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/components/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutComponentRequest calls the generic PutComponent builder with application/json body
func NewPutComponentRequest(server string, realm string, id string, body PutComponentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutComponentRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPutComponentRequestWithBody generates requests for PutComponent with any type of body
func NewPutComponentRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/components/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSubComponentTypesRequest generates requests for GetSubComponentTypes
func NewGetSubComponentTypesRequest(server string, realm string, id string, params *GetSubComponentTypesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/components/%s/sub-component-types", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCredentialRegistratorsRequest generates requests for GetCredentialRegistrators
func NewGetCredentialRegistratorsRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/credential-registrators", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDefaultDefaultClientScopesRequest generates requests for GetDefaultDefaultClientScopes
func NewGetDefaultDefaultClientScopesRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/default-default-client-scopes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteDefaultDefaultClientScopeRequest generates requests for DeleteDefaultDefaultClientScope
func NewDeleteDefaultDefaultClientScopeRequest(server string, realm string, clientScopeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clientScopeId", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/default-default-client-scopes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutDefaultDefaultClientScopeRequest generates requests for PutDefaultDefaultClientScope
func NewPutDefaultDefaultClientScopeRequest(server string, realm string, clientScopeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clientScopeId", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/default-default-client-scopes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDefaultGroupsRequest generates requests for GetDefaultGroups
func NewGetDefaultGroupsRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/default-groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteDefaultGroupRequest generates requests for DeleteDefaultGroup
func NewDeleteDefaultGroupRequest(server string, realm string, groupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/default-groups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutDefaultGroupRequest generates requests for PutDefaultGroup
func NewPutDefaultGroupRequest(server string, realm string, groupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/default-groups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDefaultOptionalClientScopesRequest generates requests for GetDefaultOptionalClientScopes
func NewGetDefaultOptionalClientScopesRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/default-optional-client-scopes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteDefaultOptionalClientScopeRequest generates requests for DeleteDefaultOptionalClientScope
func NewDeleteDefaultOptionalClientScopeRequest(server string, realm string, clientScopeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clientScopeId", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/default-optional-client-scopes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutDefaultOptionalClientScopeRequest generates requests for PutDefaultOptionalClientScope
func NewPutDefaultOptionalClientScopeRequest(server string, realm string, clientScopeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clientScopeId", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/default-optional-client-scopes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteEventsRequest generates requests for DeleteEvents
func NewDeleteEventsRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEventsRequest generates requests for GetEvents
func NewGetEventsRequest(server string, realm string, params *GetEventsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Client != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "client", runtime.ParamLocationQuery, *params.Client); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DateFrom != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateFrom", runtime.ParamLocationQuery, *params.DateFrom); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DateTo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateTo", runtime.ParamLocationQuery, *params.DateTo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IpAddress != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ipAddress", runtime.ParamLocationQuery, *params.IpAddress); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.User != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user", runtime.ParamLocationQuery, *params.User); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEventsConfigRequest generates requests for GetEventsConfig
func NewGetEventsConfigRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/events/config", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutEventsConfigRequest calls the generic PutEventsConfig builder with application/json body
func NewPutEventsConfigRequest(server string, realm string, body PutEventsConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutEventsConfigRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPutEventsConfigRequestWithBody generates requests for PutEventsConfig with any type of body
func NewPutEventsConfigRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/events/config", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGroupByPathRequest generates requests for GetGroupByPath
func NewGetGroupByPathRequest(server string, realm string, path string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/group-by-path/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGroupsByRealmRequest generates requests for GetGroupsByRealm
func NewGetGroupsByRealmRequest(server string, realm string, params *GetGroupsByRealmParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Exact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exact", runtime.ParamLocationQuery, *params.Exact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PopulateHierarchy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "populateHierarchy", runtime.ParamLocationQuery, *params.PopulateHierarchy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGroupsRequest calls the generic PostGroups builder with application/json body
func NewPostGroupsRequest(server string, realm string, body PostGroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGroupsRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostGroupsRequestWithBody generates requests for PostGroups with any type of body
func NewPostGroupsRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGroupsCountByRealmRequest generates requests for GetGroupsCountByRealm
func NewGetGroupsCountByRealmRequest(server string, realm string, params *GetGroupsCountByRealmParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/groups/count", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Top != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "top", runtime.ParamLocationQuery, *params.Top); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteGroupByRealmByIdRequest generates requests for DeleteGroupByRealmById
func NewDeleteGroupByRealmByIdRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/groups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGroupRequest generates requests for GetGroup
func NewGetGroupRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/groups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutGroupByRealmByIdRequest calls the generic PutGroupByRealmById builder with application/json body
func NewPutGroupByRealmByIdRequest(server string, realm string, id string, body PutGroupByRealmByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutGroupByRealmByIdRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPutGroupByRealmByIdRequestWithBody generates requests for PutGroupByRealmById with any type of body
func NewPutGroupByRealmByIdRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/groups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostChildrenRequest calls the generic PostChildren builder with application/json body
func NewPostChildrenRequest(server string, realm string, id string, body PostChildrenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostChildrenRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPostChildrenRequestWithBody generates requests for PostChildren with any type of body
func NewPostChildrenRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/groups/%s/children", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGroupManagementPermissionsRequest generates requests for GetGroupManagementPermissions
func NewGetGroupManagementPermissionsRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/groups/%s/management/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutGroupManagementPermissionsRequest calls the generic PutGroupManagementPermissions builder with application/json body
func NewPutGroupManagementPermissionsRequest(server string, realm string, id string, body PutGroupManagementPermissionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutGroupManagementPermissionsRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPutGroupManagementPermissionsRequestWithBody generates requests for PutGroupManagementPermissions with any type of body
func NewPutGroupManagementPermissionsRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/groups/%s/management/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMembersRequest generates requests for GetMembers
func NewGetMembersRequest(server string, realm string, id string, params *GetMembersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/groups/%s/members", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGroupRoleMappingsRequest generates requests for GetGroupRoleMappings
func NewGetGroupRoleMappingsRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/groups/%s/role-mappings", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteGroupRoleMappingsClientRequest calls the generic DeleteGroupRoleMappingsClient builder with application/json body
func NewDeleteGroupRoleMappingsClientRequest(server string, realm string, id string, client string, body DeleteGroupRoleMappingsClientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteGroupRoleMappingsClientRequestWithBody(server, realm, id, client, "application/json", bodyReader)
}

// NewDeleteGroupRoleMappingsClientRequestWithBody generates requests for DeleteGroupRoleMappingsClient with any type of body
func NewDeleteGroupRoleMappingsClientRequestWithBody(server string, realm string, id string, client string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/groups/%s/role-mappings/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGroupRoleMappingsClientRequest generates requests for GetGroupRoleMappingsClient
func NewGetGroupRoleMappingsClientRequest(server string, realm string, id string, client string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/groups/%s/role-mappings/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGroupRoleMappingsClientRequest calls the generic PostGroupRoleMappingsClient builder with application/json body
func NewPostGroupRoleMappingsClientRequest(server string, realm string, id string, client string, body PostGroupRoleMappingsClientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGroupRoleMappingsClientRequestWithBody(server, realm, id, client, "application/json", bodyReader)
}

// NewPostGroupRoleMappingsClientRequestWithBody generates requests for PostGroupRoleMappingsClient with any type of body
func NewPostGroupRoleMappingsClientRequestWithBody(server string, realm string, id string, client string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/groups/%s/role-mappings/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGroupRoleMappingsClientAvailableRequest generates requests for GetGroupRoleMappingsClientAvailable
func NewGetGroupRoleMappingsClientAvailableRequest(server string, realm string, id string, client string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/groups/%s/role-mappings/clients/%s/available", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGroupRoleMappingsClientCompositeRequest generates requests for GetGroupRoleMappingsClientComposite
func NewGetGroupRoleMappingsClientCompositeRequest(server string, realm string, id string, client string, params *GetGroupRoleMappingsClientCompositeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/groups/%s/role-mappings/clients/%s/composite", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteGroupRoleMappingsRealmRequest calls the generic DeleteGroupRoleMappingsRealm builder with application/json body
func NewDeleteGroupRoleMappingsRealmRequest(server string, realm string, id string, body DeleteGroupRoleMappingsRealmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteGroupRoleMappingsRealmRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewDeleteGroupRoleMappingsRealmRequestWithBody generates requests for DeleteGroupRoleMappingsRealm with any type of body
func NewDeleteGroupRoleMappingsRealmRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/groups/%s/role-mappings/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGroupRoleMappingsRealmRequest generates requests for GetGroupRoleMappingsRealm
func NewGetGroupRoleMappingsRealmRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/groups/%s/role-mappings/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGroupRoleMappingsRealmRequest calls the generic PostGroupRoleMappingsRealm builder with application/json body
func NewPostGroupRoleMappingsRealmRequest(server string, realm string, id string, body PostGroupRoleMappingsRealmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGroupRoleMappingsRealmRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPostGroupRoleMappingsRealmRequestWithBody generates requests for PostGroupRoleMappingsRealm with any type of body
func NewPostGroupRoleMappingsRealmRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/groups/%s/role-mappings/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGroupRoleMappingsRealmAvailableRequest generates requests for GetGroupRoleMappingsRealmAvailable
func NewGetGroupRoleMappingsRealmAvailableRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/groups/%s/role-mappings/realm/available", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGroupRoleMappingsRealmCompositeRequest generates requests for GetGroupRoleMappingsRealmComposite
func NewGetGroupRoleMappingsRealmCompositeRequest(server string, realm string, id string, params *GetGroupRoleMappingsRealmCompositeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/groups/%s/role-mappings/realm/composite", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostImportConfigRequest calls the generic PostImportConfig builder with application/json body
func NewPostImportConfigRequest(server string, realm string, body PostImportConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostImportConfigRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostImportConfigRequestWithBody generates requests for PostImportConfig with any type of body
func NewPostImportConfigRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/identity-provider/import-config", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetInstancesRequest generates requests for GetInstances
func NewGetInstancesRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/identity-provider/instances", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostInstancesRequest calls the generic PostInstances builder with application/json body
func NewPostInstancesRequest(server string, realm string, body PostInstancesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInstancesRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostInstancesRequestWithBody generates requests for PostInstances with any type of body
func NewPostInstancesRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/identity-provider/instances", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteInstanceRequest generates requests for DeleteInstance
func NewDeleteInstanceRequest(server string, realm string, alias string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/identity-provider/instances/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInstanceRequest generates requests for GetInstance
func NewGetInstanceRequest(server string, realm string, alias string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/identity-provider/instances/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutInstanceRequest calls the generic PutInstance builder with application/json body
func NewPutInstanceRequest(server string, realm string, alias string, body PutInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutInstanceRequestWithBody(server, realm, alias, "application/json", bodyReader)
}

// NewPutInstanceRequestWithBody generates requests for PutInstance with any type of body
func NewPutInstanceRequestWithBody(server string, realm string, alias string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/identity-provider/instances/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetExportRequest generates requests for GetExport
func NewGetExportRequest(server string, realm string, alias string, params *GetExportParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/identity-provider/instances/%s/export", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInstanceManagementPermissionsRequest generates requests for GetInstanceManagementPermissions
func NewGetInstanceManagementPermissionsRequest(server string, realm string, alias string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/identity-provider/instances/%s/management/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutInstanceManagementPermissionsRequest calls the generic PutInstanceManagementPermissions builder with application/json body
func NewPutInstanceManagementPermissionsRequest(server string, realm string, alias string, body PutInstanceManagementPermissionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutInstanceManagementPermissionsRequestWithBody(server, realm, alias, "application/json", bodyReader)
}

// NewPutInstanceManagementPermissionsRequestWithBody generates requests for PutInstanceManagementPermissions with any type of body
func NewPutInstanceManagementPermissionsRequestWithBody(server string, realm string, alias string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/identity-provider/instances/%s/management/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMapperTypesRequest generates requests for GetMapperTypes
func NewGetMapperTypesRequest(server string, realm string, alias string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/identity-provider/instances/%s/mapper-types", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMappersRequest generates requests for GetMappers
func NewGetMappersRequest(server string, realm string, alias string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/identity-provider/instances/%s/mappers", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMappersRequest calls the generic PostMappers builder with application/json body
func NewPostMappersRequest(server string, realm string, alias string, body PostMappersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMappersRequestWithBody(server, realm, alias, "application/json", bodyReader)
}

// NewPostMappersRequestWithBody generates requests for PostMappers with any type of body
func NewPostMappersRequestWithBody(server string, realm string, alias string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/identity-provider/instances/%s/mappers", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteMapperRequest generates requests for DeleteMapper
func NewDeleteMapperRequest(server string, realm string, alias string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/identity-provider/instances/%s/mappers/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMapperRequest generates requests for GetMapper
func NewGetMapperRequest(server string, realm string, alias string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/identity-provider/instances/%s/mappers/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutMapperRequest calls the generic PutMapper builder with application/json body
func NewPutMapperRequest(server string, realm string, alias string, id string, body PutMapperJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutMapperRequestWithBody(server, realm, alias, id, "application/json", bodyReader)
}

// NewPutMapperRequestWithBody generates requests for PutMapper with any type of body
func NewPutMapperRequestWithBody(server string, realm string, alias string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/identity-provider/instances/%s/mappers/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIdentityProviderProviderRequest generates requests for GetIdentityProviderProvider
func NewGetIdentityProviderProviderRequest(server string, realm string, providerId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "provider_id", runtime.ParamLocationPath, providerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/identity-provider/providers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetKeysRequest generates requests for GetKeys
func NewGetKeysRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/keys", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLocalizationByRealmRequest generates requests for GetLocalizationByRealm
func NewGetLocalizationByRealmRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/localization", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteLocalizationByRealmByLocaleRequest generates requests for DeleteLocalizationByRealmByLocale
func NewDeleteLocalizationByRealmByLocaleRequest(server string, realm string, locale string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "locale", runtime.ParamLocationPath, locale)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/localization/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLocalizationByRealmByLocaleRequest generates requests for GetLocalizationByRealmByLocale
func NewGetLocalizationByRealmByLocaleRequest(server string, realm string, locale string, params *GetLocalizationByRealmByLocaleParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "locale", runtime.ParamLocationPath, locale)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/localization/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UseRealmDefaultLocaleFallback != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "useRealmDefaultLocaleFallback", runtime.ParamLocationQuery, *params.UseRealmDefaultLocaleFallback); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostLocalizationRequest calls the generic PostLocalization builder with application/json body
func NewPostLocalizationRequest(server string, realm string, locale string, body PostLocalizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostLocalizationRequestWithBody(server, realm, locale, "application/json", bodyReader)
}

// NewPostLocalizationRequestWithBody generates requests for PostLocalization with any type of body
func NewPostLocalizationRequestWithBody(server string, realm string, locale string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "locale", runtime.ParamLocationPath, locale)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/localization/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteLocalizationByRealmByLocaleByKeyRequest generates requests for DeleteLocalizationByRealmByLocaleByKey
func NewDeleteLocalizationByRealmByLocaleByKeyRequest(server string, realm string, locale string, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "locale", runtime.ParamLocationPath, locale)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/localization/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLocalizationByRealmByLocaleByKeyRequest generates requests for GetLocalizationByRealmByLocaleByKey
func NewGetLocalizationByRealmByLocaleByKeyRequest(server string, realm string, locale string, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "locale", runtime.ParamLocationPath, locale)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/localization/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutLocalizationRequest calls the generic PutLocalization builder with application/json body
func NewPutLocalizationRequest(server string, realm string, locale string, key string, body PutLocalizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutLocalizationRequestWithBody(server, realm, locale, key, "application/json", bodyReader)
}

// NewPutLocalizationRequestWithBody generates requests for PutLocalization with any type of body
func NewPutLocalizationRequestWithBody(server string, realm string, locale string, key string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "locale", runtime.ParamLocationPath, locale)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/localization/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostLogoutAllRequest generates requests for PostLogoutAll
func NewPostLogoutAllRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/logout-all", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPartialExportRequest generates requests for PostPartialExport
func NewPostPartialExportRequest(server string, realm string, params *PostPartialExportParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/partial-export", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ExportClients != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exportClients", runtime.ParamLocationQuery, *params.ExportClients); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExportGroupsAndRoles != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exportGroupsAndRoles", runtime.ParamLocationQuery, *params.ExportGroupsAndRoles); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPartialImportRequest calls the generic PostPartialImport builder with application/json body
func NewPostPartialImportRequest(server string, realm string, body PostPartialImportJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPartialImportRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostPartialImportRequestWithBody generates requests for PostPartialImport with any type of body
func NewPostPartialImportRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/partialImport", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPushRevocationByRealmRequest generates requests for PostPushRevocationByRealm
func NewPostPushRevocationByRealmRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/push-revocation", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRolesByRealmRequest generates requests for GetRolesByRealm
func NewGetRolesByRealmRequest(server string, realm string, params *GetRolesByRealmParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRolesByRealmRequest calls the generic PostRolesByRealm builder with application/json body
func NewPostRolesByRealmRequest(server string, realm string, body PostRolesByRealmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRolesByRealmRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostRolesByRealmRequestWithBody generates requests for PostRolesByRealm with any type of body
func NewPostRolesByRealmRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRolesByIdRequest generates requests for DeleteRolesById
func NewDeleteRolesByIdRequest(server string, realm string, roleId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles-by-id/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRolesByIdRequest generates requests for GetRolesById
func NewGetRolesByIdRequest(server string, realm string, roleId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles-by-id/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRolesByIdRequest calls the generic PutRolesById builder with application/json body
func NewPutRolesByIdRequest(server string, realm string, roleId string, body PutRolesByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRolesByIdRequestWithBody(server, realm, roleId, "application/json", bodyReader)
}

// NewPutRolesByIdRequestWithBody generates requests for PutRolesById with any type of body
func NewPutRolesByIdRequestWithBody(server string, realm string, roleId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles-by-id/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRolesByIdCompositesRequest calls the generic DeleteRolesByIdComposites builder with application/json body
func NewDeleteRolesByIdCompositesRequest(server string, realm string, roleId string, body DeleteRolesByIdCompositesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteRolesByIdCompositesRequestWithBody(server, realm, roleId, "application/json", bodyReader)
}

// NewDeleteRolesByIdCompositesRequestWithBody generates requests for DeleteRolesByIdComposites with any type of body
func NewDeleteRolesByIdCompositesRequestWithBody(server string, realm string, roleId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles-by-id/%s/composites", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRolesByIdCompositesRequest generates requests for GetRolesByIdComposites
func NewGetRolesByIdCompositesRequest(server string, realm string, roleId string, params *GetRolesByIdCompositesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles-by-id/%s/composites", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRolesByIdCompositesRequest calls the generic PostRolesByIdComposites builder with application/json body
func NewPostRolesByIdCompositesRequest(server string, realm string, roleId string, body PostRolesByIdCompositesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRolesByIdCompositesRequestWithBody(server, realm, roleId, "application/json", bodyReader)
}

// NewPostRolesByIdCompositesRequestWithBody generates requests for PostRolesByIdComposites with any type of body
func NewPostRolesByIdCompositesRequestWithBody(server string, realm string, roleId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles-by-id/%s/composites", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRolesByIdCompositesClientRequest generates requests for GetRolesByIdCompositesClient
func NewGetRolesByIdCompositesClientRequest(server string, realm string, roleId string, clientUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "clientUuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles-by-id/%s/composites/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRolesByIdCompositesRealmRequest generates requests for GetRolesByIdCompositesRealm
func NewGetRolesByIdCompositesRealmRequest(server string, realm string, roleId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles-by-id/%s/composites/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRolesByIdManagementPermissionsRequest generates requests for GetRolesByIdManagementPermissions
func NewGetRolesByIdManagementPermissionsRequest(server string, realm string, roleId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles-by-id/%s/management/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRolesByIdManagementPermissionsRequest calls the generic PutRolesByIdManagementPermissions builder with application/json body
func NewPutRolesByIdManagementPermissionsRequest(server string, realm string, roleId string, body PutRolesByIdManagementPermissionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRolesByIdManagementPermissionsRequestWithBody(server, realm, roleId, "application/json", bodyReader)
}

// NewPutRolesByIdManagementPermissionsRequestWithBody generates requests for PutRolesByIdManagementPermissions with any type of body
func NewPutRolesByIdManagementPermissionsRequestWithBody(server string, realm string, roleId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles-by-id/%s/management/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRoleByRealmByRoleNameRequest generates requests for DeleteRoleByRealmByRoleName
func NewDeleteRoleByRealmByRoleNameRequest(server string, realm string, roleName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRoleByRealmByRoleNameRequest generates requests for GetRoleByRealmByRoleName
func NewGetRoleByRealmByRoleNameRequest(server string, realm string, roleName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRoleByRealmByRoleNameRequest calls the generic PutRoleByRealmByRoleName builder with application/json body
func NewPutRoleByRealmByRoleNameRequest(server string, realm string, roleName string, body PutRoleByRealmByRoleNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRoleByRealmByRoleNameRequestWithBody(server, realm, roleName, "application/json", bodyReader)
}

// NewPutRoleByRealmByRoleNameRequestWithBody generates requests for PutRoleByRealmByRoleName with any type of body
func NewPutRoleByRealmByRoleNameRequestWithBody(server string, realm string, roleName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRoleCompositesByRealmByRoleNameRequest calls the generic DeleteRoleCompositesByRealmByRoleName builder with application/json body
func NewDeleteRoleCompositesByRealmByRoleNameRequest(server string, realm string, roleName string, body DeleteRoleCompositesByRealmByRoleNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteRoleCompositesByRealmByRoleNameRequestWithBody(server, realm, roleName, "application/json", bodyReader)
}

// NewDeleteRoleCompositesByRealmByRoleNameRequestWithBody generates requests for DeleteRoleCompositesByRealmByRoleName with any type of body
func NewDeleteRoleCompositesByRealmByRoleNameRequestWithBody(server string, realm string, roleName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles/%s/composites", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRoleCompositesByRealmByRoleNameRequest generates requests for GetRoleCompositesByRealmByRoleName
func NewGetRoleCompositesByRealmByRoleNameRequest(server string, realm string, roleName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles/%s/composites", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRoleCompositesByRealmByRoleNameRequest calls the generic PostRoleCompositesByRealmByRoleName builder with application/json body
func NewPostRoleCompositesByRealmByRoleNameRequest(server string, realm string, roleName string, body PostRoleCompositesByRealmByRoleNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRoleCompositesByRealmByRoleNameRequestWithBody(server, realm, roleName, "application/json", bodyReader)
}

// NewPostRoleCompositesByRealmByRoleNameRequestWithBody generates requests for PostRoleCompositesByRealmByRoleName with any type of body
func NewPostRoleCompositesByRealmByRoleNameRequestWithBody(server string, realm string, roleName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles/%s/composites", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRoleCompositesClientByRealmByRoleNameByClientUuidRequest generates requests for GetRoleCompositesClientByRealmByRoleNameByClientUuid
func NewGetRoleCompositesClientByRealmByRoleNameByClientUuidRequest(server string, realm string, roleName string, clientUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "clientUuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles/%s/composites/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRoleCompositesRealmByRealmByRoleNameRequest generates requests for GetRoleCompositesRealmByRealmByRoleName
func NewGetRoleCompositesRealmByRealmByRoleNameRequest(server string, realm string, roleName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles/%s/composites/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRoleGroupsByRealmByRoleNameRequest generates requests for GetRoleGroupsByRealmByRoleName
func NewGetRoleGroupsByRealmByRoleNameRequest(server string, realm string, roleName string, params *GetRoleGroupsByRealmByRoleNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles/%s/groups", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRoleManagementPermissionsByRealmByRoleNameRequest generates requests for GetRoleManagementPermissionsByRealmByRoleName
func NewGetRoleManagementPermissionsByRealmByRoleNameRequest(server string, realm string, roleName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles/%s/management/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRoleManagementPermissionsByRealmByRoleNameRequest calls the generic PutRoleManagementPermissionsByRealmByRoleName builder with application/json body
func NewPutRoleManagementPermissionsByRealmByRoleNameRequest(server string, realm string, roleName string, body PutRoleManagementPermissionsByRealmByRoleNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRoleManagementPermissionsByRealmByRoleNameRequestWithBody(server, realm, roleName, "application/json", bodyReader)
}

// NewPutRoleManagementPermissionsByRealmByRoleNameRequestWithBody generates requests for PutRoleManagementPermissionsByRealmByRoleName with any type of body
func NewPutRoleManagementPermissionsByRealmByRoleNameRequestWithBody(server string, realm string, roleName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles/%s/management/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRoleUsersByRealmByRoleNameRequest generates requests for GetRoleUsersByRealmByRoleName
func NewGetRoleUsersByRealmByRoleNameRequest(server string, realm string, roleName string, params *GetRoleUsersByRealmByRoleNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles/%s/users", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteSessionRequest generates requests for DeleteSession
func NewDeleteSessionRequest(server string, realm string, session string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "session", runtime.ParamLocationPath, session)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/sessions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTestSmtpConnectionRequest calls the generic PostTestSmtpConnection builder with application/json body
func NewPostTestSmtpConnectionRequest(server string, realm string, body PostTestSmtpConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTestSmtpConnectionRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostTestSmtpConnectionRequestWithBody generates requests for PostTestSmtpConnection with any type of body
func NewPostTestSmtpConnectionRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/testSMTPConnection", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUsersByRealmRequest generates requests for GetUsersByRealm
func NewGetUsersByRealmRequest(server string, realm string, params *GetUsersByRealmParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Email != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EmailVerified != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "emailVerified", runtime.ParamLocationQuery, *params.EmailVerified); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Enabled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, *params.Enabled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Exact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exact", runtime.ParamLocationQuery, *params.Exact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FirstName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "firstName", runtime.ParamLocationQuery, *params.FirstName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdpAlias != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "idpAlias", runtime.ParamLocationQuery, *params.IdpAlias); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdpUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "idpUserId", runtime.ParamLocationQuery, *params.IdpUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lastName", runtime.ParamLocationQuery, *params.LastName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Username != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, *params.Username); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUsersRequest calls the generic PostUsers builder with application/json body
func NewPostUsersRequest(server string, realm string, body PostUsersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUsersRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostUsersRequestWithBody generates requests for PostUsers with any type of body
func NewPostUsersRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUsersManagementPermissionsRequest generates requests for GetUsersManagementPermissions
func NewGetUsersManagementPermissionsRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users-management-permissions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutUsersManagementPermissionsRequest calls the generic PutUsersManagementPermissions builder with application/json body
func NewPutUsersManagementPermissionsRequest(server string, realm string, body PutUsersManagementPermissionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutUsersManagementPermissionsRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPutUsersManagementPermissionsRequestWithBody generates requests for PutUsersManagementPermissions with any type of body
func NewPutUsersManagementPermissionsRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users-management-permissions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUsersCountRequest generates requests for GetUsersCount
func NewGetUsersCountRequest(server string, realm string, params *GetUsersCountParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/count", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Email != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EmailVerified != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "emailVerified", runtime.ParamLocationQuery, *params.EmailVerified); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Enabled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, *params.Enabled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FirstName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "firstName", runtime.ParamLocationQuery, *params.FirstName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lastName", runtime.ParamLocationQuery, *params.LastName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Username != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, *params.Username); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProfileRequest generates requests for GetProfile
func NewGetProfileRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/profile", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutProfileRequest calls the generic PutProfile builder with application/json body
func NewPutProfileRequest(server string, realm string, body PutProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutProfileRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPutProfileRequestWithBody generates requests for PutProfile with any type of body
func NewPutProfileRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/profile", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserByRealmByIdRequest generates requests for DeleteUserByRealmById
func NewDeleteUserByRealmByIdRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserByRealmByIdRequest generates requests for GetUserByRealmById
func NewGetUserByRealmByIdRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutUserRequest calls the generic PutUser builder with application/json body
func NewPutUserRequest(server string, realm string, id string, body PutUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutUserRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPutUserRequestWithBody generates requests for PutUser with any type of body
func NewPutUserRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetConfiguredUserStorageCredentialTypesRequest generates requests for GetConfiguredUserStorageCredentialTypes
func NewGetConfiguredUserStorageCredentialTypesRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/configured-user-storage-credential-types", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConsentsRequest generates requests for GetConsents
func NewGetConsentsRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/consents", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteConsentRequest generates requests for DeleteConsent
func NewDeleteConsentRequest(server string, realm string, id string, client string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/consents/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCredentialsRequest generates requests for GetCredentials
func NewGetCredentialsRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/credentials", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteCredentialRequest generates requests for DeleteCredential
func NewDeleteCredentialRequest(server string, realm string, id string, credentialId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "credentialId", runtime.ParamLocationPath, credentialId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/credentials/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMoveAfterRequest generates requests for PostMoveAfter
func NewPostMoveAfterRequest(server string, realm string, id string, credentialId string, newPreviousCredentialId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "credentialId", runtime.ParamLocationPath, credentialId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "newPreviousCredentialId", runtime.ParamLocationPath, newPreviousCredentialId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/credentials/%s/moveAfter/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMoveToFirstRequest generates requests for PostMoveToFirst
func NewPostMoveToFirstRequest(server string, realm string, id string, credentialId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "credentialId", runtime.ParamLocationPath, credentialId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/credentials/%s/moveToFirst", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutUserLabelRequest calls the generic PutUserLabel builder with application/json body
func NewPutUserLabelRequest(server string, realm string, id string, credentialId string, body PutUserLabelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutUserLabelRequestWithBody(server, realm, id, credentialId, "application/json", bodyReader)
}

// NewPutUserLabelRequestWithBody generates requests for PutUserLabel with any type of body
func NewPutUserLabelRequestWithBody(server string, realm string, id string, credentialId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "credentialId", runtime.ParamLocationPath, credentialId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/credentials/%s/userLabel", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutDisableCredentialTypesRequest calls the generic PutDisableCredentialTypes builder with application/json body
func NewPutDisableCredentialTypesRequest(server string, realm string, id string, body PutDisableCredentialTypesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutDisableCredentialTypesRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPutDisableCredentialTypesRequestWithBody generates requests for PutDisableCredentialTypes with any type of body
func NewPutDisableCredentialTypesRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/disable-credential-types", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutExecuteActionsEmailRequest calls the generic PutExecuteActionsEmail builder with application/json body
func NewPutExecuteActionsEmailRequest(server string, realm string, id string, params *PutExecuteActionsEmailParams, body PutExecuteActionsEmailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutExecuteActionsEmailRequestWithBody(server, realm, id, params, "application/json", bodyReader)
}

// NewPutExecuteActionsEmailRequestWithBody generates requests for PutExecuteActionsEmail with any type of body
func NewPutExecuteActionsEmailRequestWithBody(server string, realm string, id string, params *PutExecuteActionsEmailParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/execute-actions-email", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ClientId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "client_id", runtime.ParamLocationQuery, *params.ClientId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lifespan != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lifespan", runtime.ParamLocationQuery, *params.Lifespan); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RedirectUri != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "redirect_uri", runtime.ParamLocationQuery, *params.RedirectUri); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetFederatedIdentityRequest generates requests for GetFederatedIdentity
func NewGetFederatedIdentityRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/federated-identity", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteFederatedIdentityRequest generates requests for DeleteFederatedIdentity
func NewDeleteFederatedIdentityRequest(server string, realm string, id string, provider string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "provider", runtime.ParamLocationPath, provider)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/federated-identity/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostFederatedIdentityRequest generates requests for PostFederatedIdentity
func NewPostFederatedIdentityRequest(server string, realm string, id string, provider string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "provider", runtime.ParamLocationPath, provider)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/federated-identity/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserGroupsRequest generates requests for GetUserGroups
func NewGetUserGroupsRequest(server string, realm string, id string, params *GetUserGroupsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/groups", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserGroupsCountRequest generates requests for GetUserGroupsCount
func NewGetUserGroupsCountRequest(server string, realm string, id string, params *GetUserGroupsCountParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/groups/count", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteUserGroupRequest generates requests for DeleteUserGroup
func NewDeleteUserGroupRequest(server string, realm string, id string, groupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/groups/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutUserGroupRequest generates requests for PutUserGroup
func NewPutUserGroupRequest(server string, realm string, id string, groupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/groups/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostImpersonationRequest generates requests for PostImpersonation
func NewPostImpersonationRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/impersonation", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostLogoutRequest generates requests for PostLogout
func NewPostLogoutRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/logout", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOfflineSessionRequest generates requests for GetOfflineSession
func NewGetOfflineSessionRequest(server string, realm string, id string, clientUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "clientUuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/offline-sessions/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutResetPasswordRequest calls the generic PutResetPassword builder with application/json body
func NewPutResetPasswordRequest(server string, realm string, id string, body PutResetPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutResetPasswordRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPutResetPasswordRequestWithBody generates requests for PutResetPassword with any type of body
func NewPutResetPasswordRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/reset-password", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutResetPasswordEmailRequest generates requests for PutResetPasswordEmail
func NewPutResetPasswordEmailRequest(server string, realm string, id string, params *PutResetPasswordEmailParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/reset-password-email", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ClientId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "client_id", runtime.ParamLocationQuery, *params.ClientId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RedirectUri != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "redirect_uri", runtime.ParamLocationQuery, *params.RedirectUri); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRoleMappingsRequest generates requests for GetUserRoleMappings
func NewGetUserRoleMappingsRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/role-mappings", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteUserRoleMappingsClientRequest calls the generic DeleteUserRoleMappingsClient builder with application/json body
func NewDeleteUserRoleMappingsClientRequest(server string, realm string, id string, client string, body DeleteUserRoleMappingsClientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteUserRoleMappingsClientRequestWithBody(server, realm, id, client, "application/json", bodyReader)
}

// NewDeleteUserRoleMappingsClientRequestWithBody generates requests for DeleteUserRoleMappingsClient with any type of body
func NewDeleteUserRoleMappingsClientRequestWithBody(server string, realm string, id string, client string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/role-mappings/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserRoleMappingsClientRequest generates requests for GetUserRoleMappingsClient
func NewGetUserRoleMappingsClientRequest(server string, realm string, id string, client string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/role-mappings/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserRoleMappingsClientRequest calls the generic PostUserRoleMappingsClient builder with application/json body
func NewPostUserRoleMappingsClientRequest(server string, realm string, id string, client string, body PostUserRoleMappingsClientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserRoleMappingsClientRequestWithBody(server, realm, id, client, "application/json", bodyReader)
}

// NewPostUserRoleMappingsClientRequestWithBody generates requests for PostUserRoleMappingsClient with any type of body
func NewPostUserRoleMappingsClientRequestWithBody(server string, realm string, id string, client string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/role-mappings/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserRoleMappingsClientAvailableRequest generates requests for GetUserRoleMappingsClientAvailable
func NewGetUserRoleMappingsClientAvailableRequest(server string, realm string, id string, client string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/role-mappings/clients/%s/available", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRoleMappingsClientCompositeRequest generates requests for GetUserRoleMappingsClientComposite
func NewGetUserRoleMappingsClientCompositeRequest(server string, realm string, id string, client string, params *GetUserRoleMappingsClientCompositeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/role-mappings/clients/%s/composite", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteUserRoleMappingsRealmRequest calls the generic DeleteUserRoleMappingsRealm builder with application/json body
func NewDeleteUserRoleMappingsRealmRequest(server string, realm string, id string, body DeleteUserRoleMappingsRealmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteUserRoleMappingsRealmRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewDeleteUserRoleMappingsRealmRequestWithBody generates requests for DeleteUserRoleMappingsRealm with any type of body
func NewDeleteUserRoleMappingsRealmRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/role-mappings/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserRoleMappingsRealmRequest generates requests for GetUserRoleMappingsRealm
func NewGetUserRoleMappingsRealmRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/role-mappings/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserRoleMappingsRealmRequest calls the generic PostUserRoleMappingsRealm builder with application/json body
func NewPostUserRoleMappingsRealmRequest(server string, realm string, id string, body PostUserRoleMappingsRealmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserRoleMappingsRealmRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPostUserRoleMappingsRealmRequestWithBody generates requests for PostUserRoleMappingsRealm with any type of body
func NewPostUserRoleMappingsRealmRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/role-mappings/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserRoleMappingsRealmAvailableRequest generates requests for GetUserRoleMappingsRealmAvailable
func NewGetUserRoleMappingsRealmAvailableRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/role-mappings/realm/available", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRoleMappingsRealmCompositeRequest generates requests for GetUserRoleMappingsRealmComposite
func NewGetUserRoleMappingsRealmCompositeRequest(server string, realm string, id string, params *GetUserRoleMappingsRealmCompositeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/role-mappings/realm/composite", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSendVerifyEmailRequest generates requests for PutSendVerifyEmail
func NewPutSendVerifyEmailRequest(server string, realm string, id string, params *PutSendVerifyEmailParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/send-verify-email", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ClientId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "client_id", runtime.ParamLocationQuery, *params.ClientId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RedirectUri != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "redirect_uri", runtime.ParamLocationQuery, *params.RedirectUri); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSessionsRequest generates requests for GetSessions
func NewGetSessionsRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/sessions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetWithResponse request
	GetWithResponse(ctx context.Context, params *GetParams, reqEditors ...RequestEditorFn) (*GetResponse, error)

	// PostWithBodyWithResponse request with any body
	PostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostResponse, error)

	PostWithResponse(ctx context.Context, body PostJSONRequestBody, reqEditors ...RequestEditorFn) (*PostResponse, error)

	// DeleteByRealmWithResponse request
	DeleteByRealmWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*DeleteByRealmResponse, error)

	// GetByRealmWithResponse request
	GetByRealmWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetByRealmResponse, error)

	// PutByRealmWithBodyWithResponse request with any body
	PutByRealmWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutByRealmResponse, error)

	PutByRealmWithResponse(ctx context.Context, realm string, body PutByRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*PutByRealmResponse, error)

	// DeleteAdminEventsWithResponse request
	DeleteAdminEventsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*DeleteAdminEventsResponse, error)

	// GetAdminEventsWithResponse request
	GetAdminEventsWithResponse(ctx context.Context, realm string, params *GetAdminEventsParams, reqEditors ...RequestEditorFn) (*GetAdminEventsResponse, error)

	// DeleteUsersWithResponse request
	DeleteUsersWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*DeleteUsersResponse, error)

	// DeleteBruteForceUserWithResponse request
	DeleteBruteForceUserWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*DeleteBruteForceUserResponse, error)

	// GetBruteForceUserWithResponse request
	GetBruteForceUserWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*GetBruteForceUserResponse, error)

	// GetAuthenticatorProvidersWithResponse request
	GetAuthenticatorProvidersWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAuthenticatorProvidersResponse, error)

	// GetClientAuthenticatorProvidersWithResponse request
	GetClientAuthenticatorProvidersWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetClientAuthenticatorProvidersResponse, error)

	// PostAuthenticationConfigWithBodyWithResponse request with any body
	PostAuthenticationConfigWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthenticationConfigResponse, error)

	PostAuthenticationConfigWithResponse(ctx context.Context, realm string, body PostAuthenticationConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthenticationConfigResponse, error)

	// GetConfigDescriptionWithResponse request
	GetConfigDescriptionWithResponse(ctx context.Context, realm string, providerId string, reqEditors ...RequestEditorFn) (*GetConfigDescriptionResponse, error)

	// DeleteConfigWithResponse request
	DeleteConfigWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*DeleteConfigResponse, error)

	// GetAuthenticationConfigWithResponse request
	GetAuthenticationConfigWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetAuthenticationConfigResponse, error)

	// PutAuthenticationConfigWithBodyWithResponse request with any body
	PutAuthenticationConfigWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAuthenticationConfigResponse, error)

	PutAuthenticationConfigWithResponse(ctx context.Context, realm string, id string, body PutAuthenticationConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAuthenticationConfigResponse, error)

	// PostExecutionsWithBodyWithResponse request with any body
	PostExecutionsWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostExecutionsResponse, error)

	PostExecutionsWithResponse(ctx context.Context, realm string, body PostExecutionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostExecutionsResponse, error)

	// DeleteExecutionWithResponse request
	DeleteExecutionWithResponse(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*DeleteExecutionResponse, error)

	// GetExecutionWithResponse request
	GetExecutionWithResponse(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*GetExecutionResponse, error)

	// PostExecutionConfigWithBodyWithResponse request with any body
	PostExecutionConfigWithBodyWithResponse(ctx context.Context, realm string, executionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostExecutionConfigResponse, error)

	PostExecutionConfigWithResponse(ctx context.Context, realm string, executionId string, body PostExecutionConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*PostExecutionConfigResponse, error)

	// GetExecutionConfigWithResponse request
	GetExecutionConfigWithResponse(ctx context.Context, realm string, executionId string, id string, reqEditors ...RequestEditorFn) (*GetExecutionConfigResponse, error)

	// PostExecutionLowerPriorityWithResponse request
	PostExecutionLowerPriorityWithResponse(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*PostExecutionLowerPriorityResponse, error)

	// PostExecutionRaisePriorityWithResponse request
	PostExecutionRaisePriorityWithResponse(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*PostExecutionRaisePriorityResponse, error)

	// GetFlowsWithResponse request
	GetFlowsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetFlowsResponse, error)

	// PostFlowsWithBodyWithResponse request with any body
	PostFlowsWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFlowsResponse, error)

	PostFlowsWithResponse(ctx context.Context, realm string, body PostFlowsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFlowsResponse, error)

	// PostCopyWithBodyWithResponse request with any body
	PostCopyWithBodyWithResponse(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCopyResponse, error)

	PostCopyWithResponse(ctx context.Context, realm string, flowAlias string, body PostCopyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCopyResponse, error)

	// GetExecutionsWithResponse request
	GetExecutionsWithResponse(ctx context.Context, realm string, flowAlias string, reqEditors ...RequestEditorFn) (*GetExecutionsResponse, error)

	// PutExecutionsWithBodyWithResponse request with any body
	PutExecutionsWithBodyWithResponse(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutExecutionsResponse, error)

	PutExecutionsWithResponse(ctx context.Context, realm string, flowAlias string, body PutExecutionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutExecutionsResponse, error)

	// PostExecutionWithBodyWithResponse request with any body
	PostExecutionWithBodyWithResponse(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostExecutionResponse, error)

	PostExecutionWithResponse(ctx context.Context, realm string, flowAlias string, body PostExecutionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostExecutionResponse, error)

	// PostFlowWithBodyWithResponse request with any body
	PostFlowWithBodyWithResponse(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFlowResponse, error)

	PostFlowWithResponse(ctx context.Context, realm string, flowAlias string, body PostFlowJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFlowResponse, error)

	// DeleteFlowWithResponse request
	DeleteFlowWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*DeleteFlowResponse, error)

	// GetFlowWithResponse request
	GetFlowWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetFlowResponse, error)

	// PutFlowWithBodyWithResponse request with any body
	PutFlowWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutFlowResponse, error)

	PutFlowWithResponse(ctx context.Context, realm string, id string, body PutFlowJSONRequestBody, reqEditors ...RequestEditorFn) (*PutFlowResponse, error)

	// GetFormActionProvidersWithResponse request
	GetFormActionProvidersWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetFormActionProvidersResponse, error)

	// GetFormProvidersWithResponse request
	GetFormProvidersWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetFormProvidersResponse, error)

	// GetPerClientConfigDescriptionWithResponse request
	GetPerClientConfigDescriptionWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetPerClientConfigDescriptionResponse, error)

	// PostRegisterRequiredActionWithBodyWithResponse request with any body
	PostRegisterRequiredActionWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRegisterRequiredActionResponse, error)

	PostRegisterRequiredActionWithResponse(ctx context.Context, realm string, body PostRegisterRequiredActionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRegisterRequiredActionResponse, error)

	// GetRequiredActionsWithResponse request
	GetRequiredActionsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetRequiredActionsResponse, error)

	// DeleteRequiredActionWithResponse request
	DeleteRequiredActionWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*DeleteRequiredActionResponse, error)

	// GetRequiredActionWithResponse request
	GetRequiredActionWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*GetRequiredActionResponse, error)

	// PutRequiredActionWithBodyWithResponse request with any body
	PutRequiredActionWithBodyWithResponse(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRequiredActionResponse, error)

	PutRequiredActionWithResponse(ctx context.Context, realm string, alias string, body PutRequiredActionJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRequiredActionResponse, error)

	// PostRequiredActionLowerPriorityWithResponse request
	PostRequiredActionLowerPriorityWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*PostRequiredActionLowerPriorityResponse, error)

	// PostRequiredActionRaisePriorityWithResponse request
	PostRequiredActionRaisePriorityWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*PostRequiredActionRaisePriorityResponse, error)

	// GetUnregisteredRequiredActionsWithResponse request
	GetUnregisteredRequiredActionsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetUnregisteredRequiredActionsResponse, error)

	// PostClientDescriptionConverterWithBodyWithResponse request with any body
	PostClientDescriptionConverterWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientDescriptionConverterResponse, error)

	PostClientDescriptionConverterWithResponse(ctx context.Context, realm string, body PostClientDescriptionConverterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientDescriptionConverterResponse, error)

	// GetPoliciesWithResponse request
	GetPoliciesWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetPoliciesResponse, error)

	// PutPoliciesWithBodyWithResponse request with any body
	PutPoliciesWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPoliciesResponse, error)

	PutPoliciesWithResponse(ctx context.Context, realm string, body PutPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPoliciesResponse, error)

	// GetProfilesWithResponse request
	GetProfilesWithResponse(ctx context.Context, realm string, params *GetProfilesParams, reqEditors ...RequestEditorFn) (*GetProfilesResponse, error)

	// PutProfilesWithBodyWithResponse request with any body
	PutProfilesWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutProfilesResponse, error)

	PutProfilesWithResponse(ctx context.Context, realm string, body PutProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutProfilesResponse, error)

	// GetProvidersWithResponse request
	GetProvidersWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetProvidersResponse, error)

	// GetClientScopesWithResponse request
	GetClientScopesWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetClientScopesResponse, error)

	// PostClientScopesWithBodyWithResponse request with any body
	PostClientScopesWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientScopesResponse, error)

	PostClientScopesWithResponse(ctx context.Context, realm string, body PostClientScopesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientScopesResponse, error)

	// DeleteClientScopeProtocolMappersModelWithResponse request
	DeleteClientScopeProtocolMappersModelWithResponse(ctx context.Context, realm string, id1 string, id2 string, reqEditors ...RequestEditorFn) (*DeleteClientScopeProtocolMappersModelResponse, error)

	// GetClientScopeProtocolMappersModelWithResponse request
	GetClientScopeProtocolMappersModelWithResponse(ctx context.Context, realm string, id1 string, id2 string, reqEditors ...RequestEditorFn) (*GetClientScopeProtocolMappersModelResponse, error)

	// PutClientScopeProtocolMappersModelWithBodyWithResponse request with any body
	PutClientScopeProtocolMappersModelWithBodyWithResponse(ctx context.Context, realm string, id1 string, id2 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutClientScopeProtocolMappersModelResponse, error)

	PutClientScopeProtocolMappersModelWithResponse(ctx context.Context, realm string, id1 string, id2 string, body PutClientScopeProtocolMappersModelJSONRequestBody, reqEditors ...RequestEditorFn) (*PutClientScopeProtocolMappersModelResponse, error)

	// DeleteClientScopeWithResponse request
	DeleteClientScopeWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*DeleteClientScopeResponse, error)

	// GetClientScopeWithResponse request
	GetClientScopeWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetClientScopeResponse, error)

	// PutClientScopeWithBodyWithResponse request with any body
	PutClientScopeWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutClientScopeResponse, error)

	PutClientScopeWithResponse(ctx context.Context, realm string, id string, body PutClientScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutClientScopeResponse, error)

	// PostClientScopeProtocolMappersAddModelsWithBodyWithResponse request with any body
	PostClientScopeProtocolMappersAddModelsWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientScopeProtocolMappersAddModelsResponse, error)

	PostClientScopeProtocolMappersAddModelsWithResponse(ctx context.Context, realm string, id string, body PostClientScopeProtocolMappersAddModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientScopeProtocolMappersAddModelsResponse, error)

	// GetClientScopeProtocolMappersModelsWithResponse request
	GetClientScopeProtocolMappersModelsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetClientScopeProtocolMappersModelsResponse, error)

	// PostClientScopeProtocolMappersModelsWithBodyWithResponse request with any body
	PostClientScopeProtocolMappersModelsWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientScopeProtocolMappersModelsResponse, error)

	PostClientScopeProtocolMappersModelsWithResponse(ctx context.Context, realm string, id string, body PostClientScopeProtocolMappersModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientScopeProtocolMappersModelsResponse, error)

	// GetClientScopeProtocolMappersProtocolWithResponse request
	GetClientScopeProtocolMappersProtocolWithResponse(ctx context.Context, realm string, id string, protocol string, reqEditors ...RequestEditorFn) (*GetClientScopeProtocolMappersProtocolResponse, error)

	// GetClientScopeScopeMappingsWithResponse request
	GetClientScopeScopeMappingsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetClientScopeScopeMappingsResponse, error)

	// DeleteClientScopeScopeMappingsClientWithBodyWithResponse request with any body
	DeleteClientScopeScopeMappingsClientWithBodyWithResponse(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteClientScopeScopeMappingsClientResponse, error)

	DeleteClientScopeScopeMappingsClientWithResponse(ctx context.Context, realm string, id string, client string, body DeleteClientScopeScopeMappingsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteClientScopeScopeMappingsClientResponse, error)

	// GetClientScopeScopeMappingsClientWithResponse request
	GetClientScopeScopeMappingsClientWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*GetClientScopeScopeMappingsClientResponse, error)

	// PostClientScopeScopeMappingsClientWithBodyWithResponse request with any body
	PostClientScopeScopeMappingsClientWithBodyWithResponse(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientScopeScopeMappingsClientResponse, error)

	PostClientScopeScopeMappingsClientWithResponse(ctx context.Context, realm string, id string, client string, body PostClientScopeScopeMappingsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientScopeScopeMappingsClientResponse, error)

	// GetClientScopeScopeMappingsClientAvailableWithResponse request
	GetClientScopeScopeMappingsClientAvailableWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*GetClientScopeScopeMappingsClientAvailableResponse, error)

	// GetClientScopeScopeMappingsClientCompositeWithResponse request
	GetClientScopeScopeMappingsClientCompositeWithResponse(ctx context.Context, realm string, id string, client string, params *GetClientScopeScopeMappingsClientCompositeParams, reqEditors ...RequestEditorFn) (*GetClientScopeScopeMappingsClientCompositeResponse, error)

	// DeleteClientScopeScopeMappingsRealmWithBodyWithResponse request with any body
	DeleteClientScopeScopeMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteClientScopeScopeMappingsRealmResponse, error)

	DeleteClientScopeScopeMappingsRealmWithResponse(ctx context.Context, realm string, id string, body DeleteClientScopeScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteClientScopeScopeMappingsRealmResponse, error)

	// GetClientScopeScopeMappingsRealmWithResponse request
	GetClientScopeScopeMappingsRealmWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetClientScopeScopeMappingsRealmResponse, error)

	// PostClientScopeScopeMappingsRealmWithBodyWithResponse request with any body
	PostClientScopeScopeMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientScopeScopeMappingsRealmResponse, error)

	PostClientScopeScopeMappingsRealmWithResponse(ctx context.Context, realm string, id string, body PostClientScopeScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientScopeScopeMappingsRealmResponse, error)

	// GetClientScopeScopeMappingsRealmAvailableWithResponse request
	GetClientScopeScopeMappingsRealmAvailableWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetClientScopeScopeMappingsRealmAvailableResponse, error)

	// GetClientScopeScopeMappingsRealmCompositeWithResponse request
	GetClientScopeScopeMappingsRealmCompositeWithResponse(ctx context.Context, realm string, id string, params *GetClientScopeScopeMappingsRealmCompositeParams, reqEditors ...RequestEditorFn) (*GetClientScopeScopeMappingsRealmCompositeResponse, error)

	// GetClientSessionStatsWithResponse request
	GetClientSessionStatsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetClientSessionStatsResponse, error)

	// GetClientTemplatesWithResponse request
	GetClientTemplatesWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetClientTemplatesResponse, error)

	// PostClientTemplatesWithBodyWithResponse request with any body
	PostClientTemplatesWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientTemplatesResponse, error)

	PostClientTemplatesWithResponse(ctx context.Context, realm string, body PostClientTemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientTemplatesResponse, error)

	// DeleteClientTemplateProtocolMappersModelWithResponse request
	DeleteClientTemplateProtocolMappersModelWithResponse(ctx context.Context, realm string, id1 string, id2 string, reqEditors ...RequestEditorFn) (*DeleteClientTemplateProtocolMappersModelResponse, error)

	// GetClientTemplateProtocolMappersModelWithResponse request
	GetClientTemplateProtocolMappersModelWithResponse(ctx context.Context, realm string, id1 string, id2 string, reqEditors ...RequestEditorFn) (*GetClientTemplateProtocolMappersModelResponse, error)

	// PutClientTemplateProtocolMappersModelWithBodyWithResponse request with any body
	PutClientTemplateProtocolMappersModelWithBodyWithResponse(ctx context.Context, realm string, id1 string, id2 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutClientTemplateProtocolMappersModelResponse, error)

	PutClientTemplateProtocolMappersModelWithResponse(ctx context.Context, realm string, id1 string, id2 string, body PutClientTemplateProtocolMappersModelJSONRequestBody, reqEditors ...RequestEditorFn) (*PutClientTemplateProtocolMappersModelResponse, error)

	// DeleteClientTemplateWithResponse request
	DeleteClientTemplateWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*DeleteClientTemplateResponse, error)

	// GetClientTemplateWithResponse request
	GetClientTemplateWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetClientTemplateResponse, error)

	// PutClientTemplateWithBodyWithResponse request with any body
	PutClientTemplateWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutClientTemplateResponse, error)

	PutClientTemplateWithResponse(ctx context.Context, realm string, id string, body PutClientTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*PutClientTemplateResponse, error)

	// PostClientTemplateProtocolMappersAddModelsWithBodyWithResponse request with any body
	PostClientTemplateProtocolMappersAddModelsWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientTemplateProtocolMappersAddModelsResponse, error)

	PostClientTemplateProtocolMappersAddModelsWithResponse(ctx context.Context, realm string, id string, body PostClientTemplateProtocolMappersAddModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientTemplateProtocolMappersAddModelsResponse, error)

	// GetClientTemplateProtocolMappersModelsWithResponse request
	GetClientTemplateProtocolMappersModelsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetClientTemplateProtocolMappersModelsResponse, error)

	// PostClientTemplateProtocolMappersModelsWithBodyWithResponse request with any body
	PostClientTemplateProtocolMappersModelsWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientTemplateProtocolMappersModelsResponse, error)

	PostClientTemplateProtocolMappersModelsWithResponse(ctx context.Context, realm string, id string, body PostClientTemplateProtocolMappersModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientTemplateProtocolMappersModelsResponse, error)

	// GetClientTemplateProtocolMappersProtocolWithResponse request
	GetClientTemplateProtocolMappersProtocolWithResponse(ctx context.Context, realm string, id string, protocol string, reqEditors ...RequestEditorFn) (*GetClientTemplateProtocolMappersProtocolResponse, error)

	// GetClientTemplateScopeMappingsWithResponse request
	GetClientTemplateScopeMappingsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetClientTemplateScopeMappingsResponse, error)

	// DeleteClientTemplateScopeMappingsClientWithBodyWithResponse request with any body
	DeleteClientTemplateScopeMappingsClientWithBodyWithResponse(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteClientTemplateScopeMappingsClientResponse, error)

	DeleteClientTemplateScopeMappingsClientWithResponse(ctx context.Context, realm string, id string, client string, body DeleteClientTemplateScopeMappingsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteClientTemplateScopeMappingsClientResponse, error)

	// GetClientTemplateScopeMappingsClientWithResponse request
	GetClientTemplateScopeMappingsClientWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*GetClientTemplateScopeMappingsClientResponse, error)

	// PostClientTemplateScopeMappingsClientWithBodyWithResponse request with any body
	PostClientTemplateScopeMappingsClientWithBodyWithResponse(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientTemplateScopeMappingsClientResponse, error)

	PostClientTemplateScopeMappingsClientWithResponse(ctx context.Context, realm string, id string, client string, body PostClientTemplateScopeMappingsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientTemplateScopeMappingsClientResponse, error)

	// GetClientTemplateScopeMappingsClientAvailableWithResponse request
	GetClientTemplateScopeMappingsClientAvailableWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*GetClientTemplateScopeMappingsClientAvailableResponse, error)

	// GetClientTemplateScopeMappingsClientCompositeWithResponse request
	GetClientTemplateScopeMappingsClientCompositeWithResponse(ctx context.Context, realm string, id string, client string, params *GetClientTemplateScopeMappingsClientCompositeParams, reqEditors ...RequestEditorFn) (*GetClientTemplateScopeMappingsClientCompositeResponse, error)

	// DeleteClientTemplateScopeMappingsRealmWithBodyWithResponse request with any body
	DeleteClientTemplateScopeMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteClientTemplateScopeMappingsRealmResponse, error)

	DeleteClientTemplateScopeMappingsRealmWithResponse(ctx context.Context, realm string, id string, body DeleteClientTemplateScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteClientTemplateScopeMappingsRealmResponse, error)

	// GetClientTemplateScopeMappingsRealmWithResponse request
	GetClientTemplateScopeMappingsRealmWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetClientTemplateScopeMappingsRealmResponse, error)

	// PostClientTemplateScopeMappingsRealmWithBodyWithResponse request with any body
	PostClientTemplateScopeMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientTemplateScopeMappingsRealmResponse, error)

	PostClientTemplateScopeMappingsRealmWithResponse(ctx context.Context, realm string, id string, body PostClientTemplateScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientTemplateScopeMappingsRealmResponse, error)

	// GetClientTemplateScopeMappingsRealmAvailableWithResponse request
	GetClientTemplateScopeMappingsRealmAvailableWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetClientTemplateScopeMappingsRealmAvailableResponse, error)

	// GetClientTemplateScopeMappingsRealmCompositeWithResponse request
	GetClientTemplateScopeMappingsRealmCompositeWithResponse(ctx context.Context, realm string, id string, params *GetClientTemplateScopeMappingsRealmCompositeParams, reqEditors ...RequestEditorFn) (*GetClientTemplateScopeMappingsRealmCompositeResponse, error)

	// GetClientsWithResponse request
	GetClientsWithResponse(ctx context.Context, realm string, params *GetClientsParams, reqEditors ...RequestEditorFn) (*GetClientsResponse, error)

	// PostClientsWithBodyWithResponse request with any body
	PostClientsWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientsResponse, error)

	PostClientsWithResponse(ctx context.Context, realm string, body PostClientsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientsResponse, error)

	// GetClientsInitialAccessWithResponse request
	GetClientsInitialAccessWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetClientsInitialAccessResponse, error)

	// PostClientsInitialAccessWithBodyWithResponse request with any body
	PostClientsInitialAccessWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientsInitialAccessResponse, error)

	PostClientsInitialAccessWithResponse(ctx context.Context, realm string, body PostClientsInitialAccessJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientsInitialAccessResponse, error)

	// DeleteClientsInitialAccesWithResponse request
	DeleteClientsInitialAccesWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*DeleteClientsInitialAccesResponse, error)

	// DeleteClientProtocolMappersModelWithResponse request
	DeleteClientProtocolMappersModelWithResponse(ctx context.Context, realm string, id1 string, id2 string, reqEditors ...RequestEditorFn) (*DeleteClientProtocolMappersModelResponse, error)

	// GetClientProtocolMappersModelWithResponse request
	GetClientProtocolMappersModelWithResponse(ctx context.Context, realm string, id1 string, id2 string, reqEditors ...RequestEditorFn) (*GetClientProtocolMappersModelResponse, error)

	// PutClientProtocolMappersModelWithBodyWithResponse request with any body
	PutClientProtocolMappersModelWithBodyWithResponse(ctx context.Context, realm string, id1 string, id2 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutClientProtocolMappersModelResponse, error)

	PutClientProtocolMappersModelWithResponse(ctx context.Context, realm string, id1 string, id2 string, body PutClientProtocolMappersModelJSONRequestBody, reqEditors ...RequestEditorFn) (*PutClientProtocolMappersModelResponse, error)

	// DeleteClientByRealmByIdWithResponse request
	DeleteClientByRealmByIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*DeleteClientByRealmByIdResponse, error)

	// GetClientByRealmByIdWithResponse request
	GetClientByRealmByIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetClientByRealmByIdResponse, error)

	// PutClientWithBodyWithResponse request with any body
	PutClientWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutClientResponse, error)

	PutClientWithResponse(ctx context.Context, realm string, id string, body PutClientJSONRequestBody, reqEditors ...RequestEditorFn) (*PutClientResponse, error)

	// GetCertificateWithResponse request
	GetCertificateWithResponse(ctx context.Context, realm string, id string, attr string, reqEditors ...RequestEditorFn) (*GetCertificateResponse, error)

	// PostDownloadWithBodyWithResponse request with any body
	PostDownloadWithBodyWithResponse(ctx context.Context, realm string, id string, attr string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDownloadResponse, error)

	PostDownloadWithResponse(ctx context.Context, realm string, id string, attr string, body PostDownloadJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDownloadResponse, error)

	// PostGenerateWithResponse request
	PostGenerateWithResponse(ctx context.Context, realm string, id string, attr string, reqEditors ...RequestEditorFn) (*PostGenerateResponse, error)

	// PostGenerateAndDownloadWithBodyWithResponse request with any body
	PostGenerateAndDownloadWithBodyWithResponse(ctx context.Context, realm string, id string, attr string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGenerateAndDownloadResponse, error)

	PostGenerateAndDownloadWithResponse(ctx context.Context, realm string, id string, attr string, body PostGenerateAndDownloadJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGenerateAndDownloadResponse, error)

	// PostUploadWithResponse request
	PostUploadWithResponse(ctx context.Context, realm string, id string, attr string, reqEditors ...RequestEditorFn) (*PostUploadResponse, error)

	// PostUploadCertificateWithResponse request
	PostUploadCertificateWithResponse(ctx context.Context, realm string, id string, attr string, reqEditors ...RequestEditorFn) (*PostUploadCertificateResponse, error)

	// GetClientSecretWithResponse request
	GetClientSecretWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetClientSecretResponse, error)

	// PostClientSecretWithResponse request
	PostClientSecretWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*PostClientSecretResponse, error)

	// DeleteRotatedWithResponse request
	DeleteRotatedWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*DeleteRotatedResponse, error)

	// GetRotatedWithResponse request
	GetRotatedWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRotatedResponse, error)

	// GetDefaultClientScopesWithResponse request
	GetDefaultClientScopesWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetDefaultClientScopesResponse, error)

	// DeleteDefaultClientScopeWithResponse request
	DeleteDefaultClientScopeWithResponse(ctx context.Context, realm string, id string, clientScopeId string, reqEditors ...RequestEditorFn) (*DeleteDefaultClientScopeResponse, error)

	// PutDefaultClientScopeWithResponse request
	PutDefaultClientScopeWithResponse(ctx context.Context, realm string, id string, clientScopeId string, reqEditors ...RequestEditorFn) (*PutDefaultClientScopeResponse, error)

	// GetGenerateExampleAccessTokenWithResponse request
	GetGenerateExampleAccessTokenWithResponse(ctx context.Context, realm string, id string, params *GetGenerateExampleAccessTokenParams, reqEditors ...RequestEditorFn) (*GetGenerateExampleAccessTokenResponse, error)

	// GetGenerateExampleIdTokenWithResponse request
	GetGenerateExampleIdTokenWithResponse(ctx context.Context, realm string, id string, params *GetGenerateExampleIdTokenParams, reqEditors ...RequestEditorFn) (*GetGenerateExampleIdTokenResponse, error)

	// GetGenerateExampleUserinfoWithResponse request
	GetGenerateExampleUserinfoWithResponse(ctx context.Context, realm string, id string, params *GetGenerateExampleUserinfoParams, reqEditors ...RequestEditorFn) (*GetGenerateExampleUserinfoResponse, error)

	// GetProtocolMappersWithResponse request
	GetProtocolMappersWithResponse(ctx context.Context, realm string, id string, params *GetProtocolMappersParams, reqEditors ...RequestEditorFn) (*GetProtocolMappersResponse, error)

	// GetGrantedWithResponse request
	GetGrantedWithResponse(ctx context.Context, realm string, id string, roleContainerId string, params *GetGrantedParams, reqEditors ...RequestEditorFn) (*GetGrantedResponse, error)

	// GetNotGrantedWithResponse request
	GetNotGrantedWithResponse(ctx context.Context, realm string, id string, roleContainerId string, params *GetNotGrantedParams, reqEditors ...RequestEditorFn) (*GetNotGrantedResponse, error)

	// GetInstallationProviderWithResponse request
	GetInstallationProviderWithResponse(ctx context.Context, realm string, id string, providerId string, reqEditors ...RequestEditorFn) (*GetInstallationProviderResponse, error)

	// GetClientManagementPermissionsWithResponse request
	GetClientManagementPermissionsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetClientManagementPermissionsResponse, error)

	// PutClientManagementPermissionsWithBodyWithResponse request with any body
	PutClientManagementPermissionsWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutClientManagementPermissionsResponse, error)

	PutClientManagementPermissionsWithResponse(ctx context.Context, realm string, id string, body PutClientManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutClientManagementPermissionsResponse, error)

	// PostNodesWithBodyWithResponse request with any body
	PostNodesWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostNodesResponse, error)

	PostNodesWithResponse(ctx context.Context, realm string, id string, body PostNodesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostNodesResponse, error)

	// DeleteNodeWithResponse request
	DeleteNodeWithResponse(ctx context.Context, realm string, id string, node string, reqEditors ...RequestEditorFn) (*DeleteNodeResponse, error)

	// GetOfflineSessionCountWithResponse request
	GetOfflineSessionCountWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetOfflineSessionCountResponse, error)

	// GetOfflineSessionsWithResponse request
	GetOfflineSessionsWithResponse(ctx context.Context, realm string, id string, params *GetOfflineSessionsParams, reqEditors ...RequestEditorFn) (*GetOfflineSessionsResponse, error)

	// GetOptionalClientScopesWithResponse request
	GetOptionalClientScopesWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetOptionalClientScopesResponse, error)

	// DeleteOptionalClientScopeWithResponse request
	DeleteOptionalClientScopeWithResponse(ctx context.Context, realm string, id string, clientScopeId string, reqEditors ...RequestEditorFn) (*DeleteOptionalClientScopeResponse, error)

	// PutOptionalClientScopeWithResponse request
	PutOptionalClientScopeWithResponse(ctx context.Context, realm string, id string, clientScopeId string, reqEditors ...RequestEditorFn) (*PutOptionalClientScopeResponse, error)

	// PostClientProtocolMappersAddModelsWithBodyWithResponse request with any body
	PostClientProtocolMappersAddModelsWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientProtocolMappersAddModelsResponse, error)

	PostClientProtocolMappersAddModelsWithResponse(ctx context.Context, realm string, id string, body PostClientProtocolMappersAddModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientProtocolMappersAddModelsResponse, error)

	// GetClientProtocolMappersModelsWithResponse request
	GetClientProtocolMappersModelsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetClientProtocolMappersModelsResponse, error)

	// PostClientProtocolMappersModelsWithBodyWithResponse request with any body
	PostClientProtocolMappersModelsWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientProtocolMappersModelsResponse, error)

	PostClientProtocolMappersModelsWithResponse(ctx context.Context, realm string, id string, body PostClientProtocolMappersModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientProtocolMappersModelsResponse, error)

	// GetClientProtocolMappersProtocolWithResponse request
	GetClientProtocolMappersProtocolWithResponse(ctx context.Context, realm string, id string, protocol string, reqEditors ...RequestEditorFn) (*GetClientProtocolMappersProtocolResponse, error)

	// PostClientPushRevocationWithResponse request
	PostClientPushRevocationWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*PostClientPushRevocationResponse, error)

	// PostRegistrationAccessTokenWithResponse request
	PostRegistrationAccessTokenWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*PostRegistrationAccessTokenResponse, error)

	// GetClientRolesWithResponse request
	GetClientRolesWithResponse(ctx context.Context, realm string, id string, params *GetClientRolesParams, reqEditors ...RequestEditorFn) (*GetClientRolesResponse, error)

	// PostClientRolesWithBodyWithResponse request with any body
	PostClientRolesWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientRolesResponse, error)

	PostClientRolesWithResponse(ctx context.Context, realm string, id string, body PostClientRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientRolesResponse, error)

	// DeleteClientRoleWithResponse request
	DeleteClientRoleWithResponse(ctx context.Context, realm string, id string, roleName string, reqEditors ...RequestEditorFn) (*DeleteClientRoleResponse, error)

	// GetClientRoleWithResponse request
	GetClientRoleWithResponse(ctx context.Context, realm string, id string, roleName string, reqEditors ...RequestEditorFn) (*GetClientRoleResponse, error)

	// PutClientRoleWithBodyWithResponse request with any body
	PutClientRoleWithBodyWithResponse(ctx context.Context, realm string, id string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutClientRoleResponse, error)

	PutClientRoleWithResponse(ctx context.Context, realm string, id string, roleName string, body PutClientRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*PutClientRoleResponse, error)

	// DeleteClientRoleCompositesWithBodyWithResponse request with any body
	DeleteClientRoleCompositesWithBodyWithResponse(ctx context.Context, realm string, id string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteClientRoleCompositesResponse, error)

	DeleteClientRoleCompositesWithResponse(ctx context.Context, realm string, id string, roleName string, body DeleteClientRoleCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteClientRoleCompositesResponse, error)

	// GetClientRoleCompositesWithResponse request
	GetClientRoleCompositesWithResponse(ctx context.Context, realm string, id string, roleName string, reqEditors ...RequestEditorFn) (*GetClientRoleCompositesResponse, error)

	// PostClientRoleCompositesWithBodyWithResponse request with any body
	PostClientRoleCompositesWithBodyWithResponse(ctx context.Context, realm string, id string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientRoleCompositesResponse, error)

	PostClientRoleCompositesWithResponse(ctx context.Context, realm string, id string, roleName string, body PostClientRoleCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientRoleCompositesResponse, error)

	// GetClientRoleCompositesClientWithResponse request
	GetClientRoleCompositesClientWithResponse(ctx context.Context, realm string, id string, roleName string, clientUuid string, reqEditors ...RequestEditorFn) (*GetClientRoleCompositesClientResponse, error)

	// GetClientRoleCompositesRealmWithResponse request
	GetClientRoleCompositesRealmWithResponse(ctx context.Context, realm string, id string, roleName string, reqEditors ...RequestEditorFn) (*GetClientRoleCompositesRealmResponse, error)

	// GetClientRoleGroupsWithResponse request
	GetClientRoleGroupsWithResponse(ctx context.Context, realm string, id string, roleName string, params *GetClientRoleGroupsParams, reqEditors ...RequestEditorFn) (*GetClientRoleGroupsResponse, error)

	// GetClientRoleManagementPermissionsWithResponse request
	GetClientRoleManagementPermissionsWithResponse(ctx context.Context, realm string, id string, roleName string, reqEditors ...RequestEditorFn) (*GetClientRoleManagementPermissionsResponse, error)

	// PutClientRoleManagementPermissionsWithBodyWithResponse request with any body
	PutClientRoleManagementPermissionsWithBodyWithResponse(ctx context.Context, realm string, id string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutClientRoleManagementPermissionsResponse, error)

	PutClientRoleManagementPermissionsWithResponse(ctx context.Context, realm string, id string, roleName string, body PutClientRoleManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutClientRoleManagementPermissionsResponse, error)

	// GetClientRoleUsersWithResponse request
	GetClientRoleUsersWithResponse(ctx context.Context, realm string, id string, roleName string, params *GetClientRoleUsersParams, reqEditors ...RequestEditorFn) (*GetClientRoleUsersResponse, error)

	// GetClientScopeMappingsWithResponse request
	GetClientScopeMappingsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetClientScopeMappingsResponse, error)

	// DeleteClientScopeMappingsClientWithBodyWithResponse request with any body
	DeleteClientScopeMappingsClientWithBodyWithResponse(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteClientScopeMappingsClientResponse, error)

	DeleteClientScopeMappingsClientWithResponse(ctx context.Context, realm string, id string, client string, body DeleteClientScopeMappingsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteClientScopeMappingsClientResponse, error)

	// GetClientScopeMappingsClientWithResponse request
	GetClientScopeMappingsClientWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*GetClientScopeMappingsClientResponse, error)

	// PostClientScopeMappingsClientWithBodyWithResponse request with any body
	PostClientScopeMappingsClientWithBodyWithResponse(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientScopeMappingsClientResponse, error)

	PostClientScopeMappingsClientWithResponse(ctx context.Context, realm string, id string, client string, body PostClientScopeMappingsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientScopeMappingsClientResponse, error)

	// GetClientScopeMappingsClientAvailableWithResponse request
	GetClientScopeMappingsClientAvailableWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*GetClientScopeMappingsClientAvailableResponse, error)

	// GetClientScopeMappingsClientCompositeWithResponse request
	GetClientScopeMappingsClientCompositeWithResponse(ctx context.Context, realm string, id string, client string, params *GetClientScopeMappingsClientCompositeParams, reqEditors ...RequestEditorFn) (*GetClientScopeMappingsClientCompositeResponse, error)

	// DeleteClientScopeMappingsRealmWithBodyWithResponse request with any body
	DeleteClientScopeMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteClientScopeMappingsRealmResponse, error)

	DeleteClientScopeMappingsRealmWithResponse(ctx context.Context, realm string, id string, body DeleteClientScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteClientScopeMappingsRealmResponse, error)

	// GetClientScopeMappingsRealmWithResponse request
	GetClientScopeMappingsRealmWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetClientScopeMappingsRealmResponse, error)

	// PostClientScopeMappingsRealmWithBodyWithResponse request with any body
	PostClientScopeMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientScopeMappingsRealmResponse, error)

	PostClientScopeMappingsRealmWithResponse(ctx context.Context, realm string, id string, body PostClientScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientScopeMappingsRealmResponse, error)

	// GetClientScopeMappingsRealmAvailableWithResponse request
	GetClientScopeMappingsRealmAvailableWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetClientScopeMappingsRealmAvailableResponse, error)

	// GetClientScopeMappingsRealmCompositeWithResponse request
	GetClientScopeMappingsRealmCompositeWithResponse(ctx context.Context, realm string, id string, params *GetClientScopeMappingsRealmCompositeParams, reqEditors ...RequestEditorFn) (*GetClientScopeMappingsRealmCompositeResponse, error)

	// GetServiceAccountUserWithResponse request
	GetServiceAccountUserWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetServiceAccountUserResponse, error)

	// GetSessionCountWithResponse request
	GetSessionCountWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetSessionCountResponse, error)

	// GetTestNodesAvailableWithResponse request
	GetTestNodesAvailableWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetTestNodesAvailableResponse, error)

	// GetClientUserSessionsWithResponse request
	GetClientUserSessionsWithResponse(ctx context.Context, realm string, id string, params *GetClientUserSessionsParams, reqEditors ...RequestEditorFn) (*GetClientUserSessionsResponse, error)

	// GetComponentsWithResponse request
	GetComponentsWithResponse(ctx context.Context, realm string, params *GetComponentsParams, reqEditors ...RequestEditorFn) (*GetComponentsResponse, error)

	// PostComponentsWithBodyWithResponse request with any body
	PostComponentsWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostComponentsResponse, error)

	PostComponentsWithResponse(ctx context.Context, realm string, body PostComponentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostComponentsResponse, error)

	// DeleteComponentWithResponse request
	DeleteComponentWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*DeleteComponentResponse, error)

	// GetComponentWithResponse request
	GetComponentWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetComponentResponse, error)

	// PutComponentWithBodyWithResponse request with any body
	PutComponentWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutComponentResponse, error)

	PutComponentWithResponse(ctx context.Context, realm string, id string, body PutComponentJSONRequestBody, reqEditors ...RequestEditorFn) (*PutComponentResponse, error)

	// GetSubComponentTypesWithResponse request
	GetSubComponentTypesWithResponse(ctx context.Context, realm string, id string, params *GetSubComponentTypesParams, reqEditors ...RequestEditorFn) (*GetSubComponentTypesResponse, error)

	// GetCredentialRegistratorsWithResponse request
	GetCredentialRegistratorsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetCredentialRegistratorsResponse, error)

	// GetDefaultDefaultClientScopesWithResponse request
	GetDefaultDefaultClientScopesWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetDefaultDefaultClientScopesResponse, error)

	// DeleteDefaultDefaultClientScopeWithResponse request
	DeleteDefaultDefaultClientScopeWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*DeleteDefaultDefaultClientScopeResponse, error)

	// PutDefaultDefaultClientScopeWithResponse request
	PutDefaultDefaultClientScopeWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*PutDefaultDefaultClientScopeResponse, error)

	// GetDefaultGroupsWithResponse request
	GetDefaultGroupsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetDefaultGroupsResponse, error)

	// DeleteDefaultGroupWithResponse request
	DeleteDefaultGroupWithResponse(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*DeleteDefaultGroupResponse, error)

	// PutDefaultGroupWithResponse request
	PutDefaultGroupWithResponse(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*PutDefaultGroupResponse, error)

	// GetDefaultOptionalClientScopesWithResponse request
	GetDefaultOptionalClientScopesWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetDefaultOptionalClientScopesResponse, error)

	// DeleteDefaultOptionalClientScopeWithResponse request
	DeleteDefaultOptionalClientScopeWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*DeleteDefaultOptionalClientScopeResponse, error)

	// PutDefaultOptionalClientScopeWithResponse request
	PutDefaultOptionalClientScopeWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*PutDefaultOptionalClientScopeResponse, error)

	// DeleteEventsWithResponse request
	DeleteEventsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*DeleteEventsResponse, error)

	// GetEventsWithResponse request
	GetEventsWithResponse(ctx context.Context, realm string, params *GetEventsParams, reqEditors ...RequestEditorFn) (*GetEventsResponse, error)

	// GetEventsConfigWithResponse request
	GetEventsConfigWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetEventsConfigResponse, error)

	// PutEventsConfigWithBodyWithResponse request with any body
	PutEventsConfigWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutEventsConfigResponse, error)

	PutEventsConfigWithResponse(ctx context.Context, realm string, body PutEventsConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*PutEventsConfigResponse, error)

	// GetGroupByPathWithResponse request
	GetGroupByPathWithResponse(ctx context.Context, realm string, path string, reqEditors ...RequestEditorFn) (*GetGroupByPathResponse, error)

	// GetGroupsByRealmWithResponse request
	GetGroupsByRealmWithResponse(ctx context.Context, realm string, params *GetGroupsByRealmParams, reqEditors ...RequestEditorFn) (*GetGroupsByRealmResponse, error)

	// PostGroupsWithBodyWithResponse request with any body
	PostGroupsWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGroupsResponse, error)

	PostGroupsWithResponse(ctx context.Context, realm string, body PostGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGroupsResponse, error)

	// GetGroupsCountByRealmWithResponse request
	GetGroupsCountByRealmWithResponse(ctx context.Context, realm string, params *GetGroupsCountByRealmParams, reqEditors ...RequestEditorFn) (*GetGroupsCountByRealmResponse, error)

	// DeleteGroupByRealmByIdWithResponse request
	DeleteGroupByRealmByIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*DeleteGroupByRealmByIdResponse, error)

	// GetGroupWithResponse request
	GetGroupWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetGroupResponse, error)

	// PutGroupByRealmByIdWithBodyWithResponse request with any body
	PutGroupByRealmByIdWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutGroupByRealmByIdResponse, error)

	PutGroupByRealmByIdWithResponse(ctx context.Context, realm string, id string, body PutGroupByRealmByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutGroupByRealmByIdResponse, error)

	// PostChildrenWithBodyWithResponse request with any body
	PostChildrenWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChildrenResponse, error)

	PostChildrenWithResponse(ctx context.Context, realm string, id string, body PostChildrenJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChildrenResponse, error)

	// GetGroupManagementPermissionsWithResponse request
	GetGroupManagementPermissionsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetGroupManagementPermissionsResponse, error)

	// PutGroupManagementPermissionsWithBodyWithResponse request with any body
	PutGroupManagementPermissionsWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutGroupManagementPermissionsResponse, error)

	PutGroupManagementPermissionsWithResponse(ctx context.Context, realm string, id string, body PutGroupManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutGroupManagementPermissionsResponse, error)

	// GetMembersWithResponse request
	GetMembersWithResponse(ctx context.Context, realm string, id string, params *GetMembersParams, reqEditors ...RequestEditorFn) (*GetMembersResponse, error)

	// GetGroupRoleMappingsWithResponse request
	GetGroupRoleMappingsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetGroupRoleMappingsResponse, error)

	// DeleteGroupRoleMappingsClientWithBodyWithResponse request with any body
	DeleteGroupRoleMappingsClientWithBodyWithResponse(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteGroupRoleMappingsClientResponse, error)

	DeleteGroupRoleMappingsClientWithResponse(ctx context.Context, realm string, id string, client string, body DeleteGroupRoleMappingsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteGroupRoleMappingsClientResponse, error)

	// GetGroupRoleMappingsClientWithResponse request
	GetGroupRoleMappingsClientWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*GetGroupRoleMappingsClientResponse, error)

	// PostGroupRoleMappingsClientWithBodyWithResponse request with any body
	PostGroupRoleMappingsClientWithBodyWithResponse(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGroupRoleMappingsClientResponse, error)

	PostGroupRoleMappingsClientWithResponse(ctx context.Context, realm string, id string, client string, body PostGroupRoleMappingsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGroupRoleMappingsClientResponse, error)

	// GetGroupRoleMappingsClientAvailableWithResponse request
	GetGroupRoleMappingsClientAvailableWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*GetGroupRoleMappingsClientAvailableResponse, error)

	// GetGroupRoleMappingsClientCompositeWithResponse request
	GetGroupRoleMappingsClientCompositeWithResponse(ctx context.Context, realm string, id string, client string, params *GetGroupRoleMappingsClientCompositeParams, reqEditors ...RequestEditorFn) (*GetGroupRoleMappingsClientCompositeResponse, error)

	// DeleteGroupRoleMappingsRealmWithBodyWithResponse request with any body
	DeleteGroupRoleMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteGroupRoleMappingsRealmResponse, error)

	DeleteGroupRoleMappingsRealmWithResponse(ctx context.Context, realm string, id string, body DeleteGroupRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteGroupRoleMappingsRealmResponse, error)

	// GetGroupRoleMappingsRealmWithResponse request
	GetGroupRoleMappingsRealmWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetGroupRoleMappingsRealmResponse, error)

	// PostGroupRoleMappingsRealmWithBodyWithResponse request with any body
	PostGroupRoleMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGroupRoleMappingsRealmResponse, error)

	PostGroupRoleMappingsRealmWithResponse(ctx context.Context, realm string, id string, body PostGroupRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGroupRoleMappingsRealmResponse, error)

	// GetGroupRoleMappingsRealmAvailableWithResponse request
	GetGroupRoleMappingsRealmAvailableWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetGroupRoleMappingsRealmAvailableResponse, error)

	// GetGroupRoleMappingsRealmCompositeWithResponse request
	GetGroupRoleMappingsRealmCompositeWithResponse(ctx context.Context, realm string, id string, params *GetGroupRoleMappingsRealmCompositeParams, reqEditors ...RequestEditorFn) (*GetGroupRoleMappingsRealmCompositeResponse, error)

	// PostImportConfigWithBodyWithResponse request with any body
	PostImportConfigWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostImportConfigResponse, error)

	PostImportConfigWithResponse(ctx context.Context, realm string, body PostImportConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*PostImportConfigResponse, error)

	// GetInstancesWithResponse request
	GetInstancesWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetInstancesResponse, error)

	// PostInstancesWithBodyWithResponse request with any body
	PostInstancesWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInstancesResponse, error)

	PostInstancesWithResponse(ctx context.Context, realm string, body PostInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInstancesResponse, error)

	// DeleteInstanceWithResponse request
	DeleteInstanceWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*DeleteInstanceResponse, error)

	// GetInstanceWithResponse request
	GetInstanceWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*GetInstanceResponse, error)

	// PutInstanceWithBodyWithResponse request with any body
	PutInstanceWithBodyWithResponse(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutInstanceResponse, error)

	PutInstanceWithResponse(ctx context.Context, realm string, alias string, body PutInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*PutInstanceResponse, error)

	// GetExportWithResponse request
	GetExportWithResponse(ctx context.Context, realm string, alias string, params *GetExportParams, reqEditors ...RequestEditorFn) (*GetExportResponse, error)

	// GetInstanceManagementPermissionsWithResponse request
	GetInstanceManagementPermissionsWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*GetInstanceManagementPermissionsResponse, error)

	// PutInstanceManagementPermissionsWithBodyWithResponse request with any body
	PutInstanceManagementPermissionsWithBodyWithResponse(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutInstanceManagementPermissionsResponse, error)

	PutInstanceManagementPermissionsWithResponse(ctx context.Context, realm string, alias string, body PutInstanceManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutInstanceManagementPermissionsResponse, error)

	// GetMapperTypesWithResponse request
	GetMapperTypesWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*GetMapperTypesResponse, error)

	// GetMappersWithResponse request
	GetMappersWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*GetMappersResponse, error)

	// PostMappersWithBodyWithResponse request with any body
	PostMappersWithBodyWithResponse(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMappersResponse, error)

	PostMappersWithResponse(ctx context.Context, realm string, alias string, body PostMappersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMappersResponse, error)

	// DeleteMapperWithResponse request
	DeleteMapperWithResponse(ctx context.Context, realm string, alias string, id string, reqEditors ...RequestEditorFn) (*DeleteMapperResponse, error)

	// GetMapperWithResponse request
	GetMapperWithResponse(ctx context.Context, realm string, alias string, id string, reqEditors ...RequestEditorFn) (*GetMapperResponse, error)

	// PutMapperWithBodyWithResponse request with any body
	PutMapperWithBodyWithResponse(ctx context.Context, realm string, alias string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutMapperResponse, error)

	PutMapperWithResponse(ctx context.Context, realm string, alias string, id string, body PutMapperJSONRequestBody, reqEditors ...RequestEditorFn) (*PutMapperResponse, error)

	// GetIdentityProviderProviderWithResponse request
	GetIdentityProviderProviderWithResponse(ctx context.Context, realm string, providerId string, reqEditors ...RequestEditorFn) (*GetIdentityProviderProviderResponse, error)

	// GetKeysWithResponse request
	GetKeysWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetKeysResponse, error)

	// GetLocalizationByRealmWithResponse request
	GetLocalizationByRealmWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetLocalizationByRealmResponse, error)

	// DeleteLocalizationByRealmByLocaleWithResponse request
	DeleteLocalizationByRealmByLocaleWithResponse(ctx context.Context, realm string, locale string, reqEditors ...RequestEditorFn) (*DeleteLocalizationByRealmByLocaleResponse, error)

	// GetLocalizationByRealmByLocaleWithResponse request
	GetLocalizationByRealmByLocaleWithResponse(ctx context.Context, realm string, locale string, params *GetLocalizationByRealmByLocaleParams, reqEditors ...RequestEditorFn) (*GetLocalizationByRealmByLocaleResponse, error)

	// PostLocalizationWithBodyWithResponse request with any body
	PostLocalizationWithBodyWithResponse(ctx context.Context, realm string, locale string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLocalizationResponse, error)

	PostLocalizationWithResponse(ctx context.Context, realm string, locale string, body PostLocalizationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLocalizationResponse, error)

	// DeleteLocalizationByRealmByLocaleByKeyWithResponse request
	DeleteLocalizationByRealmByLocaleByKeyWithResponse(ctx context.Context, realm string, locale string, key string, reqEditors ...RequestEditorFn) (*DeleteLocalizationByRealmByLocaleByKeyResponse, error)

	// GetLocalizationByRealmByLocaleByKeyWithResponse request
	GetLocalizationByRealmByLocaleByKeyWithResponse(ctx context.Context, realm string, locale string, key string, reqEditors ...RequestEditorFn) (*GetLocalizationByRealmByLocaleByKeyResponse, error)

	// PutLocalizationWithBodyWithResponse request with any body
	PutLocalizationWithBodyWithResponse(ctx context.Context, realm string, locale string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutLocalizationResponse, error)

	PutLocalizationWithResponse(ctx context.Context, realm string, locale string, key string, body PutLocalizationJSONRequestBody, reqEditors ...RequestEditorFn) (*PutLocalizationResponse, error)

	// PostLogoutAllWithResponse request
	PostLogoutAllWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*PostLogoutAllResponse, error)

	// PostPartialExportWithResponse request
	PostPartialExportWithResponse(ctx context.Context, realm string, params *PostPartialExportParams, reqEditors ...RequestEditorFn) (*PostPartialExportResponse, error)

	// PostPartialImportWithBodyWithResponse request with any body
	PostPartialImportWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPartialImportResponse, error)

	PostPartialImportWithResponse(ctx context.Context, realm string, body PostPartialImportJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPartialImportResponse, error)

	// PostPushRevocationByRealmWithResponse request
	PostPushRevocationByRealmWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*PostPushRevocationByRealmResponse, error)

	// GetRolesByRealmWithResponse request
	GetRolesByRealmWithResponse(ctx context.Context, realm string, params *GetRolesByRealmParams, reqEditors ...RequestEditorFn) (*GetRolesByRealmResponse, error)

	// PostRolesByRealmWithBodyWithResponse request with any body
	PostRolesByRealmWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRolesByRealmResponse, error)

	PostRolesByRealmWithResponse(ctx context.Context, realm string, body PostRolesByRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRolesByRealmResponse, error)

	// DeleteRolesByIdWithResponse request
	DeleteRolesByIdWithResponse(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*DeleteRolesByIdResponse, error)

	// GetRolesByIdWithResponse request
	GetRolesByIdWithResponse(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*GetRolesByIdResponse, error)

	// PutRolesByIdWithBodyWithResponse request with any body
	PutRolesByIdWithBodyWithResponse(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRolesByIdResponse, error)

	PutRolesByIdWithResponse(ctx context.Context, realm string, roleId string, body PutRolesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRolesByIdResponse, error)

	// DeleteRolesByIdCompositesWithBodyWithResponse request with any body
	DeleteRolesByIdCompositesWithBodyWithResponse(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRolesByIdCompositesResponse, error)

	DeleteRolesByIdCompositesWithResponse(ctx context.Context, realm string, roleId string, body DeleteRolesByIdCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRolesByIdCompositesResponse, error)

	// GetRolesByIdCompositesWithResponse request
	GetRolesByIdCompositesWithResponse(ctx context.Context, realm string, roleId string, params *GetRolesByIdCompositesParams, reqEditors ...RequestEditorFn) (*GetRolesByIdCompositesResponse, error)

	// PostRolesByIdCompositesWithBodyWithResponse request with any body
	PostRolesByIdCompositesWithBodyWithResponse(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRolesByIdCompositesResponse, error)

	PostRolesByIdCompositesWithResponse(ctx context.Context, realm string, roleId string, body PostRolesByIdCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRolesByIdCompositesResponse, error)

	// GetRolesByIdCompositesClientWithResponse request
	GetRolesByIdCompositesClientWithResponse(ctx context.Context, realm string, roleId string, clientUuid string, reqEditors ...RequestEditorFn) (*GetRolesByIdCompositesClientResponse, error)

	// GetRolesByIdCompositesRealmWithResponse request
	GetRolesByIdCompositesRealmWithResponse(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*GetRolesByIdCompositesRealmResponse, error)

	// GetRolesByIdManagementPermissionsWithResponse request
	GetRolesByIdManagementPermissionsWithResponse(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*GetRolesByIdManagementPermissionsResponse, error)

	// PutRolesByIdManagementPermissionsWithBodyWithResponse request with any body
	PutRolesByIdManagementPermissionsWithBodyWithResponse(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRolesByIdManagementPermissionsResponse, error)

	PutRolesByIdManagementPermissionsWithResponse(ctx context.Context, realm string, roleId string, body PutRolesByIdManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRolesByIdManagementPermissionsResponse, error)

	// DeleteRoleByRealmByRoleNameWithResponse request
	DeleteRoleByRealmByRoleNameWithResponse(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*DeleteRoleByRealmByRoleNameResponse, error)

	// GetRoleByRealmByRoleNameWithResponse request
	GetRoleByRealmByRoleNameWithResponse(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*GetRoleByRealmByRoleNameResponse, error)

	// PutRoleByRealmByRoleNameWithBodyWithResponse request with any body
	PutRoleByRealmByRoleNameWithBodyWithResponse(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRoleByRealmByRoleNameResponse, error)

	PutRoleByRealmByRoleNameWithResponse(ctx context.Context, realm string, roleName string, body PutRoleByRealmByRoleNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRoleByRealmByRoleNameResponse, error)

	// DeleteRoleCompositesByRealmByRoleNameWithBodyWithResponse request with any body
	DeleteRoleCompositesByRealmByRoleNameWithBodyWithResponse(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRoleCompositesByRealmByRoleNameResponse, error)

	DeleteRoleCompositesByRealmByRoleNameWithResponse(ctx context.Context, realm string, roleName string, body DeleteRoleCompositesByRealmByRoleNameJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRoleCompositesByRealmByRoleNameResponse, error)

	// GetRoleCompositesByRealmByRoleNameWithResponse request
	GetRoleCompositesByRealmByRoleNameWithResponse(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*GetRoleCompositesByRealmByRoleNameResponse, error)

	// PostRoleCompositesByRealmByRoleNameWithBodyWithResponse request with any body
	PostRoleCompositesByRealmByRoleNameWithBodyWithResponse(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRoleCompositesByRealmByRoleNameResponse, error)

	PostRoleCompositesByRealmByRoleNameWithResponse(ctx context.Context, realm string, roleName string, body PostRoleCompositesByRealmByRoleNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRoleCompositesByRealmByRoleNameResponse, error)

	// GetRoleCompositesClientByRealmByRoleNameByClientUuidWithResponse request
	GetRoleCompositesClientByRealmByRoleNameByClientUuidWithResponse(ctx context.Context, realm string, roleName string, clientUuid string, reqEditors ...RequestEditorFn) (*GetRoleCompositesClientByRealmByRoleNameByClientUuidResponse, error)

	// GetRoleCompositesRealmByRealmByRoleNameWithResponse request
	GetRoleCompositesRealmByRealmByRoleNameWithResponse(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*GetRoleCompositesRealmByRealmByRoleNameResponse, error)

	// GetRoleGroupsByRealmByRoleNameWithResponse request
	GetRoleGroupsByRealmByRoleNameWithResponse(ctx context.Context, realm string, roleName string, params *GetRoleGroupsByRealmByRoleNameParams, reqEditors ...RequestEditorFn) (*GetRoleGroupsByRealmByRoleNameResponse, error)

	// GetRoleManagementPermissionsByRealmByRoleNameWithResponse request
	GetRoleManagementPermissionsByRealmByRoleNameWithResponse(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*GetRoleManagementPermissionsByRealmByRoleNameResponse, error)

	// PutRoleManagementPermissionsByRealmByRoleNameWithBodyWithResponse request with any body
	PutRoleManagementPermissionsByRealmByRoleNameWithBodyWithResponse(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRoleManagementPermissionsByRealmByRoleNameResponse, error)

	PutRoleManagementPermissionsByRealmByRoleNameWithResponse(ctx context.Context, realm string, roleName string, body PutRoleManagementPermissionsByRealmByRoleNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRoleManagementPermissionsByRealmByRoleNameResponse, error)

	// GetRoleUsersByRealmByRoleNameWithResponse request
	GetRoleUsersByRealmByRoleNameWithResponse(ctx context.Context, realm string, roleName string, params *GetRoleUsersByRealmByRoleNameParams, reqEditors ...RequestEditorFn) (*GetRoleUsersByRealmByRoleNameResponse, error)

	// DeleteSessionWithResponse request
	DeleteSessionWithResponse(ctx context.Context, realm string, session string, reqEditors ...RequestEditorFn) (*DeleteSessionResponse, error)

	// PostTestSmtpConnectionWithBodyWithResponse request with any body
	PostTestSmtpConnectionWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTestSmtpConnectionResponse, error)

	PostTestSmtpConnectionWithResponse(ctx context.Context, realm string, body PostTestSmtpConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTestSmtpConnectionResponse, error)

	// GetUsersByRealmWithResponse request
	GetUsersByRealmWithResponse(ctx context.Context, realm string, params *GetUsersByRealmParams, reqEditors ...RequestEditorFn) (*GetUsersByRealmResponse, error)

	// PostUsersWithBodyWithResponse request with any body
	PostUsersWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersResponse, error)

	PostUsersWithResponse(ctx context.Context, realm string, body PostUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersResponse, error)

	// GetUsersManagementPermissionsWithResponse request
	GetUsersManagementPermissionsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetUsersManagementPermissionsResponse, error)

	// PutUsersManagementPermissionsWithBodyWithResponse request with any body
	PutUsersManagementPermissionsWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUsersManagementPermissionsResponse, error)

	PutUsersManagementPermissionsWithResponse(ctx context.Context, realm string, body PutUsersManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUsersManagementPermissionsResponse, error)

	// GetUsersCountWithResponse request
	GetUsersCountWithResponse(ctx context.Context, realm string, params *GetUsersCountParams, reqEditors ...RequestEditorFn) (*GetUsersCountResponse, error)

	// GetProfileWithResponse request
	GetProfileWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetProfileResponse, error)

	// PutProfileWithBodyWithResponse request with any body
	PutProfileWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutProfileResponse, error)

	PutProfileWithResponse(ctx context.Context, realm string, body PutProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*PutProfileResponse, error)

	// DeleteUserByRealmByIdWithResponse request
	DeleteUserByRealmByIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*DeleteUserByRealmByIdResponse, error)

	// GetUserByRealmByIdWithResponse request
	GetUserByRealmByIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetUserByRealmByIdResponse, error)

	// PutUserWithBodyWithResponse request with any body
	PutUserWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUserResponse, error)

	PutUserWithResponse(ctx context.Context, realm string, id string, body PutUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUserResponse, error)

	// GetConfiguredUserStorageCredentialTypesWithResponse request
	GetConfiguredUserStorageCredentialTypesWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetConfiguredUserStorageCredentialTypesResponse, error)

	// GetConsentsWithResponse request
	GetConsentsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetConsentsResponse, error)

	// DeleteConsentWithResponse request
	DeleteConsentWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*DeleteConsentResponse, error)

	// GetCredentialsWithResponse request
	GetCredentialsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetCredentialsResponse, error)

	// DeleteCredentialWithResponse request
	DeleteCredentialWithResponse(ctx context.Context, realm string, id string, credentialId string, reqEditors ...RequestEditorFn) (*DeleteCredentialResponse, error)

	// PostMoveAfterWithResponse request
	PostMoveAfterWithResponse(ctx context.Context, realm string, id string, credentialId string, newPreviousCredentialId string, reqEditors ...RequestEditorFn) (*PostMoveAfterResponse, error)

	// PostMoveToFirstWithResponse request
	PostMoveToFirstWithResponse(ctx context.Context, realm string, id string, credentialId string, reqEditors ...RequestEditorFn) (*PostMoveToFirstResponse, error)

	// PutUserLabelWithBodyWithResponse request with any body
	PutUserLabelWithBodyWithResponse(ctx context.Context, realm string, id string, credentialId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUserLabelResponse, error)

	PutUserLabelWithResponse(ctx context.Context, realm string, id string, credentialId string, body PutUserLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUserLabelResponse, error)

	// PutDisableCredentialTypesWithBodyWithResponse request with any body
	PutDisableCredentialTypesWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutDisableCredentialTypesResponse, error)

	PutDisableCredentialTypesWithResponse(ctx context.Context, realm string, id string, body PutDisableCredentialTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutDisableCredentialTypesResponse, error)

	// PutExecuteActionsEmailWithBodyWithResponse request with any body
	PutExecuteActionsEmailWithBodyWithResponse(ctx context.Context, realm string, id string, params *PutExecuteActionsEmailParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutExecuteActionsEmailResponse, error)

	PutExecuteActionsEmailWithResponse(ctx context.Context, realm string, id string, params *PutExecuteActionsEmailParams, body PutExecuteActionsEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutExecuteActionsEmailResponse, error)

	// GetFederatedIdentityWithResponse request
	GetFederatedIdentityWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetFederatedIdentityResponse, error)

	// DeleteFederatedIdentityWithResponse request
	DeleteFederatedIdentityWithResponse(ctx context.Context, realm string, id string, provider string, reqEditors ...RequestEditorFn) (*DeleteFederatedIdentityResponse, error)

	// PostFederatedIdentityWithResponse request
	PostFederatedIdentityWithResponse(ctx context.Context, realm string, id string, provider string, reqEditors ...RequestEditorFn) (*PostFederatedIdentityResponse, error)

	// GetUserGroupsWithResponse request
	GetUserGroupsWithResponse(ctx context.Context, realm string, id string, params *GetUserGroupsParams, reqEditors ...RequestEditorFn) (*GetUserGroupsResponse, error)

	// GetUserGroupsCountWithResponse request
	GetUserGroupsCountWithResponse(ctx context.Context, realm string, id string, params *GetUserGroupsCountParams, reqEditors ...RequestEditorFn) (*GetUserGroupsCountResponse, error)

	// DeleteUserGroupWithResponse request
	DeleteUserGroupWithResponse(ctx context.Context, realm string, id string, groupId string, reqEditors ...RequestEditorFn) (*DeleteUserGroupResponse, error)

	// PutUserGroupWithResponse request
	PutUserGroupWithResponse(ctx context.Context, realm string, id string, groupId string, reqEditors ...RequestEditorFn) (*PutUserGroupResponse, error)

	// PostImpersonationWithResponse request
	PostImpersonationWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*PostImpersonationResponse, error)

	// PostLogoutWithResponse request
	PostLogoutWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*PostLogoutResponse, error)

	// GetOfflineSessionWithResponse request
	GetOfflineSessionWithResponse(ctx context.Context, realm string, id string, clientUuid string, reqEditors ...RequestEditorFn) (*GetOfflineSessionResponse, error)

	// PutResetPasswordWithBodyWithResponse request with any body
	PutResetPasswordWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutResetPasswordResponse, error)

	PutResetPasswordWithResponse(ctx context.Context, realm string, id string, body PutResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PutResetPasswordResponse, error)

	// PutResetPasswordEmailWithResponse request
	PutResetPasswordEmailWithResponse(ctx context.Context, realm string, id string, params *PutResetPasswordEmailParams, reqEditors ...RequestEditorFn) (*PutResetPasswordEmailResponse, error)

	// GetUserRoleMappingsWithResponse request
	GetUserRoleMappingsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetUserRoleMappingsResponse, error)

	// DeleteUserRoleMappingsClientWithBodyWithResponse request with any body
	DeleteUserRoleMappingsClientWithBodyWithResponse(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteUserRoleMappingsClientResponse, error)

	DeleteUserRoleMappingsClientWithResponse(ctx context.Context, realm string, id string, client string, body DeleteUserRoleMappingsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteUserRoleMappingsClientResponse, error)

	// GetUserRoleMappingsClientWithResponse request
	GetUserRoleMappingsClientWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*GetUserRoleMappingsClientResponse, error)

	// PostUserRoleMappingsClientWithBodyWithResponse request with any body
	PostUserRoleMappingsClientWithBodyWithResponse(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserRoleMappingsClientResponse, error)

	PostUserRoleMappingsClientWithResponse(ctx context.Context, realm string, id string, client string, body PostUserRoleMappingsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserRoleMappingsClientResponse, error)

	// GetUserRoleMappingsClientAvailableWithResponse request
	GetUserRoleMappingsClientAvailableWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*GetUserRoleMappingsClientAvailableResponse, error)

	// GetUserRoleMappingsClientCompositeWithResponse request
	GetUserRoleMappingsClientCompositeWithResponse(ctx context.Context, realm string, id string, client string, params *GetUserRoleMappingsClientCompositeParams, reqEditors ...RequestEditorFn) (*GetUserRoleMappingsClientCompositeResponse, error)

	// DeleteUserRoleMappingsRealmWithBodyWithResponse request with any body
	DeleteUserRoleMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteUserRoleMappingsRealmResponse, error)

	DeleteUserRoleMappingsRealmWithResponse(ctx context.Context, realm string, id string, body DeleteUserRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteUserRoleMappingsRealmResponse, error)

	// GetUserRoleMappingsRealmWithResponse request
	GetUserRoleMappingsRealmWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetUserRoleMappingsRealmResponse, error)

	// PostUserRoleMappingsRealmWithBodyWithResponse request with any body
	PostUserRoleMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserRoleMappingsRealmResponse, error)

	PostUserRoleMappingsRealmWithResponse(ctx context.Context, realm string, id string, body PostUserRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserRoleMappingsRealmResponse, error)

	// GetUserRoleMappingsRealmAvailableWithResponse request
	GetUserRoleMappingsRealmAvailableWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetUserRoleMappingsRealmAvailableResponse, error)

	// GetUserRoleMappingsRealmCompositeWithResponse request
	GetUserRoleMappingsRealmCompositeWithResponse(ctx context.Context, realm string, id string, params *GetUserRoleMappingsRealmCompositeParams, reqEditors ...RequestEditorFn) (*GetUserRoleMappingsRealmCompositeResponse, error)

	// PutSendVerifyEmailWithResponse request
	PutSendVerifyEmailWithResponse(ctx context.Context, realm string, id string, params *PutSendVerifyEmailParams, reqEditors ...RequestEditorFn) (*PutSendVerifyEmailResponse, error)

	// GetSessionsWithResponse request
	GetSessionsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetSessionsResponse, error)
}

type GetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteByRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteByRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteByRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetByRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RealmRepresentation
}

// Status returns HTTPResponse.Status
func (r GetByRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetByRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutByRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutByRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutByRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetAdminEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteBruteForceUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteBruteForceUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBruteForceUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBruteForceUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetBruteForceUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBruteForceUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthenticatorProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetAuthenticatorProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthenticatorProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientAuthenticatorProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetClientAuthenticatorProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientAuthenticatorProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthenticationConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAuthenticationConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthenticationConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConfigDescriptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthenticatorConfigInfoRepresentation
}

// Status returns HTTPResponse.Status
func (r GetConfigDescriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConfigDescriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthenticationConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthenticatorConfigRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAuthenticationConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthenticationConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAuthenticationConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAuthenticationConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAuthenticationConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostExecutionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostExecutionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostExecutionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteExecutionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteExecutionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteExecutionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetExecutionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetExecutionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExecutionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostExecutionConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostExecutionConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostExecutionConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetExecutionConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthenticatorConfigRepresentation
}

// Status returns HTTPResponse.Status
func (r GetExecutionConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExecutionConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostExecutionLowerPriorityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostExecutionLowerPriorityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostExecutionLowerPriorityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostExecutionRaisePriorityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostExecutionRaisePriorityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostExecutionRaisePriorityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFlowsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetFlowsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFlowsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFlowsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostFlowsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFlowsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCopyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCopyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCopyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetExecutionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetExecutionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExecutionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutExecutionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutExecutionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutExecutionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostExecutionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostExecutionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostExecutionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFlowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostFlowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFlowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFlowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteFlowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFlowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFlowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthenticationFlowRepresentation
}

// Status returns HTTPResponse.Status
func (r GetFlowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFlowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutFlowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutFlowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutFlowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFormActionProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetFormActionProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFormActionProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFormProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetFormProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFormProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPerClientConfigDescriptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]ConfigPropertyRepresentation
}

// Status returns HTTPResponse.Status
func (r GetPerClientConfigDescriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPerClientConfigDescriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRegisterRequiredActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRegisterRequiredActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRegisterRequiredActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRequiredActionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetRequiredActionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRequiredActionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRequiredActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRequiredActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRequiredActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRequiredActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RequiredActionProviderRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRequiredActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRequiredActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRequiredActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutRequiredActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRequiredActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRequiredActionLowerPriorityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRequiredActionLowerPriorityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRequiredActionLowerPriorityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRequiredActionRaisePriorityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRequiredActionRaisePriorityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRequiredActionRaisePriorityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUnregisteredRequiredActionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetUnregisteredRequiredActionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUnregisteredRequiredActionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostClientDescriptionConverterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClientRepresentation
}

// Status returns HTTPResponse.Status
func (r PostClientDescriptionConverterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostClientDescriptionConverterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClientPoliciesRepresentation
}

// Status returns HTTPResponse.Status
func (r GetPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProfilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClientProfilesRepresentation
}

// Status returns HTTPResponse.Status
func (r GetProfilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProfilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutProfilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutProfilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutProfilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientScopesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetClientScopesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientScopesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostClientScopesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostClientScopesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostClientScopesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteClientScopeProtocolMappersModelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteClientScopeProtocolMappersModelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteClientScopeProtocolMappersModelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientScopeProtocolMappersModelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProtocolMapperRepresentation
}

// Status returns HTTPResponse.Status
func (r GetClientScopeProtocolMappersModelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientScopeProtocolMappersModelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutClientScopeProtocolMappersModelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutClientScopeProtocolMappersModelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutClientScopeProtocolMappersModelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteClientScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteClientScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteClientScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClientScopeRepresentation
}

// Status returns HTTPResponse.Status
func (r GetClientScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutClientScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutClientScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutClientScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostClientScopeProtocolMappersAddModelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostClientScopeProtocolMappersAddModelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostClientScopeProtocolMappersAddModelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientScopeProtocolMappersModelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetClientScopeProtocolMappersModelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientScopeProtocolMappersModelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostClientScopeProtocolMappersModelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostClientScopeProtocolMappersModelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostClientScopeProtocolMappersModelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientScopeProtocolMappersProtocolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetClientScopeProtocolMappersProtocolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientScopeProtocolMappersProtocolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientScopeScopeMappingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MappingsRepresentation
}

// Status returns HTTPResponse.Status
func (r GetClientScopeScopeMappingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientScopeScopeMappingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteClientScopeScopeMappingsClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteClientScopeScopeMappingsClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteClientScopeScopeMappingsClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientScopeScopeMappingsClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetClientScopeScopeMappingsClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientScopeScopeMappingsClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostClientScopeScopeMappingsClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostClientScopeScopeMappingsClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostClientScopeScopeMappingsClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientScopeScopeMappingsClientAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetClientScopeScopeMappingsClientAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientScopeScopeMappingsClientAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientScopeScopeMappingsClientCompositeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetClientScopeScopeMappingsClientCompositeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientScopeScopeMappingsClientCompositeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteClientScopeScopeMappingsRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteClientScopeScopeMappingsRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteClientScopeScopeMappingsRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientScopeScopeMappingsRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetClientScopeScopeMappingsRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientScopeScopeMappingsRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostClientScopeScopeMappingsRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostClientScopeScopeMappingsRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostClientScopeScopeMappingsRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientScopeScopeMappingsRealmAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetClientScopeScopeMappingsRealmAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientScopeScopeMappingsRealmAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientScopeScopeMappingsRealmCompositeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetClientScopeScopeMappingsRealmCompositeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientScopeScopeMappingsRealmCompositeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientSessionStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetClientSessionStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientSessionStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetClientTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostClientTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostClientTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostClientTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteClientTemplateProtocolMappersModelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteClientTemplateProtocolMappersModelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteClientTemplateProtocolMappersModelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientTemplateProtocolMappersModelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProtocolMapperRepresentation
}

// Status returns HTTPResponse.Status
func (r GetClientTemplateProtocolMappersModelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientTemplateProtocolMappersModelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutClientTemplateProtocolMappersModelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutClientTemplateProtocolMappersModelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutClientTemplateProtocolMappersModelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteClientTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteClientTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteClientTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClientScopeRepresentation
}

// Status returns HTTPResponse.Status
func (r GetClientTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutClientTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutClientTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutClientTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostClientTemplateProtocolMappersAddModelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostClientTemplateProtocolMappersAddModelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostClientTemplateProtocolMappersAddModelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientTemplateProtocolMappersModelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetClientTemplateProtocolMappersModelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientTemplateProtocolMappersModelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostClientTemplateProtocolMappersModelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostClientTemplateProtocolMappersModelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostClientTemplateProtocolMappersModelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientTemplateProtocolMappersProtocolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetClientTemplateProtocolMappersProtocolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientTemplateProtocolMappersProtocolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientTemplateScopeMappingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MappingsRepresentation
}

// Status returns HTTPResponse.Status
func (r GetClientTemplateScopeMappingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientTemplateScopeMappingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteClientTemplateScopeMappingsClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteClientTemplateScopeMappingsClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteClientTemplateScopeMappingsClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientTemplateScopeMappingsClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetClientTemplateScopeMappingsClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientTemplateScopeMappingsClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostClientTemplateScopeMappingsClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostClientTemplateScopeMappingsClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostClientTemplateScopeMappingsClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientTemplateScopeMappingsClientAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetClientTemplateScopeMappingsClientAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientTemplateScopeMappingsClientAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientTemplateScopeMappingsClientCompositeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetClientTemplateScopeMappingsClientCompositeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientTemplateScopeMappingsClientCompositeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteClientTemplateScopeMappingsRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteClientTemplateScopeMappingsRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteClientTemplateScopeMappingsRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientTemplateScopeMappingsRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetClientTemplateScopeMappingsRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientTemplateScopeMappingsRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostClientTemplateScopeMappingsRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostClientTemplateScopeMappingsRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostClientTemplateScopeMappingsRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientTemplateScopeMappingsRealmAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetClientTemplateScopeMappingsRealmAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientTemplateScopeMappingsRealmAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientTemplateScopeMappingsRealmCompositeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetClientTemplateScopeMappingsRealmCompositeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientTemplateScopeMappingsRealmCompositeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetClientsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostClientsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostClientsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostClientsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientsInitialAccessResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetClientsInitialAccessResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientsInitialAccessResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostClientsInitialAccessResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClientInitialAccessPresentation
}

// Status returns HTTPResponse.Status
func (r PostClientsInitialAccessResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostClientsInitialAccessResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteClientsInitialAccesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteClientsInitialAccesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteClientsInitialAccesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteClientProtocolMappersModelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteClientProtocolMappersModelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteClientProtocolMappersModelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientProtocolMappersModelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProtocolMapperRepresentation
}

// Status returns HTTPResponse.Status
func (r GetClientProtocolMappersModelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientProtocolMappersModelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutClientProtocolMappersModelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutClientProtocolMappersModelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutClientProtocolMappersModelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteClientByRealmByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteClientByRealmByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteClientByRealmByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientByRealmByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClientRepresentation
}

// Status returns HTTPResponse.Status
func (r GetClientByRealmByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientByRealmByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCertificateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CertificateRepresentation
}

// Status returns HTTPResponse.Status
func (r GetCertificateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCertificateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDownloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostDownloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDownloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGenerateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CertificateRepresentation
}

// Status returns HTTPResponse.Status
func (r PostGenerateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGenerateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGenerateAndDownloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostGenerateAndDownloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGenerateAndDownloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUploadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CertificateRepresentation
}

// Status returns HTTPResponse.Status
func (r PostUploadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUploadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUploadCertificateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CertificateRepresentation
}

// Status returns HTTPResponse.Status
func (r PostUploadCertificateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUploadCertificateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientSecretResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CredentialRepresentation
}

// Status returns HTTPResponse.Status
func (r GetClientSecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientSecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostClientSecretResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CredentialRepresentation
}

// Status returns HTTPResponse.Status
func (r PostClientSecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostClientSecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRotatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRotatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRotatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRotatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CredentialRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRotatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRotatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDefaultClientScopesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetDefaultClientScopesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDefaultClientScopesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDefaultClientScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteDefaultClientScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDefaultClientScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutDefaultClientScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutDefaultClientScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutDefaultClientScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGenerateExampleAccessTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccessToken
}

// Status returns HTTPResponse.Status
func (r GetGenerateExampleAccessTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGenerateExampleAccessTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGenerateExampleIdTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IDToken
}

// Status returns HTTPResponse.Status
func (r GetGenerateExampleIdTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGenerateExampleIdTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGenerateExampleUserinfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetGenerateExampleUserinfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGenerateExampleUserinfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProtocolMappersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetProtocolMappersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProtocolMappersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGrantedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetGrantedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGrantedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNotGrantedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetNotGrantedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNotGrantedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInstallationProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetInstallationProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInstallationProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientManagementPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ManagementPermissionReference
}

// Status returns HTTPResponse.Status
func (r GetClientManagementPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientManagementPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutClientManagementPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ManagementPermissionReference
}

// Status returns HTTPResponse.Status
func (r PutClientManagementPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutClientManagementPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostNodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostNodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostNodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOfflineSessionCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]int64
}

// Status returns HTTPResponse.Status
func (r GetOfflineSessionCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOfflineSessionCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOfflineSessionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetOfflineSessionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOfflineSessionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOptionalClientScopesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetOptionalClientScopesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOptionalClientScopesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOptionalClientScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOptionalClientScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOptionalClientScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOptionalClientScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutOptionalClientScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOptionalClientScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostClientProtocolMappersAddModelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostClientProtocolMappersAddModelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostClientProtocolMappersAddModelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientProtocolMappersModelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetClientProtocolMappersModelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientProtocolMappersModelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostClientProtocolMappersModelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostClientProtocolMappersModelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostClientProtocolMappersModelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientProtocolMappersProtocolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetClientProtocolMappersProtocolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientProtocolMappersProtocolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostClientPushRevocationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GlobalRequestResult
}

// Status returns HTTPResponse.Status
func (r PostClientPushRevocationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostClientPushRevocationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRegistrationAccessTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClientRepresentation
}

// Status returns HTTPResponse.Status
func (r PostRegistrationAccessTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRegistrationAccessTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetClientRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostClientRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostClientRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostClientRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteClientRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteClientRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteClientRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetClientRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutClientRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutClientRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutClientRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteClientRoleCompositesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteClientRoleCompositesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteClientRoleCompositesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientRoleCompositesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetClientRoleCompositesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientRoleCompositesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostClientRoleCompositesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostClientRoleCompositesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostClientRoleCompositesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientRoleCompositesClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetClientRoleCompositesClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientRoleCompositesClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientRoleCompositesRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetClientRoleCompositesRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientRoleCompositesRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientRoleGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetClientRoleGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientRoleGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientRoleManagementPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ManagementPermissionReference
}

// Status returns HTTPResponse.Status
func (r GetClientRoleManagementPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientRoleManagementPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutClientRoleManagementPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ManagementPermissionReference
}

// Status returns HTTPResponse.Status
func (r PutClientRoleManagementPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutClientRoleManagementPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientRoleUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetClientRoleUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientRoleUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientScopeMappingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MappingsRepresentation
}

// Status returns HTTPResponse.Status
func (r GetClientScopeMappingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientScopeMappingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteClientScopeMappingsClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteClientScopeMappingsClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteClientScopeMappingsClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientScopeMappingsClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetClientScopeMappingsClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientScopeMappingsClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostClientScopeMappingsClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostClientScopeMappingsClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostClientScopeMappingsClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientScopeMappingsClientAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetClientScopeMappingsClientAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientScopeMappingsClientAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientScopeMappingsClientCompositeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetClientScopeMappingsClientCompositeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientScopeMappingsClientCompositeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteClientScopeMappingsRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteClientScopeMappingsRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteClientScopeMappingsRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientScopeMappingsRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetClientScopeMappingsRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientScopeMappingsRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostClientScopeMappingsRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostClientScopeMappingsRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostClientScopeMappingsRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientScopeMappingsRealmAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetClientScopeMappingsRealmAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientScopeMappingsRealmAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientScopeMappingsRealmCompositeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetClientScopeMappingsRealmCompositeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientScopeMappingsRealmCompositeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceAccountUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserRepresentation
}

// Status returns HTTPResponse.Status
func (r GetServiceAccountUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceAccountUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSessionCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]int64
}

// Status returns HTTPResponse.Status
func (r GetSessionCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSessionCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTestNodesAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GlobalRequestResult
}

// Status returns HTTPResponse.Status
func (r GetTestNodesAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTestNodesAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientUserSessionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetClientUserSessionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientUserSessionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetComponentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetComponentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetComponentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostComponentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostComponentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostComponentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteComponentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteComponentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteComponentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetComponentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ComponentRepresentation
}

// Status returns HTTPResponse.Status
func (r GetComponentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetComponentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutComponentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutComponentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutComponentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSubComponentTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetSubComponentTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSubComponentTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCredentialRegistratorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetCredentialRegistratorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCredentialRegistratorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDefaultDefaultClientScopesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetDefaultDefaultClientScopesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDefaultDefaultClientScopesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDefaultDefaultClientScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteDefaultDefaultClientScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDefaultDefaultClientScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutDefaultDefaultClientScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutDefaultDefaultClientScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutDefaultDefaultClientScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDefaultGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetDefaultGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDefaultGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDefaultGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteDefaultGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDefaultGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutDefaultGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutDefaultGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutDefaultGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDefaultOptionalClientScopesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetDefaultOptionalClientScopesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDefaultOptionalClientScopesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDefaultOptionalClientScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteDefaultOptionalClientScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDefaultOptionalClientScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutDefaultOptionalClientScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutDefaultOptionalClientScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutDefaultOptionalClientScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEventsConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RealmEventsConfigRepresentation
}

// Status returns HTTPResponse.Status
func (r GetEventsConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEventsConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutEventsConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutEventsConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutEventsConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGroupByPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GroupRepresentation
}

// Status returns HTTPResponse.Status
func (r GetGroupByPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupByPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGroupsByRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetGroupsByRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupsByRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGroupsCountByRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]int64
}

// Status returns HTTPResponse.Status
func (r GetGroupsCountByRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupsCountByRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGroupByRealmByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteGroupByRealmByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGroupByRealmByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GroupRepresentation
}

// Status returns HTTPResponse.Status
func (r GetGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutGroupByRealmByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutGroupByRealmByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutGroupByRealmByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostChildrenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostChildrenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostChildrenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGroupManagementPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ManagementPermissionReference
}

// Status returns HTTPResponse.Status
func (r GetGroupManagementPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupManagementPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutGroupManagementPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ManagementPermissionReference
}

// Status returns HTTPResponse.Status
func (r PutGroupManagementPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutGroupManagementPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGroupRoleMappingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MappingsRepresentation
}

// Status returns HTTPResponse.Status
func (r GetGroupRoleMappingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupRoleMappingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGroupRoleMappingsClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteGroupRoleMappingsClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGroupRoleMappingsClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGroupRoleMappingsClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetGroupRoleMappingsClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupRoleMappingsClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGroupRoleMappingsClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostGroupRoleMappingsClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGroupRoleMappingsClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGroupRoleMappingsClientAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetGroupRoleMappingsClientAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupRoleMappingsClientAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGroupRoleMappingsClientCompositeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetGroupRoleMappingsClientCompositeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupRoleMappingsClientCompositeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGroupRoleMappingsRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteGroupRoleMappingsRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGroupRoleMappingsRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGroupRoleMappingsRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetGroupRoleMappingsRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupRoleMappingsRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGroupRoleMappingsRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostGroupRoleMappingsRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGroupRoleMappingsRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGroupRoleMappingsRealmAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetGroupRoleMappingsRealmAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupRoleMappingsRealmAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGroupRoleMappingsRealmCompositeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetGroupRoleMappingsRealmCompositeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupRoleMappingsRealmCompositeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostImportConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]string
}

// Status returns HTTPResponse.Status
func (r PostImportConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostImportConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IdentityProviderRepresentation
}

// Status returns HTTPResponse.Status
func (r GetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInstanceManagementPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ManagementPermissionReference
}

// Status returns HTTPResponse.Status
func (r GetInstanceManagementPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInstanceManagementPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutInstanceManagementPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ManagementPermissionReference
}

// Status returns HTTPResponse.Status
func (r PutInstanceManagementPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutInstanceManagementPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMapperTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetMapperTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMapperTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMappersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetMappersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMappersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMappersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostMappersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMappersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMapperResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteMapperResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMapperResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMapperResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IdentityProviderMapperRepresentation
}

// Status returns HTTPResponse.Status
func (r GetMapperResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMapperResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutMapperResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutMapperResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutMapperResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdentityProviderProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIdentityProviderProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdentityProviderProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *KeysMetadataRepresentation
}

// Status returns HTTPResponse.Status
func (r GetKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLocalizationByRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetLocalizationByRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLocalizationByRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteLocalizationByRealmByLocaleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteLocalizationByRealmByLocaleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteLocalizationByRealmByLocaleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLocalizationByRealmByLocaleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]string
}

// Status returns HTTPResponse.Status
func (r GetLocalizationByRealmByLocaleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLocalizationByRealmByLocaleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLocalizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostLocalizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLocalizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteLocalizationByRealmByLocaleByKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteLocalizationByRealmByLocaleByKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteLocalizationByRealmByLocaleByKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLocalizationByRealmByLocaleByKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetLocalizationByRealmByLocaleByKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLocalizationByRealmByLocaleByKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutLocalizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutLocalizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutLocalizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLogoutAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GlobalRequestResult
}

// Status returns HTTPResponse.Status
func (r PostLogoutAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLogoutAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPartialExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPartialExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPartialExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPartialImportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPartialImportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPartialImportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPushRevocationByRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GlobalRequestResult
}

// Status returns HTTPResponse.Status
func (r PostPushRevocationByRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPushRevocationByRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRolesByRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetRolesByRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRolesByRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRolesByRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRolesByRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRolesByRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRolesByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRolesByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRolesByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRolesByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRolesByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRolesByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRolesByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutRolesByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRolesByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRolesByIdCompositesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRolesByIdCompositesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRolesByIdCompositesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRolesByIdCompositesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetRolesByIdCompositesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRolesByIdCompositesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRolesByIdCompositesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRolesByIdCompositesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRolesByIdCompositesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRolesByIdCompositesClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetRolesByIdCompositesClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRolesByIdCompositesClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRolesByIdCompositesRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetRolesByIdCompositesRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRolesByIdCompositesRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRolesByIdManagementPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ManagementPermissionReference
}

// Status returns HTTPResponse.Status
func (r GetRolesByIdManagementPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRolesByIdManagementPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRolesByIdManagementPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ManagementPermissionReference
}

// Status returns HTTPResponse.Status
func (r PutRolesByIdManagementPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRolesByIdManagementPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRoleByRealmByRoleNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRoleByRealmByRoleNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRoleByRealmByRoleNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRoleByRealmByRoleNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRoleByRealmByRoleNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRoleByRealmByRoleNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRoleByRealmByRoleNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutRoleByRealmByRoleNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRoleByRealmByRoleNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRoleCompositesByRealmByRoleNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRoleCompositesByRealmByRoleNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRoleCompositesByRealmByRoleNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRoleCompositesByRealmByRoleNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetRoleCompositesByRealmByRoleNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRoleCompositesByRealmByRoleNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRoleCompositesByRealmByRoleNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRoleCompositesByRealmByRoleNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRoleCompositesByRealmByRoleNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRoleCompositesClientByRealmByRoleNameByClientUuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetRoleCompositesClientByRealmByRoleNameByClientUuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRoleCompositesClientByRealmByRoleNameByClientUuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRoleCompositesRealmByRealmByRoleNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetRoleCompositesRealmByRealmByRoleNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRoleCompositesRealmByRealmByRoleNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRoleGroupsByRealmByRoleNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetRoleGroupsByRealmByRoleNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRoleGroupsByRealmByRoleNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRoleManagementPermissionsByRealmByRoleNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ManagementPermissionReference
}

// Status returns HTTPResponse.Status
func (r GetRoleManagementPermissionsByRealmByRoleNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRoleManagementPermissionsByRealmByRoleNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRoleManagementPermissionsByRealmByRoleNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ManagementPermissionReference
}

// Status returns HTTPResponse.Status
func (r PutRoleManagementPermissionsByRealmByRoleNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRoleManagementPermissionsByRealmByRoleNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRoleUsersByRealmByRoleNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetRoleUsersByRealmByRoleNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRoleUsersByRealmByRoleNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTestSmtpConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostTestSmtpConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTestSmtpConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersByRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetUsersByRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersByRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersManagementPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ManagementPermissionReference
}

// Status returns HTTPResponse.Status
func (r GetUsersManagementPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersManagementPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutUsersManagementPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ManagementPermissionReference
}

// Status returns HTTPResponse.Status
func (r PutUsersManagementPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutUsersManagementPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *int32
}

// Status returns HTTPResponse.Status
func (r GetUsersCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserByRealmByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteUserByRealmByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserByRealmByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserByRealmByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserRepresentation
}

// Status returns HTTPResponse.Status
func (r GetUserByRealmByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserByRealmByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConfiguredUserStorageCredentialTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetConfiguredUserStorageCredentialTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConfiguredUserStorageCredentialTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetConsentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConsentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteConsentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConsentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCredentialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetCredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCredentialResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCredentialResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCredentialResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMoveAfterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostMoveAfterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMoveAfterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMoveToFirstResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostMoveToFirstResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMoveToFirstResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutUserLabelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutUserLabelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutUserLabelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutDisableCredentialTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutDisableCredentialTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutDisableCredentialTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutExecuteActionsEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutExecuteActionsEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutExecuteActionsEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFederatedIdentityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetFederatedIdentityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFederatedIdentityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFederatedIdentityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteFederatedIdentityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFederatedIdentityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFederatedIdentityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostFederatedIdentityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFederatedIdentityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetUserGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserGroupsCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]int64
}

// Status returns HTTPResponse.Status
func (r GetUserGroupsCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserGroupsCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteUserGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutUserGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutUserGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutUserGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostImpersonationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostImpersonationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostImpersonationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLogoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostLogoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLogoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOfflineSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetOfflineSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOfflineSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutResetPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutResetPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutResetPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutResetPasswordEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutResetPasswordEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutResetPasswordEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserRoleMappingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MappingsRepresentation
}

// Status returns HTTPResponse.Status
func (r GetUserRoleMappingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserRoleMappingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserRoleMappingsClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteUserRoleMappingsClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserRoleMappingsClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserRoleMappingsClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetUserRoleMappingsClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserRoleMappingsClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserRoleMappingsClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUserRoleMappingsClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserRoleMappingsClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserRoleMappingsClientAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetUserRoleMappingsClientAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserRoleMappingsClientAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserRoleMappingsClientCompositeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetUserRoleMappingsClientCompositeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserRoleMappingsClientCompositeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserRoleMappingsRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteUserRoleMappingsRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserRoleMappingsRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserRoleMappingsRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetUserRoleMappingsRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserRoleMappingsRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserRoleMappingsRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUserRoleMappingsRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserRoleMappingsRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserRoleMappingsRealmAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetUserRoleMappingsRealmAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserRoleMappingsRealmAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserRoleMappingsRealmCompositeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetUserRoleMappingsRealmCompositeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserRoleMappingsRealmCompositeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSendVerifyEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutSendVerifyEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSendVerifyEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSessionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetSessionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSessionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetWithResponse request returning *GetResponse
func (c *ClientWithResponses) GetWithResponse(ctx context.Context, params *GetParams, reqEditors ...RequestEditorFn) (*GetResponse, error) {
	rsp, err := c.Get(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResponse(rsp)
}

// PostWithBodyWithResponse request with arbitrary body returning *PostResponse
func (c *ClientWithResponses) PostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostResponse, error) {
	rsp, err := c.PostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostResponse(rsp)
}

func (c *ClientWithResponses) PostWithResponse(ctx context.Context, body PostJSONRequestBody, reqEditors ...RequestEditorFn) (*PostResponse, error) {
	rsp, err := c.Post(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostResponse(rsp)
}

// DeleteByRealmWithResponse request returning *DeleteByRealmResponse
func (c *ClientWithResponses) DeleteByRealmWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*DeleteByRealmResponse, error) {
	rsp, err := c.DeleteByRealm(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteByRealmResponse(rsp)
}

// GetByRealmWithResponse request returning *GetByRealmResponse
func (c *ClientWithResponses) GetByRealmWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetByRealmResponse, error) {
	rsp, err := c.GetByRealm(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetByRealmResponse(rsp)
}

// PutByRealmWithBodyWithResponse request with arbitrary body returning *PutByRealmResponse
func (c *ClientWithResponses) PutByRealmWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutByRealmResponse, error) {
	rsp, err := c.PutByRealmWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutByRealmResponse(rsp)
}

func (c *ClientWithResponses) PutByRealmWithResponse(ctx context.Context, realm string, body PutByRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*PutByRealmResponse, error) {
	rsp, err := c.PutByRealm(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutByRealmResponse(rsp)
}

// DeleteAdminEventsWithResponse request returning *DeleteAdminEventsResponse
func (c *ClientWithResponses) DeleteAdminEventsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*DeleteAdminEventsResponse, error) {
	rsp, err := c.DeleteAdminEvents(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminEventsResponse(rsp)
}

// GetAdminEventsWithResponse request returning *GetAdminEventsResponse
func (c *ClientWithResponses) GetAdminEventsWithResponse(ctx context.Context, realm string, params *GetAdminEventsParams, reqEditors ...RequestEditorFn) (*GetAdminEventsResponse, error) {
	rsp, err := c.GetAdminEvents(ctx, realm, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminEventsResponse(rsp)
}

// DeleteUsersWithResponse request returning *DeleteUsersResponse
func (c *ClientWithResponses) DeleteUsersWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*DeleteUsersResponse, error) {
	rsp, err := c.DeleteUsers(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUsersResponse(rsp)
}

// DeleteBruteForceUserWithResponse request returning *DeleteBruteForceUserResponse
func (c *ClientWithResponses) DeleteBruteForceUserWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*DeleteBruteForceUserResponse, error) {
	rsp, err := c.DeleteBruteForceUser(ctx, realm, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBruteForceUserResponse(rsp)
}

// GetBruteForceUserWithResponse request returning *GetBruteForceUserResponse
func (c *ClientWithResponses) GetBruteForceUserWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*GetBruteForceUserResponse, error) {
	rsp, err := c.GetBruteForceUser(ctx, realm, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBruteForceUserResponse(rsp)
}

// GetAuthenticatorProvidersWithResponse request returning *GetAuthenticatorProvidersResponse
func (c *ClientWithResponses) GetAuthenticatorProvidersWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAuthenticatorProvidersResponse, error) {
	rsp, err := c.GetAuthenticatorProviders(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthenticatorProvidersResponse(rsp)
}

// GetClientAuthenticatorProvidersWithResponse request returning *GetClientAuthenticatorProvidersResponse
func (c *ClientWithResponses) GetClientAuthenticatorProvidersWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetClientAuthenticatorProvidersResponse, error) {
	rsp, err := c.GetClientAuthenticatorProviders(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientAuthenticatorProvidersResponse(rsp)
}

// PostAuthenticationConfigWithBodyWithResponse request with arbitrary body returning *PostAuthenticationConfigResponse
func (c *ClientWithResponses) PostAuthenticationConfigWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthenticationConfigResponse, error) {
	rsp, err := c.PostAuthenticationConfigWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthenticationConfigResponse(rsp)
}

func (c *ClientWithResponses) PostAuthenticationConfigWithResponse(ctx context.Context, realm string, body PostAuthenticationConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthenticationConfigResponse, error) {
	rsp, err := c.PostAuthenticationConfig(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthenticationConfigResponse(rsp)
}

// GetConfigDescriptionWithResponse request returning *GetConfigDescriptionResponse
func (c *ClientWithResponses) GetConfigDescriptionWithResponse(ctx context.Context, realm string, providerId string, reqEditors ...RequestEditorFn) (*GetConfigDescriptionResponse, error) {
	rsp, err := c.GetConfigDescription(ctx, realm, providerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConfigDescriptionResponse(rsp)
}

// DeleteConfigWithResponse request returning *DeleteConfigResponse
func (c *ClientWithResponses) DeleteConfigWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*DeleteConfigResponse, error) {
	rsp, err := c.DeleteConfig(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConfigResponse(rsp)
}

// GetAuthenticationConfigWithResponse request returning *GetAuthenticationConfigResponse
func (c *ClientWithResponses) GetAuthenticationConfigWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetAuthenticationConfigResponse, error) {
	rsp, err := c.GetAuthenticationConfig(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthenticationConfigResponse(rsp)
}

// PutAuthenticationConfigWithBodyWithResponse request with arbitrary body returning *PutAuthenticationConfigResponse
func (c *ClientWithResponses) PutAuthenticationConfigWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAuthenticationConfigResponse, error) {
	rsp, err := c.PutAuthenticationConfigWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAuthenticationConfigResponse(rsp)
}

func (c *ClientWithResponses) PutAuthenticationConfigWithResponse(ctx context.Context, realm string, id string, body PutAuthenticationConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAuthenticationConfigResponse, error) {
	rsp, err := c.PutAuthenticationConfig(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAuthenticationConfigResponse(rsp)
}

// PostExecutionsWithBodyWithResponse request with arbitrary body returning *PostExecutionsResponse
func (c *ClientWithResponses) PostExecutionsWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostExecutionsResponse, error) {
	rsp, err := c.PostExecutionsWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostExecutionsResponse(rsp)
}

func (c *ClientWithResponses) PostExecutionsWithResponse(ctx context.Context, realm string, body PostExecutionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostExecutionsResponse, error) {
	rsp, err := c.PostExecutions(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostExecutionsResponse(rsp)
}

// DeleteExecutionWithResponse request returning *DeleteExecutionResponse
func (c *ClientWithResponses) DeleteExecutionWithResponse(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*DeleteExecutionResponse, error) {
	rsp, err := c.DeleteExecution(ctx, realm, executionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteExecutionResponse(rsp)
}

// GetExecutionWithResponse request returning *GetExecutionResponse
func (c *ClientWithResponses) GetExecutionWithResponse(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*GetExecutionResponse, error) {
	rsp, err := c.GetExecution(ctx, realm, executionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetExecutionResponse(rsp)
}

// PostExecutionConfigWithBodyWithResponse request with arbitrary body returning *PostExecutionConfigResponse
func (c *ClientWithResponses) PostExecutionConfigWithBodyWithResponse(ctx context.Context, realm string, executionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostExecutionConfigResponse, error) {
	rsp, err := c.PostExecutionConfigWithBody(ctx, realm, executionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostExecutionConfigResponse(rsp)
}

func (c *ClientWithResponses) PostExecutionConfigWithResponse(ctx context.Context, realm string, executionId string, body PostExecutionConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*PostExecutionConfigResponse, error) {
	rsp, err := c.PostExecutionConfig(ctx, realm, executionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostExecutionConfigResponse(rsp)
}

// GetExecutionConfigWithResponse request returning *GetExecutionConfigResponse
func (c *ClientWithResponses) GetExecutionConfigWithResponse(ctx context.Context, realm string, executionId string, id string, reqEditors ...RequestEditorFn) (*GetExecutionConfigResponse, error) {
	rsp, err := c.GetExecutionConfig(ctx, realm, executionId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetExecutionConfigResponse(rsp)
}

// PostExecutionLowerPriorityWithResponse request returning *PostExecutionLowerPriorityResponse
func (c *ClientWithResponses) PostExecutionLowerPriorityWithResponse(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*PostExecutionLowerPriorityResponse, error) {
	rsp, err := c.PostExecutionLowerPriority(ctx, realm, executionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostExecutionLowerPriorityResponse(rsp)
}

// PostExecutionRaisePriorityWithResponse request returning *PostExecutionRaisePriorityResponse
func (c *ClientWithResponses) PostExecutionRaisePriorityWithResponse(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*PostExecutionRaisePriorityResponse, error) {
	rsp, err := c.PostExecutionRaisePriority(ctx, realm, executionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostExecutionRaisePriorityResponse(rsp)
}

// GetFlowsWithResponse request returning *GetFlowsResponse
func (c *ClientWithResponses) GetFlowsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetFlowsResponse, error) {
	rsp, err := c.GetFlows(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFlowsResponse(rsp)
}

// PostFlowsWithBodyWithResponse request with arbitrary body returning *PostFlowsResponse
func (c *ClientWithResponses) PostFlowsWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFlowsResponse, error) {
	rsp, err := c.PostFlowsWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFlowsResponse(rsp)
}

func (c *ClientWithResponses) PostFlowsWithResponse(ctx context.Context, realm string, body PostFlowsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFlowsResponse, error) {
	rsp, err := c.PostFlows(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFlowsResponse(rsp)
}

// PostCopyWithBodyWithResponse request with arbitrary body returning *PostCopyResponse
func (c *ClientWithResponses) PostCopyWithBodyWithResponse(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCopyResponse, error) {
	rsp, err := c.PostCopyWithBody(ctx, realm, flowAlias, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCopyResponse(rsp)
}

func (c *ClientWithResponses) PostCopyWithResponse(ctx context.Context, realm string, flowAlias string, body PostCopyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCopyResponse, error) {
	rsp, err := c.PostCopy(ctx, realm, flowAlias, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCopyResponse(rsp)
}

// GetExecutionsWithResponse request returning *GetExecutionsResponse
func (c *ClientWithResponses) GetExecutionsWithResponse(ctx context.Context, realm string, flowAlias string, reqEditors ...RequestEditorFn) (*GetExecutionsResponse, error) {
	rsp, err := c.GetExecutions(ctx, realm, flowAlias, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetExecutionsResponse(rsp)
}

// PutExecutionsWithBodyWithResponse request with arbitrary body returning *PutExecutionsResponse
func (c *ClientWithResponses) PutExecutionsWithBodyWithResponse(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutExecutionsResponse, error) {
	rsp, err := c.PutExecutionsWithBody(ctx, realm, flowAlias, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutExecutionsResponse(rsp)
}

func (c *ClientWithResponses) PutExecutionsWithResponse(ctx context.Context, realm string, flowAlias string, body PutExecutionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutExecutionsResponse, error) {
	rsp, err := c.PutExecutions(ctx, realm, flowAlias, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutExecutionsResponse(rsp)
}

// PostExecutionWithBodyWithResponse request with arbitrary body returning *PostExecutionResponse
func (c *ClientWithResponses) PostExecutionWithBodyWithResponse(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostExecutionResponse, error) {
	rsp, err := c.PostExecutionWithBody(ctx, realm, flowAlias, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostExecutionResponse(rsp)
}

func (c *ClientWithResponses) PostExecutionWithResponse(ctx context.Context, realm string, flowAlias string, body PostExecutionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostExecutionResponse, error) {
	rsp, err := c.PostExecution(ctx, realm, flowAlias, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostExecutionResponse(rsp)
}

// PostFlowWithBodyWithResponse request with arbitrary body returning *PostFlowResponse
func (c *ClientWithResponses) PostFlowWithBodyWithResponse(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFlowResponse, error) {
	rsp, err := c.PostFlowWithBody(ctx, realm, flowAlias, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFlowResponse(rsp)
}

func (c *ClientWithResponses) PostFlowWithResponse(ctx context.Context, realm string, flowAlias string, body PostFlowJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFlowResponse, error) {
	rsp, err := c.PostFlow(ctx, realm, flowAlias, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFlowResponse(rsp)
}

// DeleteFlowWithResponse request returning *DeleteFlowResponse
func (c *ClientWithResponses) DeleteFlowWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*DeleteFlowResponse, error) {
	rsp, err := c.DeleteFlow(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFlowResponse(rsp)
}

// GetFlowWithResponse request returning *GetFlowResponse
func (c *ClientWithResponses) GetFlowWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetFlowResponse, error) {
	rsp, err := c.GetFlow(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFlowResponse(rsp)
}

// PutFlowWithBodyWithResponse request with arbitrary body returning *PutFlowResponse
func (c *ClientWithResponses) PutFlowWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutFlowResponse, error) {
	rsp, err := c.PutFlowWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFlowResponse(rsp)
}

func (c *ClientWithResponses) PutFlowWithResponse(ctx context.Context, realm string, id string, body PutFlowJSONRequestBody, reqEditors ...RequestEditorFn) (*PutFlowResponse, error) {
	rsp, err := c.PutFlow(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFlowResponse(rsp)
}

// GetFormActionProvidersWithResponse request returning *GetFormActionProvidersResponse
func (c *ClientWithResponses) GetFormActionProvidersWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetFormActionProvidersResponse, error) {
	rsp, err := c.GetFormActionProviders(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFormActionProvidersResponse(rsp)
}

// GetFormProvidersWithResponse request returning *GetFormProvidersResponse
func (c *ClientWithResponses) GetFormProvidersWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetFormProvidersResponse, error) {
	rsp, err := c.GetFormProviders(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFormProvidersResponse(rsp)
}

// GetPerClientConfigDescriptionWithResponse request returning *GetPerClientConfigDescriptionResponse
func (c *ClientWithResponses) GetPerClientConfigDescriptionWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetPerClientConfigDescriptionResponse, error) {
	rsp, err := c.GetPerClientConfigDescription(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPerClientConfigDescriptionResponse(rsp)
}

// PostRegisterRequiredActionWithBodyWithResponse request with arbitrary body returning *PostRegisterRequiredActionResponse
func (c *ClientWithResponses) PostRegisterRequiredActionWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRegisterRequiredActionResponse, error) {
	rsp, err := c.PostRegisterRequiredActionWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRegisterRequiredActionResponse(rsp)
}

func (c *ClientWithResponses) PostRegisterRequiredActionWithResponse(ctx context.Context, realm string, body PostRegisterRequiredActionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRegisterRequiredActionResponse, error) {
	rsp, err := c.PostRegisterRequiredAction(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRegisterRequiredActionResponse(rsp)
}

// GetRequiredActionsWithResponse request returning *GetRequiredActionsResponse
func (c *ClientWithResponses) GetRequiredActionsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetRequiredActionsResponse, error) {
	rsp, err := c.GetRequiredActions(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRequiredActionsResponse(rsp)
}

// DeleteRequiredActionWithResponse request returning *DeleteRequiredActionResponse
func (c *ClientWithResponses) DeleteRequiredActionWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*DeleteRequiredActionResponse, error) {
	rsp, err := c.DeleteRequiredAction(ctx, realm, alias, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRequiredActionResponse(rsp)
}

// GetRequiredActionWithResponse request returning *GetRequiredActionResponse
func (c *ClientWithResponses) GetRequiredActionWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*GetRequiredActionResponse, error) {
	rsp, err := c.GetRequiredAction(ctx, realm, alias, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRequiredActionResponse(rsp)
}

// PutRequiredActionWithBodyWithResponse request with arbitrary body returning *PutRequiredActionResponse
func (c *ClientWithResponses) PutRequiredActionWithBodyWithResponse(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRequiredActionResponse, error) {
	rsp, err := c.PutRequiredActionWithBody(ctx, realm, alias, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRequiredActionResponse(rsp)
}

func (c *ClientWithResponses) PutRequiredActionWithResponse(ctx context.Context, realm string, alias string, body PutRequiredActionJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRequiredActionResponse, error) {
	rsp, err := c.PutRequiredAction(ctx, realm, alias, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRequiredActionResponse(rsp)
}

// PostRequiredActionLowerPriorityWithResponse request returning *PostRequiredActionLowerPriorityResponse
func (c *ClientWithResponses) PostRequiredActionLowerPriorityWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*PostRequiredActionLowerPriorityResponse, error) {
	rsp, err := c.PostRequiredActionLowerPriority(ctx, realm, alias, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRequiredActionLowerPriorityResponse(rsp)
}

// PostRequiredActionRaisePriorityWithResponse request returning *PostRequiredActionRaisePriorityResponse
func (c *ClientWithResponses) PostRequiredActionRaisePriorityWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*PostRequiredActionRaisePriorityResponse, error) {
	rsp, err := c.PostRequiredActionRaisePriority(ctx, realm, alias, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRequiredActionRaisePriorityResponse(rsp)
}

// GetUnregisteredRequiredActionsWithResponse request returning *GetUnregisteredRequiredActionsResponse
func (c *ClientWithResponses) GetUnregisteredRequiredActionsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetUnregisteredRequiredActionsResponse, error) {
	rsp, err := c.GetUnregisteredRequiredActions(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUnregisteredRequiredActionsResponse(rsp)
}

// PostClientDescriptionConverterWithBodyWithResponse request with arbitrary body returning *PostClientDescriptionConverterResponse
func (c *ClientWithResponses) PostClientDescriptionConverterWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientDescriptionConverterResponse, error) {
	rsp, err := c.PostClientDescriptionConverterWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientDescriptionConverterResponse(rsp)
}

func (c *ClientWithResponses) PostClientDescriptionConverterWithResponse(ctx context.Context, realm string, body PostClientDescriptionConverterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientDescriptionConverterResponse, error) {
	rsp, err := c.PostClientDescriptionConverter(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientDescriptionConverterResponse(rsp)
}

// GetPoliciesWithResponse request returning *GetPoliciesResponse
func (c *ClientWithResponses) GetPoliciesWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetPoliciesResponse, error) {
	rsp, err := c.GetPolicies(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPoliciesResponse(rsp)
}

// PutPoliciesWithBodyWithResponse request with arbitrary body returning *PutPoliciesResponse
func (c *ClientWithResponses) PutPoliciesWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPoliciesResponse, error) {
	rsp, err := c.PutPoliciesWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPoliciesResponse(rsp)
}

func (c *ClientWithResponses) PutPoliciesWithResponse(ctx context.Context, realm string, body PutPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPoliciesResponse, error) {
	rsp, err := c.PutPolicies(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPoliciesResponse(rsp)
}

// GetProfilesWithResponse request returning *GetProfilesResponse
func (c *ClientWithResponses) GetProfilesWithResponse(ctx context.Context, realm string, params *GetProfilesParams, reqEditors ...RequestEditorFn) (*GetProfilesResponse, error) {
	rsp, err := c.GetProfiles(ctx, realm, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProfilesResponse(rsp)
}

// PutProfilesWithBodyWithResponse request with arbitrary body returning *PutProfilesResponse
func (c *ClientWithResponses) PutProfilesWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutProfilesResponse, error) {
	rsp, err := c.PutProfilesWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutProfilesResponse(rsp)
}

func (c *ClientWithResponses) PutProfilesWithResponse(ctx context.Context, realm string, body PutProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutProfilesResponse, error) {
	rsp, err := c.PutProfiles(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutProfilesResponse(rsp)
}

// GetProvidersWithResponse request returning *GetProvidersResponse
func (c *ClientWithResponses) GetProvidersWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetProvidersResponse, error) {
	rsp, err := c.GetProviders(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProvidersResponse(rsp)
}

// GetClientScopesWithResponse request returning *GetClientScopesResponse
func (c *ClientWithResponses) GetClientScopesWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetClientScopesResponse, error) {
	rsp, err := c.GetClientScopes(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientScopesResponse(rsp)
}

// PostClientScopesWithBodyWithResponse request with arbitrary body returning *PostClientScopesResponse
func (c *ClientWithResponses) PostClientScopesWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientScopesResponse, error) {
	rsp, err := c.PostClientScopesWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientScopesResponse(rsp)
}

func (c *ClientWithResponses) PostClientScopesWithResponse(ctx context.Context, realm string, body PostClientScopesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientScopesResponse, error) {
	rsp, err := c.PostClientScopes(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientScopesResponse(rsp)
}

// DeleteClientScopeProtocolMappersModelWithResponse request returning *DeleteClientScopeProtocolMappersModelResponse
func (c *ClientWithResponses) DeleteClientScopeProtocolMappersModelWithResponse(ctx context.Context, realm string, id1 string, id2 string, reqEditors ...RequestEditorFn) (*DeleteClientScopeProtocolMappersModelResponse, error) {
	rsp, err := c.DeleteClientScopeProtocolMappersModel(ctx, realm, id1, id2, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClientScopeProtocolMappersModelResponse(rsp)
}

// GetClientScopeProtocolMappersModelWithResponse request returning *GetClientScopeProtocolMappersModelResponse
func (c *ClientWithResponses) GetClientScopeProtocolMappersModelWithResponse(ctx context.Context, realm string, id1 string, id2 string, reqEditors ...RequestEditorFn) (*GetClientScopeProtocolMappersModelResponse, error) {
	rsp, err := c.GetClientScopeProtocolMappersModel(ctx, realm, id1, id2, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientScopeProtocolMappersModelResponse(rsp)
}

// PutClientScopeProtocolMappersModelWithBodyWithResponse request with arbitrary body returning *PutClientScopeProtocolMappersModelResponse
func (c *ClientWithResponses) PutClientScopeProtocolMappersModelWithBodyWithResponse(ctx context.Context, realm string, id1 string, id2 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutClientScopeProtocolMappersModelResponse, error) {
	rsp, err := c.PutClientScopeProtocolMappersModelWithBody(ctx, realm, id1, id2, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutClientScopeProtocolMappersModelResponse(rsp)
}

func (c *ClientWithResponses) PutClientScopeProtocolMappersModelWithResponse(ctx context.Context, realm string, id1 string, id2 string, body PutClientScopeProtocolMappersModelJSONRequestBody, reqEditors ...RequestEditorFn) (*PutClientScopeProtocolMappersModelResponse, error) {
	rsp, err := c.PutClientScopeProtocolMappersModel(ctx, realm, id1, id2, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutClientScopeProtocolMappersModelResponse(rsp)
}

// DeleteClientScopeWithResponse request returning *DeleteClientScopeResponse
func (c *ClientWithResponses) DeleteClientScopeWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*DeleteClientScopeResponse, error) {
	rsp, err := c.DeleteClientScope(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClientScopeResponse(rsp)
}

// GetClientScopeWithResponse request returning *GetClientScopeResponse
func (c *ClientWithResponses) GetClientScopeWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetClientScopeResponse, error) {
	rsp, err := c.GetClientScope(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientScopeResponse(rsp)
}

// PutClientScopeWithBodyWithResponse request with arbitrary body returning *PutClientScopeResponse
func (c *ClientWithResponses) PutClientScopeWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutClientScopeResponse, error) {
	rsp, err := c.PutClientScopeWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutClientScopeResponse(rsp)
}

func (c *ClientWithResponses) PutClientScopeWithResponse(ctx context.Context, realm string, id string, body PutClientScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutClientScopeResponse, error) {
	rsp, err := c.PutClientScope(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutClientScopeResponse(rsp)
}

// PostClientScopeProtocolMappersAddModelsWithBodyWithResponse request with arbitrary body returning *PostClientScopeProtocolMappersAddModelsResponse
func (c *ClientWithResponses) PostClientScopeProtocolMappersAddModelsWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientScopeProtocolMappersAddModelsResponse, error) {
	rsp, err := c.PostClientScopeProtocolMappersAddModelsWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientScopeProtocolMappersAddModelsResponse(rsp)
}

func (c *ClientWithResponses) PostClientScopeProtocolMappersAddModelsWithResponse(ctx context.Context, realm string, id string, body PostClientScopeProtocolMappersAddModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientScopeProtocolMappersAddModelsResponse, error) {
	rsp, err := c.PostClientScopeProtocolMappersAddModels(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientScopeProtocolMappersAddModelsResponse(rsp)
}

// GetClientScopeProtocolMappersModelsWithResponse request returning *GetClientScopeProtocolMappersModelsResponse
func (c *ClientWithResponses) GetClientScopeProtocolMappersModelsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetClientScopeProtocolMappersModelsResponse, error) {
	rsp, err := c.GetClientScopeProtocolMappersModels(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientScopeProtocolMappersModelsResponse(rsp)
}

// PostClientScopeProtocolMappersModelsWithBodyWithResponse request with arbitrary body returning *PostClientScopeProtocolMappersModelsResponse
func (c *ClientWithResponses) PostClientScopeProtocolMappersModelsWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientScopeProtocolMappersModelsResponse, error) {
	rsp, err := c.PostClientScopeProtocolMappersModelsWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientScopeProtocolMappersModelsResponse(rsp)
}

func (c *ClientWithResponses) PostClientScopeProtocolMappersModelsWithResponse(ctx context.Context, realm string, id string, body PostClientScopeProtocolMappersModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientScopeProtocolMappersModelsResponse, error) {
	rsp, err := c.PostClientScopeProtocolMappersModels(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientScopeProtocolMappersModelsResponse(rsp)
}

// GetClientScopeProtocolMappersProtocolWithResponse request returning *GetClientScopeProtocolMappersProtocolResponse
func (c *ClientWithResponses) GetClientScopeProtocolMappersProtocolWithResponse(ctx context.Context, realm string, id string, protocol string, reqEditors ...RequestEditorFn) (*GetClientScopeProtocolMappersProtocolResponse, error) {
	rsp, err := c.GetClientScopeProtocolMappersProtocol(ctx, realm, id, protocol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientScopeProtocolMappersProtocolResponse(rsp)
}

// GetClientScopeScopeMappingsWithResponse request returning *GetClientScopeScopeMappingsResponse
func (c *ClientWithResponses) GetClientScopeScopeMappingsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetClientScopeScopeMappingsResponse, error) {
	rsp, err := c.GetClientScopeScopeMappings(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientScopeScopeMappingsResponse(rsp)
}

// DeleteClientScopeScopeMappingsClientWithBodyWithResponse request with arbitrary body returning *DeleteClientScopeScopeMappingsClientResponse
func (c *ClientWithResponses) DeleteClientScopeScopeMappingsClientWithBodyWithResponse(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteClientScopeScopeMappingsClientResponse, error) {
	rsp, err := c.DeleteClientScopeScopeMappingsClientWithBody(ctx, realm, id, client, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClientScopeScopeMappingsClientResponse(rsp)
}

func (c *ClientWithResponses) DeleteClientScopeScopeMappingsClientWithResponse(ctx context.Context, realm string, id string, client string, body DeleteClientScopeScopeMappingsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteClientScopeScopeMappingsClientResponse, error) {
	rsp, err := c.DeleteClientScopeScopeMappingsClient(ctx, realm, id, client, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClientScopeScopeMappingsClientResponse(rsp)
}

// GetClientScopeScopeMappingsClientWithResponse request returning *GetClientScopeScopeMappingsClientResponse
func (c *ClientWithResponses) GetClientScopeScopeMappingsClientWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*GetClientScopeScopeMappingsClientResponse, error) {
	rsp, err := c.GetClientScopeScopeMappingsClient(ctx, realm, id, client, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientScopeScopeMappingsClientResponse(rsp)
}

// PostClientScopeScopeMappingsClientWithBodyWithResponse request with arbitrary body returning *PostClientScopeScopeMappingsClientResponse
func (c *ClientWithResponses) PostClientScopeScopeMappingsClientWithBodyWithResponse(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientScopeScopeMappingsClientResponse, error) {
	rsp, err := c.PostClientScopeScopeMappingsClientWithBody(ctx, realm, id, client, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientScopeScopeMappingsClientResponse(rsp)
}

func (c *ClientWithResponses) PostClientScopeScopeMappingsClientWithResponse(ctx context.Context, realm string, id string, client string, body PostClientScopeScopeMappingsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientScopeScopeMappingsClientResponse, error) {
	rsp, err := c.PostClientScopeScopeMappingsClient(ctx, realm, id, client, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientScopeScopeMappingsClientResponse(rsp)
}

// GetClientScopeScopeMappingsClientAvailableWithResponse request returning *GetClientScopeScopeMappingsClientAvailableResponse
func (c *ClientWithResponses) GetClientScopeScopeMappingsClientAvailableWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*GetClientScopeScopeMappingsClientAvailableResponse, error) {
	rsp, err := c.GetClientScopeScopeMappingsClientAvailable(ctx, realm, id, client, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientScopeScopeMappingsClientAvailableResponse(rsp)
}

// GetClientScopeScopeMappingsClientCompositeWithResponse request returning *GetClientScopeScopeMappingsClientCompositeResponse
func (c *ClientWithResponses) GetClientScopeScopeMappingsClientCompositeWithResponse(ctx context.Context, realm string, id string, client string, params *GetClientScopeScopeMappingsClientCompositeParams, reqEditors ...RequestEditorFn) (*GetClientScopeScopeMappingsClientCompositeResponse, error) {
	rsp, err := c.GetClientScopeScopeMappingsClientComposite(ctx, realm, id, client, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientScopeScopeMappingsClientCompositeResponse(rsp)
}

// DeleteClientScopeScopeMappingsRealmWithBodyWithResponse request with arbitrary body returning *DeleteClientScopeScopeMappingsRealmResponse
func (c *ClientWithResponses) DeleteClientScopeScopeMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteClientScopeScopeMappingsRealmResponse, error) {
	rsp, err := c.DeleteClientScopeScopeMappingsRealmWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClientScopeScopeMappingsRealmResponse(rsp)
}

func (c *ClientWithResponses) DeleteClientScopeScopeMappingsRealmWithResponse(ctx context.Context, realm string, id string, body DeleteClientScopeScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteClientScopeScopeMappingsRealmResponse, error) {
	rsp, err := c.DeleteClientScopeScopeMappingsRealm(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClientScopeScopeMappingsRealmResponse(rsp)
}

// GetClientScopeScopeMappingsRealmWithResponse request returning *GetClientScopeScopeMappingsRealmResponse
func (c *ClientWithResponses) GetClientScopeScopeMappingsRealmWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetClientScopeScopeMappingsRealmResponse, error) {
	rsp, err := c.GetClientScopeScopeMappingsRealm(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientScopeScopeMappingsRealmResponse(rsp)
}

// PostClientScopeScopeMappingsRealmWithBodyWithResponse request with arbitrary body returning *PostClientScopeScopeMappingsRealmResponse
func (c *ClientWithResponses) PostClientScopeScopeMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientScopeScopeMappingsRealmResponse, error) {
	rsp, err := c.PostClientScopeScopeMappingsRealmWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientScopeScopeMappingsRealmResponse(rsp)
}

func (c *ClientWithResponses) PostClientScopeScopeMappingsRealmWithResponse(ctx context.Context, realm string, id string, body PostClientScopeScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientScopeScopeMappingsRealmResponse, error) {
	rsp, err := c.PostClientScopeScopeMappingsRealm(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientScopeScopeMappingsRealmResponse(rsp)
}

// GetClientScopeScopeMappingsRealmAvailableWithResponse request returning *GetClientScopeScopeMappingsRealmAvailableResponse
func (c *ClientWithResponses) GetClientScopeScopeMappingsRealmAvailableWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetClientScopeScopeMappingsRealmAvailableResponse, error) {
	rsp, err := c.GetClientScopeScopeMappingsRealmAvailable(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientScopeScopeMappingsRealmAvailableResponse(rsp)
}

// GetClientScopeScopeMappingsRealmCompositeWithResponse request returning *GetClientScopeScopeMappingsRealmCompositeResponse
func (c *ClientWithResponses) GetClientScopeScopeMappingsRealmCompositeWithResponse(ctx context.Context, realm string, id string, params *GetClientScopeScopeMappingsRealmCompositeParams, reqEditors ...RequestEditorFn) (*GetClientScopeScopeMappingsRealmCompositeResponse, error) {
	rsp, err := c.GetClientScopeScopeMappingsRealmComposite(ctx, realm, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientScopeScopeMappingsRealmCompositeResponse(rsp)
}

// GetClientSessionStatsWithResponse request returning *GetClientSessionStatsResponse
func (c *ClientWithResponses) GetClientSessionStatsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetClientSessionStatsResponse, error) {
	rsp, err := c.GetClientSessionStats(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientSessionStatsResponse(rsp)
}

// GetClientTemplatesWithResponse request returning *GetClientTemplatesResponse
func (c *ClientWithResponses) GetClientTemplatesWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetClientTemplatesResponse, error) {
	rsp, err := c.GetClientTemplates(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientTemplatesResponse(rsp)
}

// PostClientTemplatesWithBodyWithResponse request with arbitrary body returning *PostClientTemplatesResponse
func (c *ClientWithResponses) PostClientTemplatesWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientTemplatesResponse, error) {
	rsp, err := c.PostClientTemplatesWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientTemplatesResponse(rsp)
}

func (c *ClientWithResponses) PostClientTemplatesWithResponse(ctx context.Context, realm string, body PostClientTemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientTemplatesResponse, error) {
	rsp, err := c.PostClientTemplates(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientTemplatesResponse(rsp)
}

// DeleteClientTemplateProtocolMappersModelWithResponse request returning *DeleteClientTemplateProtocolMappersModelResponse
func (c *ClientWithResponses) DeleteClientTemplateProtocolMappersModelWithResponse(ctx context.Context, realm string, id1 string, id2 string, reqEditors ...RequestEditorFn) (*DeleteClientTemplateProtocolMappersModelResponse, error) {
	rsp, err := c.DeleteClientTemplateProtocolMappersModel(ctx, realm, id1, id2, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClientTemplateProtocolMappersModelResponse(rsp)
}

// GetClientTemplateProtocolMappersModelWithResponse request returning *GetClientTemplateProtocolMappersModelResponse
func (c *ClientWithResponses) GetClientTemplateProtocolMappersModelWithResponse(ctx context.Context, realm string, id1 string, id2 string, reqEditors ...RequestEditorFn) (*GetClientTemplateProtocolMappersModelResponse, error) {
	rsp, err := c.GetClientTemplateProtocolMappersModel(ctx, realm, id1, id2, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientTemplateProtocolMappersModelResponse(rsp)
}

// PutClientTemplateProtocolMappersModelWithBodyWithResponse request with arbitrary body returning *PutClientTemplateProtocolMappersModelResponse
func (c *ClientWithResponses) PutClientTemplateProtocolMappersModelWithBodyWithResponse(ctx context.Context, realm string, id1 string, id2 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutClientTemplateProtocolMappersModelResponse, error) {
	rsp, err := c.PutClientTemplateProtocolMappersModelWithBody(ctx, realm, id1, id2, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutClientTemplateProtocolMappersModelResponse(rsp)
}

func (c *ClientWithResponses) PutClientTemplateProtocolMappersModelWithResponse(ctx context.Context, realm string, id1 string, id2 string, body PutClientTemplateProtocolMappersModelJSONRequestBody, reqEditors ...RequestEditorFn) (*PutClientTemplateProtocolMappersModelResponse, error) {
	rsp, err := c.PutClientTemplateProtocolMappersModel(ctx, realm, id1, id2, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutClientTemplateProtocolMappersModelResponse(rsp)
}

// DeleteClientTemplateWithResponse request returning *DeleteClientTemplateResponse
func (c *ClientWithResponses) DeleteClientTemplateWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*DeleteClientTemplateResponse, error) {
	rsp, err := c.DeleteClientTemplate(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClientTemplateResponse(rsp)
}

// GetClientTemplateWithResponse request returning *GetClientTemplateResponse
func (c *ClientWithResponses) GetClientTemplateWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetClientTemplateResponse, error) {
	rsp, err := c.GetClientTemplate(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientTemplateResponse(rsp)
}

// PutClientTemplateWithBodyWithResponse request with arbitrary body returning *PutClientTemplateResponse
func (c *ClientWithResponses) PutClientTemplateWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutClientTemplateResponse, error) {
	rsp, err := c.PutClientTemplateWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutClientTemplateResponse(rsp)
}

func (c *ClientWithResponses) PutClientTemplateWithResponse(ctx context.Context, realm string, id string, body PutClientTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*PutClientTemplateResponse, error) {
	rsp, err := c.PutClientTemplate(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutClientTemplateResponse(rsp)
}

// PostClientTemplateProtocolMappersAddModelsWithBodyWithResponse request with arbitrary body returning *PostClientTemplateProtocolMappersAddModelsResponse
func (c *ClientWithResponses) PostClientTemplateProtocolMappersAddModelsWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientTemplateProtocolMappersAddModelsResponse, error) {
	rsp, err := c.PostClientTemplateProtocolMappersAddModelsWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientTemplateProtocolMappersAddModelsResponse(rsp)
}

func (c *ClientWithResponses) PostClientTemplateProtocolMappersAddModelsWithResponse(ctx context.Context, realm string, id string, body PostClientTemplateProtocolMappersAddModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientTemplateProtocolMappersAddModelsResponse, error) {
	rsp, err := c.PostClientTemplateProtocolMappersAddModels(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientTemplateProtocolMappersAddModelsResponse(rsp)
}

// GetClientTemplateProtocolMappersModelsWithResponse request returning *GetClientTemplateProtocolMappersModelsResponse
func (c *ClientWithResponses) GetClientTemplateProtocolMappersModelsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetClientTemplateProtocolMappersModelsResponse, error) {
	rsp, err := c.GetClientTemplateProtocolMappersModels(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientTemplateProtocolMappersModelsResponse(rsp)
}

// PostClientTemplateProtocolMappersModelsWithBodyWithResponse request with arbitrary body returning *PostClientTemplateProtocolMappersModelsResponse
func (c *ClientWithResponses) PostClientTemplateProtocolMappersModelsWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientTemplateProtocolMappersModelsResponse, error) {
	rsp, err := c.PostClientTemplateProtocolMappersModelsWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientTemplateProtocolMappersModelsResponse(rsp)
}

func (c *ClientWithResponses) PostClientTemplateProtocolMappersModelsWithResponse(ctx context.Context, realm string, id string, body PostClientTemplateProtocolMappersModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientTemplateProtocolMappersModelsResponse, error) {
	rsp, err := c.PostClientTemplateProtocolMappersModels(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientTemplateProtocolMappersModelsResponse(rsp)
}

// GetClientTemplateProtocolMappersProtocolWithResponse request returning *GetClientTemplateProtocolMappersProtocolResponse
func (c *ClientWithResponses) GetClientTemplateProtocolMappersProtocolWithResponse(ctx context.Context, realm string, id string, protocol string, reqEditors ...RequestEditorFn) (*GetClientTemplateProtocolMappersProtocolResponse, error) {
	rsp, err := c.GetClientTemplateProtocolMappersProtocol(ctx, realm, id, protocol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientTemplateProtocolMappersProtocolResponse(rsp)
}

// GetClientTemplateScopeMappingsWithResponse request returning *GetClientTemplateScopeMappingsResponse
func (c *ClientWithResponses) GetClientTemplateScopeMappingsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetClientTemplateScopeMappingsResponse, error) {
	rsp, err := c.GetClientTemplateScopeMappings(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientTemplateScopeMappingsResponse(rsp)
}

// DeleteClientTemplateScopeMappingsClientWithBodyWithResponse request with arbitrary body returning *DeleteClientTemplateScopeMappingsClientResponse
func (c *ClientWithResponses) DeleteClientTemplateScopeMappingsClientWithBodyWithResponse(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteClientTemplateScopeMappingsClientResponse, error) {
	rsp, err := c.DeleteClientTemplateScopeMappingsClientWithBody(ctx, realm, id, client, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClientTemplateScopeMappingsClientResponse(rsp)
}

func (c *ClientWithResponses) DeleteClientTemplateScopeMappingsClientWithResponse(ctx context.Context, realm string, id string, client string, body DeleteClientTemplateScopeMappingsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteClientTemplateScopeMappingsClientResponse, error) {
	rsp, err := c.DeleteClientTemplateScopeMappingsClient(ctx, realm, id, client, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClientTemplateScopeMappingsClientResponse(rsp)
}

// GetClientTemplateScopeMappingsClientWithResponse request returning *GetClientTemplateScopeMappingsClientResponse
func (c *ClientWithResponses) GetClientTemplateScopeMappingsClientWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*GetClientTemplateScopeMappingsClientResponse, error) {
	rsp, err := c.GetClientTemplateScopeMappingsClient(ctx, realm, id, client, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientTemplateScopeMappingsClientResponse(rsp)
}

// PostClientTemplateScopeMappingsClientWithBodyWithResponse request with arbitrary body returning *PostClientTemplateScopeMappingsClientResponse
func (c *ClientWithResponses) PostClientTemplateScopeMappingsClientWithBodyWithResponse(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientTemplateScopeMappingsClientResponse, error) {
	rsp, err := c.PostClientTemplateScopeMappingsClientWithBody(ctx, realm, id, client, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientTemplateScopeMappingsClientResponse(rsp)
}

func (c *ClientWithResponses) PostClientTemplateScopeMappingsClientWithResponse(ctx context.Context, realm string, id string, client string, body PostClientTemplateScopeMappingsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientTemplateScopeMappingsClientResponse, error) {
	rsp, err := c.PostClientTemplateScopeMappingsClient(ctx, realm, id, client, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientTemplateScopeMappingsClientResponse(rsp)
}

// GetClientTemplateScopeMappingsClientAvailableWithResponse request returning *GetClientTemplateScopeMappingsClientAvailableResponse
func (c *ClientWithResponses) GetClientTemplateScopeMappingsClientAvailableWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*GetClientTemplateScopeMappingsClientAvailableResponse, error) {
	rsp, err := c.GetClientTemplateScopeMappingsClientAvailable(ctx, realm, id, client, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientTemplateScopeMappingsClientAvailableResponse(rsp)
}

// GetClientTemplateScopeMappingsClientCompositeWithResponse request returning *GetClientTemplateScopeMappingsClientCompositeResponse
func (c *ClientWithResponses) GetClientTemplateScopeMappingsClientCompositeWithResponse(ctx context.Context, realm string, id string, client string, params *GetClientTemplateScopeMappingsClientCompositeParams, reqEditors ...RequestEditorFn) (*GetClientTemplateScopeMappingsClientCompositeResponse, error) {
	rsp, err := c.GetClientTemplateScopeMappingsClientComposite(ctx, realm, id, client, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientTemplateScopeMappingsClientCompositeResponse(rsp)
}

// DeleteClientTemplateScopeMappingsRealmWithBodyWithResponse request with arbitrary body returning *DeleteClientTemplateScopeMappingsRealmResponse
func (c *ClientWithResponses) DeleteClientTemplateScopeMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteClientTemplateScopeMappingsRealmResponse, error) {
	rsp, err := c.DeleteClientTemplateScopeMappingsRealmWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClientTemplateScopeMappingsRealmResponse(rsp)
}

func (c *ClientWithResponses) DeleteClientTemplateScopeMappingsRealmWithResponse(ctx context.Context, realm string, id string, body DeleteClientTemplateScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteClientTemplateScopeMappingsRealmResponse, error) {
	rsp, err := c.DeleteClientTemplateScopeMappingsRealm(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClientTemplateScopeMappingsRealmResponse(rsp)
}

// GetClientTemplateScopeMappingsRealmWithResponse request returning *GetClientTemplateScopeMappingsRealmResponse
func (c *ClientWithResponses) GetClientTemplateScopeMappingsRealmWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetClientTemplateScopeMappingsRealmResponse, error) {
	rsp, err := c.GetClientTemplateScopeMappingsRealm(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientTemplateScopeMappingsRealmResponse(rsp)
}

// PostClientTemplateScopeMappingsRealmWithBodyWithResponse request with arbitrary body returning *PostClientTemplateScopeMappingsRealmResponse
func (c *ClientWithResponses) PostClientTemplateScopeMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientTemplateScopeMappingsRealmResponse, error) {
	rsp, err := c.PostClientTemplateScopeMappingsRealmWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientTemplateScopeMappingsRealmResponse(rsp)
}

func (c *ClientWithResponses) PostClientTemplateScopeMappingsRealmWithResponse(ctx context.Context, realm string, id string, body PostClientTemplateScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientTemplateScopeMappingsRealmResponse, error) {
	rsp, err := c.PostClientTemplateScopeMappingsRealm(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientTemplateScopeMappingsRealmResponse(rsp)
}

// GetClientTemplateScopeMappingsRealmAvailableWithResponse request returning *GetClientTemplateScopeMappingsRealmAvailableResponse
func (c *ClientWithResponses) GetClientTemplateScopeMappingsRealmAvailableWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetClientTemplateScopeMappingsRealmAvailableResponse, error) {
	rsp, err := c.GetClientTemplateScopeMappingsRealmAvailable(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientTemplateScopeMappingsRealmAvailableResponse(rsp)
}

// GetClientTemplateScopeMappingsRealmCompositeWithResponse request returning *GetClientTemplateScopeMappingsRealmCompositeResponse
func (c *ClientWithResponses) GetClientTemplateScopeMappingsRealmCompositeWithResponse(ctx context.Context, realm string, id string, params *GetClientTemplateScopeMappingsRealmCompositeParams, reqEditors ...RequestEditorFn) (*GetClientTemplateScopeMappingsRealmCompositeResponse, error) {
	rsp, err := c.GetClientTemplateScopeMappingsRealmComposite(ctx, realm, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientTemplateScopeMappingsRealmCompositeResponse(rsp)
}

// GetClientsWithResponse request returning *GetClientsResponse
func (c *ClientWithResponses) GetClientsWithResponse(ctx context.Context, realm string, params *GetClientsParams, reqEditors ...RequestEditorFn) (*GetClientsResponse, error) {
	rsp, err := c.GetClients(ctx, realm, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientsResponse(rsp)
}

// PostClientsWithBodyWithResponse request with arbitrary body returning *PostClientsResponse
func (c *ClientWithResponses) PostClientsWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientsResponse, error) {
	rsp, err := c.PostClientsWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientsResponse(rsp)
}

func (c *ClientWithResponses) PostClientsWithResponse(ctx context.Context, realm string, body PostClientsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientsResponse, error) {
	rsp, err := c.PostClients(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientsResponse(rsp)
}

// GetClientsInitialAccessWithResponse request returning *GetClientsInitialAccessResponse
func (c *ClientWithResponses) GetClientsInitialAccessWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetClientsInitialAccessResponse, error) {
	rsp, err := c.GetClientsInitialAccess(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientsInitialAccessResponse(rsp)
}

// PostClientsInitialAccessWithBodyWithResponse request with arbitrary body returning *PostClientsInitialAccessResponse
func (c *ClientWithResponses) PostClientsInitialAccessWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientsInitialAccessResponse, error) {
	rsp, err := c.PostClientsInitialAccessWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientsInitialAccessResponse(rsp)
}

func (c *ClientWithResponses) PostClientsInitialAccessWithResponse(ctx context.Context, realm string, body PostClientsInitialAccessJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientsInitialAccessResponse, error) {
	rsp, err := c.PostClientsInitialAccess(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientsInitialAccessResponse(rsp)
}

// DeleteClientsInitialAccesWithResponse request returning *DeleteClientsInitialAccesResponse
func (c *ClientWithResponses) DeleteClientsInitialAccesWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*DeleteClientsInitialAccesResponse, error) {
	rsp, err := c.DeleteClientsInitialAcces(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClientsInitialAccesResponse(rsp)
}

// DeleteClientProtocolMappersModelWithResponse request returning *DeleteClientProtocolMappersModelResponse
func (c *ClientWithResponses) DeleteClientProtocolMappersModelWithResponse(ctx context.Context, realm string, id1 string, id2 string, reqEditors ...RequestEditorFn) (*DeleteClientProtocolMappersModelResponse, error) {
	rsp, err := c.DeleteClientProtocolMappersModel(ctx, realm, id1, id2, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClientProtocolMappersModelResponse(rsp)
}

// GetClientProtocolMappersModelWithResponse request returning *GetClientProtocolMappersModelResponse
func (c *ClientWithResponses) GetClientProtocolMappersModelWithResponse(ctx context.Context, realm string, id1 string, id2 string, reqEditors ...RequestEditorFn) (*GetClientProtocolMappersModelResponse, error) {
	rsp, err := c.GetClientProtocolMappersModel(ctx, realm, id1, id2, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientProtocolMappersModelResponse(rsp)
}

// PutClientProtocolMappersModelWithBodyWithResponse request with arbitrary body returning *PutClientProtocolMappersModelResponse
func (c *ClientWithResponses) PutClientProtocolMappersModelWithBodyWithResponse(ctx context.Context, realm string, id1 string, id2 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutClientProtocolMappersModelResponse, error) {
	rsp, err := c.PutClientProtocolMappersModelWithBody(ctx, realm, id1, id2, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutClientProtocolMappersModelResponse(rsp)
}

func (c *ClientWithResponses) PutClientProtocolMappersModelWithResponse(ctx context.Context, realm string, id1 string, id2 string, body PutClientProtocolMappersModelJSONRequestBody, reqEditors ...RequestEditorFn) (*PutClientProtocolMappersModelResponse, error) {
	rsp, err := c.PutClientProtocolMappersModel(ctx, realm, id1, id2, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutClientProtocolMappersModelResponse(rsp)
}

// DeleteClientByRealmByIdWithResponse request returning *DeleteClientByRealmByIdResponse
func (c *ClientWithResponses) DeleteClientByRealmByIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*DeleteClientByRealmByIdResponse, error) {
	rsp, err := c.DeleteClientByRealmById(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClientByRealmByIdResponse(rsp)
}

// GetClientByRealmByIdWithResponse request returning *GetClientByRealmByIdResponse
func (c *ClientWithResponses) GetClientByRealmByIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetClientByRealmByIdResponse, error) {
	rsp, err := c.GetClientByRealmById(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientByRealmByIdResponse(rsp)
}

// PutClientWithBodyWithResponse request with arbitrary body returning *PutClientResponse
func (c *ClientWithResponses) PutClientWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutClientResponse, error) {
	rsp, err := c.PutClientWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutClientResponse(rsp)
}

func (c *ClientWithResponses) PutClientWithResponse(ctx context.Context, realm string, id string, body PutClientJSONRequestBody, reqEditors ...RequestEditorFn) (*PutClientResponse, error) {
	rsp, err := c.PutClient(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutClientResponse(rsp)
}

// GetCertificateWithResponse request returning *GetCertificateResponse
func (c *ClientWithResponses) GetCertificateWithResponse(ctx context.Context, realm string, id string, attr string, reqEditors ...RequestEditorFn) (*GetCertificateResponse, error) {
	rsp, err := c.GetCertificate(ctx, realm, id, attr, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCertificateResponse(rsp)
}

// PostDownloadWithBodyWithResponse request with arbitrary body returning *PostDownloadResponse
func (c *ClientWithResponses) PostDownloadWithBodyWithResponse(ctx context.Context, realm string, id string, attr string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDownloadResponse, error) {
	rsp, err := c.PostDownloadWithBody(ctx, realm, id, attr, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDownloadResponse(rsp)
}

func (c *ClientWithResponses) PostDownloadWithResponse(ctx context.Context, realm string, id string, attr string, body PostDownloadJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDownloadResponse, error) {
	rsp, err := c.PostDownload(ctx, realm, id, attr, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDownloadResponse(rsp)
}

// PostGenerateWithResponse request returning *PostGenerateResponse
func (c *ClientWithResponses) PostGenerateWithResponse(ctx context.Context, realm string, id string, attr string, reqEditors ...RequestEditorFn) (*PostGenerateResponse, error) {
	rsp, err := c.PostGenerate(ctx, realm, id, attr, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGenerateResponse(rsp)
}

// PostGenerateAndDownloadWithBodyWithResponse request with arbitrary body returning *PostGenerateAndDownloadResponse
func (c *ClientWithResponses) PostGenerateAndDownloadWithBodyWithResponse(ctx context.Context, realm string, id string, attr string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGenerateAndDownloadResponse, error) {
	rsp, err := c.PostGenerateAndDownloadWithBody(ctx, realm, id, attr, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGenerateAndDownloadResponse(rsp)
}

func (c *ClientWithResponses) PostGenerateAndDownloadWithResponse(ctx context.Context, realm string, id string, attr string, body PostGenerateAndDownloadJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGenerateAndDownloadResponse, error) {
	rsp, err := c.PostGenerateAndDownload(ctx, realm, id, attr, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGenerateAndDownloadResponse(rsp)
}

// PostUploadWithResponse request returning *PostUploadResponse
func (c *ClientWithResponses) PostUploadWithResponse(ctx context.Context, realm string, id string, attr string, reqEditors ...RequestEditorFn) (*PostUploadResponse, error) {
	rsp, err := c.PostUpload(ctx, realm, id, attr, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUploadResponse(rsp)
}

// PostUploadCertificateWithResponse request returning *PostUploadCertificateResponse
func (c *ClientWithResponses) PostUploadCertificateWithResponse(ctx context.Context, realm string, id string, attr string, reqEditors ...RequestEditorFn) (*PostUploadCertificateResponse, error) {
	rsp, err := c.PostUploadCertificate(ctx, realm, id, attr, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUploadCertificateResponse(rsp)
}

// GetClientSecretWithResponse request returning *GetClientSecretResponse
func (c *ClientWithResponses) GetClientSecretWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetClientSecretResponse, error) {
	rsp, err := c.GetClientSecret(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientSecretResponse(rsp)
}

// PostClientSecretWithResponse request returning *PostClientSecretResponse
func (c *ClientWithResponses) PostClientSecretWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*PostClientSecretResponse, error) {
	rsp, err := c.PostClientSecret(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientSecretResponse(rsp)
}

// DeleteRotatedWithResponse request returning *DeleteRotatedResponse
func (c *ClientWithResponses) DeleteRotatedWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*DeleteRotatedResponse, error) {
	rsp, err := c.DeleteRotated(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRotatedResponse(rsp)
}

// GetRotatedWithResponse request returning *GetRotatedResponse
func (c *ClientWithResponses) GetRotatedWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRotatedResponse, error) {
	rsp, err := c.GetRotated(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRotatedResponse(rsp)
}

// GetDefaultClientScopesWithResponse request returning *GetDefaultClientScopesResponse
func (c *ClientWithResponses) GetDefaultClientScopesWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetDefaultClientScopesResponse, error) {
	rsp, err := c.GetDefaultClientScopes(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDefaultClientScopesResponse(rsp)
}

// DeleteDefaultClientScopeWithResponse request returning *DeleteDefaultClientScopeResponse
func (c *ClientWithResponses) DeleteDefaultClientScopeWithResponse(ctx context.Context, realm string, id string, clientScopeId string, reqEditors ...RequestEditorFn) (*DeleteDefaultClientScopeResponse, error) {
	rsp, err := c.DeleteDefaultClientScope(ctx, realm, id, clientScopeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDefaultClientScopeResponse(rsp)
}

// PutDefaultClientScopeWithResponse request returning *PutDefaultClientScopeResponse
func (c *ClientWithResponses) PutDefaultClientScopeWithResponse(ctx context.Context, realm string, id string, clientScopeId string, reqEditors ...RequestEditorFn) (*PutDefaultClientScopeResponse, error) {
	rsp, err := c.PutDefaultClientScope(ctx, realm, id, clientScopeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDefaultClientScopeResponse(rsp)
}

// GetGenerateExampleAccessTokenWithResponse request returning *GetGenerateExampleAccessTokenResponse
func (c *ClientWithResponses) GetGenerateExampleAccessTokenWithResponse(ctx context.Context, realm string, id string, params *GetGenerateExampleAccessTokenParams, reqEditors ...RequestEditorFn) (*GetGenerateExampleAccessTokenResponse, error) {
	rsp, err := c.GetGenerateExampleAccessToken(ctx, realm, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGenerateExampleAccessTokenResponse(rsp)
}

// GetGenerateExampleIdTokenWithResponse request returning *GetGenerateExampleIdTokenResponse
func (c *ClientWithResponses) GetGenerateExampleIdTokenWithResponse(ctx context.Context, realm string, id string, params *GetGenerateExampleIdTokenParams, reqEditors ...RequestEditorFn) (*GetGenerateExampleIdTokenResponse, error) {
	rsp, err := c.GetGenerateExampleIdToken(ctx, realm, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGenerateExampleIdTokenResponse(rsp)
}

// GetGenerateExampleUserinfoWithResponse request returning *GetGenerateExampleUserinfoResponse
func (c *ClientWithResponses) GetGenerateExampleUserinfoWithResponse(ctx context.Context, realm string, id string, params *GetGenerateExampleUserinfoParams, reqEditors ...RequestEditorFn) (*GetGenerateExampleUserinfoResponse, error) {
	rsp, err := c.GetGenerateExampleUserinfo(ctx, realm, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGenerateExampleUserinfoResponse(rsp)
}

// GetProtocolMappersWithResponse request returning *GetProtocolMappersResponse
func (c *ClientWithResponses) GetProtocolMappersWithResponse(ctx context.Context, realm string, id string, params *GetProtocolMappersParams, reqEditors ...RequestEditorFn) (*GetProtocolMappersResponse, error) {
	rsp, err := c.GetProtocolMappers(ctx, realm, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProtocolMappersResponse(rsp)
}

// GetGrantedWithResponse request returning *GetGrantedResponse
func (c *ClientWithResponses) GetGrantedWithResponse(ctx context.Context, realm string, id string, roleContainerId string, params *GetGrantedParams, reqEditors ...RequestEditorFn) (*GetGrantedResponse, error) {
	rsp, err := c.GetGranted(ctx, realm, id, roleContainerId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGrantedResponse(rsp)
}

// GetNotGrantedWithResponse request returning *GetNotGrantedResponse
func (c *ClientWithResponses) GetNotGrantedWithResponse(ctx context.Context, realm string, id string, roleContainerId string, params *GetNotGrantedParams, reqEditors ...RequestEditorFn) (*GetNotGrantedResponse, error) {
	rsp, err := c.GetNotGranted(ctx, realm, id, roleContainerId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNotGrantedResponse(rsp)
}

// GetInstallationProviderWithResponse request returning *GetInstallationProviderResponse
func (c *ClientWithResponses) GetInstallationProviderWithResponse(ctx context.Context, realm string, id string, providerId string, reqEditors ...RequestEditorFn) (*GetInstallationProviderResponse, error) {
	rsp, err := c.GetInstallationProvider(ctx, realm, id, providerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInstallationProviderResponse(rsp)
}

// GetClientManagementPermissionsWithResponse request returning *GetClientManagementPermissionsResponse
func (c *ClientWithResponses) GetClientManagementPermissionsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetClientManagementPermissionsResponse, error) {
	rsp, err := c.GetClientManagementPermissions(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientManagementPermissionsResponse(rsp)
}

// PutClientManagementPermissionsWithBodyWithResponse request with arbitrary body returning *PutClientManagementPermissionsResponse
func (c *ClientWithResponses) PutClientManagementPermissionsWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutClientManagementPermissionsResponse, error) {
	rsp, err := c.PutClientManagementPermissionsWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutClientManagementPermissionsResponse(rsp)
}

func (c *ClientWithResponses) PutClientManagementPermissionsWithResponse(ctx context.Context, realm string, id string, body PutClientManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutClientManagementPermissionsResponse, error) {
	rsp, err := c.PutClientManagementPermissions(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutClientManagementPermissionsResponse(rsp)
}

// PostNodesWithBodyWithResponse request with arbitrary body returning *PostNodesResponse
func (c *ClientWithResponses) PostNodesWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostNodesResponse, error) {
	rsp, err := c.PostNodesWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNodesResponse(rsp)
}

func (c *ClientWithResponses) PostNodesWithResponse(ctx context.Context, realm string, id string, body PostNodesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostNodesResponse, error) {
	rsp, err := c.PostNodes(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNodesResponse(rsp)
}

// DeleteNodeWithResponse request returning *DeleteNodeResponse
func (c *ClientWithResponses) DeleteNodeWithResponse(ctx context.Context, realm string, id string, node string, reqEditors ...RequestEditorFn) (*DeleteNodeResponse, error) {
	rsp, err := c.DeleteNode(ctx, realm, id, node, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNodeResponse(rsp)
}

// GetOfflineSessionCountWithResponse request returning *GetOfflineSessionCountResponse
func (c *ClientWithResponses) GetOfflineSessionCountWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetOfflineSessionCountResponse, error) {
	rsp, err := c.GetOfflineSessionCount(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOfflineSessionCountResponse(rsp)
}

// GetOfflineSessionsWithResponse request returning *GetOfflineSessionsResponse
func (c *ClientWithResponses) GetOfflineSessionsWithResponse(ctx context.Context, realm string, id string, params *GetOfflineSessionsParams, reqEditors ...RequestEditorFn) (*GetOfflineSessionsResponse, error) {
	rsp, err := c.GetOfflineSessions(ctx, realm, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOfflineSessionsResponse(rsp)
}

// GetOptionalClientScopesWithResponse request returning *GetOptionalClientScopesResponse
func (c *ClientWithResponses) GetOptionalClientScopesWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetOptionalClientScopesResponse, error) {
	rsp, err := c.GetOptionalClientScopes(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOptionalClientScopesResponse(rsp)
}

// DeleteOptionalClientScopeWithResponse request returning *DeleteOptionalClientScopeResponse
func (c *ClientWithResponses) DeleteOptionalClientScopeWithResponse(ctx context.Context, realm string, id string, clientScopeId string, reqEditors ...RequestEditorFn) (*DeleteOptionalClientScopeResponse, error) {
	rsp, err := c.DeleteOptionalClientScope(ctx, realm, id, clientScopeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOptionalClientScopeResponse(rsp)
}

// PutOptionalClientScopeWithResponse request returning *PutOptionalClientScopeResponse
func (c *ClientWithResponses) PutOptionalClientScopeWithResponse(ctx context.Context, realm string, id string, clientScopeId string, reqEditors ...RequestEditorFn) (*PutOptionalClientScopeResponse, error) {
	rsp, err := c.PutOptionalClientScope(ctx, realm, id, clientScopeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOptionalClientScopeResponse(rsp)
}

// PostClientProtocolMappersAddModelsWithBodyWithResponse request with arbitrary body returning *PostClientProtocolMappersAddModelsResponse
func (c *ClientWithResponses) PostClientProtocolMappersAddModelsWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientProtocolMappersAddModelsResponse, error) {
	rsp, err := c.PostClientProtocolMappersAddModelsWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientProtocolMappersAddModelsResponse(rsp)
}

func (c *ClientWithResponses) PostClientProtocolMappersAddModelsWithResponse(ctx context.Context, realm string, id string, body PostClientProtocolMappersAddModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientProtocolMappersAddModelsResponse, error) {
	rsp, err := c.PostClientProtocolMappersAddModels(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientProtocolMappersAddModelsResponse(rsp)
}

// GetClientProtocolMappersModelsWithResponse request returning *GetClientProtocolMappersModelsResponse
func (c *ClientWithResponses) GetClientProtocolMappersModelsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetClientProtocolMappersModelsResponse, error) {
	rsp, err := c.GetClientProtocolMappersModels(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientProtocolMappersModelsResponse(rsp)
}

// PostClientProtocolMappersModelsWithBodyWithResponse request with arbitrary body returning *PostClientProtocolMappersModelsResponse
func (c *ClientWithResponses) PostClientProtocolMappersModelsWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientProtocolMappersModelsResponse, error) {
	rsp, err := c.PostClientProtocolMappersModelsWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientProtocolMappersModelsResponse(rsp)
}

func (c *ClientWithResponses) PostClientProtocolMappersModelsWithResponse(ctx context.Context, realm string, id string, body PostClientProtocolMappersModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientProtocolMappersModelsResponse, error) {
	rsp, err := c.PostClientProtocolMappersModels(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientProtocolMappersModelsResponse(rsp)
}

// GetClientProtocolMappersProtocolWithResponse request returning *GetClientProtocolMappersProtocolResponse
func (c *ClientWithResponses) GetClientProtocolMappersProtocolWithResponse(ctx context.Context, realm string, id string, protocol string, reqEditors ...RequestEditorFn) (*GetClientProtocolMappersProtocolResponse, error) {
	rsp, err := c.GetClientProtocolMappersProtocol(ctx, realm, id, protocol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientProtocolMappersProtocolResponse(rsp)
}

// PostClientPushRevocationWithResponse request returning *PostClientPushRevocationResponse
func (c *ClientWithResponses) PostClientPushRevocationWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*PostClientPushRevocationResponse, error) {
	rsp, err := c.PostClientPushRevocation(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientPushRevocationResponse(rsp)
}

// PostRegistrationAccessTokenWithResponse request returning *PostRegistrationAccessTokenResponse
func (c *ClientWithResponses) PostRegistrationAccessTokenWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*PostRegistrationAccessTokenResponse, error) {
	rsp, err := c.PostRegistrationAccessToken(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRegistrationAccessTokenResponse(rsp)
}

// GetClientRolesWithResponse request returning *GetClientRolesResponse
func (c *ClientWithResponses) GetClientRolesWithResponse(ctx context.Context, realm string, id string, params *GetClientRolesParams, reqEditors ...RequestEditorFn) (*GetClientRolesResponse, error) {
	rsp, err := c.GetClientRoles(ctx, realm, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientRolesResponse(rsp)
}

// PostClientRolesWithBodyWithResponse request with arbitrary body returning *PostClientRolesResponse
func (c *ClientWithResponses) PostClientRolesWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientRolesResponse, error) {
	rsp, err := c.PostClientRolesWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientRolesResponse(rsp)
}

func (c *ClientWithResponses) PostClientRolesWithResponse(ctx context.Context, realm string, id string, body PostClientRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientRolesResponse, error) {
	rsp, err := c.PostClientRoles(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientRolesResponse(rsp)
}

// DeleteClientRoleWithResponse request returning *DeleteClientRoleResponse
func (c *ClientWithResponses) DeleteClientRoleWithResponse(ctx context.Context, realm string, id string, roleName string, reqEditors ...RequestEditorFn) (*DeleteClientRoleResponse, error) {
	rsp, err := c.DeleteClientRole(ctx, realm, id, roleName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClientRoleResponse(rsp)
}

// GetClientRoleWithResponse request returning *GetClientRoleResponse
func (c *ClientWithResponses) GetClientRoleWithResponse(ctx context.Context, realm string, id string, roleName string, reqEditors ...RequestEditorFn) (*GetClientRoleResponse, error) {
	rsp, err := c.GetClientRole(ctx, realm, id, roleName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientRoleResponse(rsp)
}

// PutClientRoleWithBodyWithResponse request with arbitrary body returning *PutClientRoleResponse
func (c *ClientWithResponses) PutClientRoleWithBodyWithResponse(ctx context.Context, realm string, id string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutClientRoleResponse, error) {
	rsp, err := c.PutClientRoleWithBody(ctx, realm, id, roleName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutClientRoleResponse(rsp)
}

func (c *ClientWithResponses) PutClientRoleWithResponse(ctx context.Context, realm string, id string, roleName string, body PutClientRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*PutClientRoleResponse, error) {
	rsp, err := c.PutClientRole(ctx, realm, id, roleName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutClientRoleResponse(rsp)
}

// DeleteClientRoleCompositesWithBodyWithResponse request with arbitrary body returning *DeleteClientRoleCompositesResponse
func (c *ClientWithResponses) DeleteClientRoleCompositesWithBodyWithResponse(ctx context.Context, realm string, id string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteClientRoleCompositesResponse, error) {
	rsp, err := c.DeleteClientRoleCompositesWithBody(ctx, realm, id, roleName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClientRoleCompositesResponse(rsp)
}

func (c *ClientWithResponses) DeleteClientRoleCompositesWithResponse(ctx context.Context, realm string, id string, roleName string, body DeleteClientRoleCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteClientRoleCompositesResponse, error) {
	rsp, err := c.DeleteClientRoleComposites(ctx, realm, id, roleName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClientRoleCompositesResponse(rsp)
}

// GetClientRoleCompositesWithResponse request returning *GetClientRoleCompositesResponse
func (c *ClientWithResponses) GetClientRoleCompositesWithResponse(ctx context.Context, realm string, id string, roleName string, reqEditors ...RequestEditorFn) (*GetClientRoleCompositesResponse, error) {
	rsp, err := c.GetClientRoleComposites(ctx, realm, id, roleName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientRoleCompositesResponse(rsp)
}

// PostClientRoleCompositesWithBodyWithResponse request with arbitrary body returning *PostClientRoleCompositesResponse
func (c *ClientWithResponses) PostClientRoleCompositesWithBodyWithResponse(ctx context.Context, realm string, id string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientRoleCompositesResponse, error) {
	rsp, err := c.PostClientRoleCompositesWithBody(ctx, realm, id, roleName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientRoleCompositesResponse(rsp)
}

func (c *ClientWithResponses) PostClientRoleCompositesWithResponse(ctx context.Context, realm string, id string, roleName string, body PostClientRoleCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientRoleCompositesResponse, error) {
	rsp, err := c.PostClientRoleComposites(ctx, realm, id, roleName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientRoleCompositesResponse(rsp)
}

// GetClientRoleCompositesClientWithResponse request returning *GetClientRoleCompositesClientResponse
func (c *ClientWithResponses) GetClientRoleCompositesClientWithResponse(ctx context.Context, realm string, id string, roleName string, clientUuid string, reqEditors ...RequestEditorFn) (*GetClientRoleCompositesClientResponse, error) {
	rsp, err := c.GetClientRoleCompositesClient(ctx, realm, id, roleName, clientUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientRoleCompositesClientResponse(rsp)
}

// GetClientRoleCompositesRealmWithResponse request returning *GetClientRoleCompositesRealmResponse
func (c *ClientWithResponses) GetClientRoleCompositesRealmWithResponse(ctx context.Context, realm string, id string, roleName string, reqEditors ...RequestEditorFn) (*GetClientRoleCompositesRealmResponse, error) {
	rsp, err := c.GetClientRoleCompositesRealm(ctx, realm, id, roleName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientRoleCompositesRealmResponse(rsp)
}

// GetClientRoleGroupsWithResponse request returning *GetClientRoleGroupsResponse
func (c *ClientWithResponses) GetClientRoleGroupsWithResponse(ctx context.Context, realm string, id string, roleName string, params *GetClientRoleGroupsParams, reqEditors ...RequestEditorFn) (*GetClientRoleGroupsResponse, error) {
	rsp, err := c.GetClientRoleGroups(ctx, realm, id, roleName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientRoleGroupsResponse(rsp)
}

// GetClientRoleManagementPermissionsWithResponse request returning *GetClientRoleManagementPermissionsResponse
func (c *ClientWithResponses) GetClientRoleManagementPermissionsWithResponse(ctx context.Context, realm string, id string, roleName string, reqEditors ...RequestEditorFn) (*GetClientRoleManagementPermissionsResponse, error) {
	rsp, err := c.GetClientRoleManagementPermissions(ctx, realm, id, roleName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientRoleManagementPermissionsResponse(rsp)
}

// PutClientRoleManagementPermissionsWithBodyWithResponse request with arbitrary body returning *PutClientRoleManagementPermissionsResponse
func (c *ClientWithResponses) PutClientRoleManagementPermissionsWithBodyWithResponse(ctx context.Context, realm string, id string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutClientRoleManagementPermissionsResponse, error) {
	rsp, err := c.PutClientRoleManagementPermissionsWithBody(ctx, realm, id, roleName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutClientRoleManagementPermissionsResponse(rsp)
}

func (c *ClientWithResponses) PutClientRoleManagementPermissionsWithResponse(ctx context.Context, realm string, id string, roleName string, body PutClientRoleManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutClientRoleManagementPermissionsResponse, error) {
	rsp, err := c.PutClientRoleManagementPermissions(ctx, realm, id, roleName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutClientRoleManagementPermissionsResponse(rsp)
}

// GetClientRoleUsersWithResponse request returning *GetClientRoleUsersResponse
func (c *ClientWithResponses) GetClientRoleUsersWithResponse(ctx context.Context, realm string, id string, roleName string, params *GetClientRoleUsersParams, reqEditors ...RequestEditorFn) (*GetClientRoleUsersResponse, error) {
	rsp, err := c.GetClientRoleUsers(ctx, realm, id, roleName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientRoleUsersResponse(rsp)
}

// GetClientScopeMappingsWithResponse request returning *GetClientScopeMappingsResponse
func (c *ClientWithResponses) GetClientScopeMappingsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetClientScopeMappingsResponse, error) {
	rsp, err := c.GetClientScopeMappings(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientScopeMappingsResponse(rsp)
}

// DeleteClientScopeMappingsClientWithBodyWithResponse request with arbitrary body returning *DeleteClientScopeMappingsClientResponse
func (c *ClientWithResponses) DeleteClientScopeMappingsClientWithBodyWithResponse(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteClientScopeMappingsClientResponse, error) {
	rsp, err := c.DeleteClientScopeMappingsClientWithBody(ctx, realm, id, client, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClientScopeMappingsClientResponse(rsp)
}

func (c *ClientWithResponses) DeleteClientScopeMappingsClientWithResponse(ctx context.Context, realm string, id string, client string, body DeleteClientScopeMappingsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteClientScopeMappingsClientResponse, error) {
	rsp, err := c.DeleteClientScopeMappingsClient(ctx, realm, id, client, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClientScopeMappingsClientResponse(rsp)
}

// GetClientScopeMappingsClientWithResponse request returning *GetClientScopeMappingsClientResponse
func (c *ClientWithResponses) GetClientScopeMappingsClientWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*GetClientScopeMappingsClientResponse, error) {
	rsp, err := c.GetClientScopeMappingsClient(ctx, realm, id, client, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientScopeMappingsClientResponse(rsp)
}

// PostClientScopeMappingsClientWithBodyWithResponse request with arbitrary body returning *PostClientScopeMappingsClientResponse
func (c *ClientWithResponses) PostClientScopeMappingsClientWithBodyWithResponse(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientScopeMappingsClientResponse, error) {
	rsp, err := c.PostClientScopeMappingsClientWithBody(ctx, realm, id, client, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientScopeMappingsClientResponse(rsp)
}

func (c *ClientWithResponses) PostClientScopeMappingsClientWithResponse(ctx context.Context, realm string, id string, client string, body PostClientScopeMappingsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientScopeMappingsClientResponse, error) {
	rsp, err := c.PostClientScopeMappingsClient(ctx, realm, id, client, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientScopeMappingsClientResponse(rsp)
}

// GetClientScopeMappingsClientAvailableWithResponse request returning *GetClientScopeMappingsClientAvailableResponse
func (c *ClientWithResponses) GetClientScopeMappingsClientAvailableWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*GetClientScopeMappingsClientAvailableResponse, error) {
	rsp, err := c.GetClientScopeMappingsClientAvailable(ctx, realm, id, client, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientScopeMappingsClientAvailableResponse(rsp)
}

// GetClientScopeMappingsClientCompositeWithResponse request returning *GetClientScopeMappingsClientCompositeResponse
func (c *ClientWithResponses) GetClientScopeMappingsClientCompositeWithResponse(ctx context.Context, realm string, id string, client string, params *GetClientScopeMappingsClientCompositeParams, reqEditors ...RequestEditorFn) (*GetClientScopeMappingsClientCompositeResponse, error) {
	rsp, err := c.GetClientScopeMappingsClientComposite(ctx, realm, id, client, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientScopeMappingsClientCompositeResponse(rsp)
}

// DeleteClientScopeMappingsRealmWithBodyWithResponse request with arbitrary body returning *DeleteClientScopeMappingsRealmResponse
func (c *ClientWithResponses) DeleteClientScopeMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteClientScopeMappingsRealmResponse, error) {
	rsp, err := c.DeleteClientScopeMappingsRealmWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClientScopeMappingsRealmResponse(rsp)
}

func (c *ClientWithResponses) DeleteClientScopeMappingsRealmWithResponse(ctx context.Context, realm string, id string, body DeleteClientScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteClientScopeMappingsRealmResponse, error) {
	rsp, err := c.DeleteClientScopeMappingsRealm(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClientScopeMappingsRealmResponse(rsp)
}

// GetClientScopeMappingsRealmWithResponse request returning *GetClientScopeMappingsRealmResponse
func (c *ClientWithResponses) GetClientScopeMappingsRealmWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetClientScopeMappingsRealmResponse, error) {
	rsp, err := c.GetClientScopeMappingsRealm(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientScopeMappingsRealmResponse(rsp)
}

// PostClientScopeMappingsRealmWithBodyWithResponse request with arbitrary body returning *PostClientScopeMappingsRealmResponse
func (c *ClientWithResponses) PostClientScopeMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientScopeMappingsRealmResponse, error) {
	rsp, err := c.PostClientScopeMappingsRealmWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientScopeMappingsRealmResponse(rsp)
}

func (c *ClientWithResponses) PostClientScopeMappingsRealmWithResponse(ctx context.Context, realm string, id string, body PostClientScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientScopeMappingsRealmResponse, error) {
	rsp, err := c.PostClientScopeMappingsRealm(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientScopeMappingsRealmResponse(rsp)
}

// GetClientScopeMappingsRealmAvailableWithResponse request returning *GetClientScopeMappingsRealmAvailableResponse
func (c *ClientWithResponses) GetClientScopeMappingsRealmAvailableWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetClientScopeMappingsRealmAvailableResponse, error) {
	rsp, err := c.GetClientScopeMappingsRealmAvailable(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientScopeMappingsRealmAvailableResponse(rsp)
}

// GetClientScopeMappingsRealmCompositeWithResponse request returning *GetClientScopeMappingsRealmCompositeResponse
func (c *ClientWithResponses) GetClientScopeMappingsRealmCompositeWithResponse(ctx context.Context, realm string, id string, params *GetClientScopeMappingsRealmCompositeParams, reqEditors ...RequestEditorFn) (*GetClientScopeMappingsRealmCompositeResponse, error) {
	rsp, err := c.GetClientScopeMappingsRealmComposite(ctx, realm, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientScopeMappingsRealmCompositeResponse(rsp)
}

// GetServiceAccountUserWithResponse request returning *GetServiceAccountUserResponse
func (c *ClientWithResponses) GetServiceAccountUserWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetServiceAccountUserResponse, error) {
	rsp, err := c.GetServiceAccountUser(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceAccountUserResponse(rsp)
}

// GetSessionCountWithResponse request returning *GetSessionCountResponse
func (c *ClientWithResponses) GetSessionCountWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetSessionCountResponse, error) {
	rsp, err := c.GetSessionCount(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSessionCountResponse(rsp)
}

// GetTestNodesAvailableWithResponse request returning *GetTestNodesAvailableResponse
func (c *ClientWithResponses) GetTestNodesAvailableWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetTestNodesAvailableResponse, error) {
	rsp, err := c.GetTestNodesAvailable(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTestNodesAvailableResponse(rsp)
}

// GetClientUserSessionsWithResponse request returning *GetClientUserSessionsResponse
func (c *ClientWithResponses) GetClientUserSessionsWithResponse(ctx context.Context, realm string, id string, params *GetClientUserSessionsParams, reqEditors ...RequestEditorFn) (*GetClientUserSessionsResponse, error) {
	rsp, err := c.GetClientUserSessions(ctx, realm, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientUserSessionsResponse(rsp)
}

// GetComponentsWithResponse request returning *GetComponentsResponse
func (c *ClientWithResponses) GetComponentsWithResponse(ctx context.Context, realm string, params *GetComponentsParams, reqEditors ...RequestEditorFn) (*GetComponentsResponse, error) {
	rsp, err := c.GetComponents(ctx, realm, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetComponentsResponse(rsp)
}

// PostComponentsWithBodyWithResponse request with arbitrary body returning *PostComponentsResponse
func (c *ClientWithResponses) PostComponentsWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostComponentsResponse, error) {
	rsp, err := c.PostComponentsWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostComponentsResponse(rsp)
}

func (c *ClientWithResponses) PostComponentsWithResponse(ctx context.Context, realm string, body PostComponentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostComponentsResponse, error) {
	rsp, err := c.PostComponents(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostComponentsResponse(rsp)
}

// DeleteComponentWithResponse request returning *DeleteComponentResponse
func (c *ClientWithResponses) DeleteComponentWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*DeleteComponentResponse, error) {
	rsp, err := c.DeleteComponent(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteComponentResponse(rsp)
}

// GetComponentWithResponse request returning *GetComponentResponse
func (c *ClientWithResponses) GetComponentWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetComponentResponse, error) {
	rsp, err := c.GetComponent(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetComponentResponse(rsp)
}

// PutComponentWithBodyWithResponse request with arbitrary body returning *PutComponentResponse
func (c *ClientWithResponses) PutComponentWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutComponentResponse, error) {
	rsp, err := c.PutComponentWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutComponentResponse(rsp)
}

func (c *ClientWithResponses) PutComponentWithResponse(ctx context.Context, realm string, id string, body PutComponentJSONRequestBody, reqEditors ...RequestEditorFn) (*PutComponentResponse, error) {
	rsp, err := c.PutComponent(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutComponentResponse(rsp)
}

// GetSubComponentTypesWithResponse request returning *GetSubComponentTypesResponse
func (c *ClientWithResponses) GetSubComponentTypesWithResponse(ctx context.Context, realm string, id string, params *GetSubComponentTypesParams, reqEditors ...RequestEditorFn) (*GetSubComponentTypesResponse, error) {
	rsp, err := c.GetSubComponentTypes(ctx, realm, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSubComponentTypesResponse(rsp)
}

// GetCredentialRegistratorsWithResponse request returning *GetCredentialRegistratorsResponse
func (c *ClientWithResponses) GetCredentialRegistratorsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetCredentialRegistratorsResponse, error) {
	rsp, err := c.GetCredentialRegistrators(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCredentialRegistratorsResponse(rsp)
}

// GetDefaultDefaultClientScopesWithResponse request returning *GetDefaultDefaultClientScopesResponse
func (c *ClientWithResponses) GetDefaultDefaultClientScopesWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetDefaultDefaultClientScopesResponse, error) {
	rsp, err := c.GetDefaultDefaultClientScopes(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDefaultDefaultClientScopesResponse(rsp)
}

// DeleteDefaultDefaultClientScopeWithResponse request returning *DeleteDefaultDefaultClientScopeResponse
func (c *ClientWithResponses) DeleteDefaultDefaultClientScopeWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*DeleteDefaultDefaultClientScopeResponse, error) {
	rsp, err := c.DeleteDefaultDefaultClientScope(ctx, realm, clientScopeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDefaultDefaultClientScopeResponse(rsp)
}

// PutDefaultDefaultClientScopeWithResponse request returning *PutDefaultDefaultClientScopeResponse
func (c *ClientWithResponses) PutDefaultDefaultClientScopeWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*PutDefaultDefaultClientScopeResponse, error) {
	rsp, err := c.PutDefaultDefaultClientScope(ctx, realm, clientScopeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDefaultDefaultClientScopeResponse(rsp)
}

// GetDefaultGroupsWithResponse request returning *GetDefaultGroupsResponse
func (c *ClientWithResponses) GetDefaultGroupsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetDefaultGroupsResponse, error) {
	rsp, err := c.GetDefaultGroups(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDefaultGroupsResponse(rsp)
}

// DeleteDefaultGroupWithResponse request returning *DeleteDefaultGroupResponse
func (c *ClientWithResponses) DeleteDefaultGroupWithResponse(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*DeleteDefaultGroupResponse, error) {
	rsp, err := c.DeleteDefaultGroup(ctx, realm, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDefaultGroupResponse(rsp)
}

// PutDefaultGroupWithResponse request returning *PutDefaultGroupResponse
func (c *ClientWithResponses) PutDefaultGroupWithResponse(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*PutDefaultGroupResponse, error) {
	rsp, err := c.PutDefaultGroup(ctx, realm, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDefaultGroupResponse(rsp)
}

// GetDefaultOptionalClientScopesWithResponse request returning *GetDefaultOptionalClientScopesResponse
func (c *ClientWithResponses) GetDefaultOptionalClientScopesWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetDefaultOptionalClientScopesResponse, error) {
	rsp, err := c.GetDefaultOptionalClientScopes(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDefaultOptionalClientScopesResponse(rsp)
}

// DeleteDefaultOptionalClientScopeWithResponse request returning *DeleteDefaultOptionalClientScopeResponse
func (c *ClientWithResponses) DeleteDefaultOptionalClientScopeWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*DeleteDefaultOptionalClientScopeResponse, error) {
	rsp, err := c.DeleteDefaultOptionalClientScope(ctx, realm, clientScopeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDefaultOptionalClientScopeResponse(rsp)
}

// PutDefaultOptionalClientScopeWithResponse request returning *PutDefaultOptionalClientScopeResponse
func (c *ClientWithResponses) PutDefaultOptionalClientScopeWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*PutDefaultOptionalClientScopeResponse, error) {
	rsp, err := c.PutDefaultOptionalClientScope(ctx, realm, clientScopeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDefaultOptionalClientScopeResponse(rsp)
}

// DeleteEventsWithResponse request returning *DeleteEventsResponse
func (c *ClientWithResponses) DeleteEventsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*DeleteEventsResponse, error) {
	rsp, err := c.DeleteEvents(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEventsResponse(rsp)
}

// GetEventsWithResponse request returning *GetEventsResponse
func (c *ClientWithResponses) GetEventsWithResponse(ctx context.Context, realm string, params *GetEventsParams, reqEditors ...RequestEditorFn) (*GetEventsResponse, error) {
	rsp, err := c.GetEvents(ctx, realm, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEventsResponse(rsp)
}

// GetEventsConfigWithResponse request returning *GetEventsConfigResponse
func (c *ClientWithResponses) GetEventsConfigWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetEventsConfigResponse, error) {
	rsp, err := c.GetEventsConfig(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEventsConfigResponse(rsp)
}

// PutEventsConfigWithBodyWithResponse request with arbitrary body returning *PutEventsConfigResponse
func (c *ClientWithResponses) PutEventsConfigWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutEventsConfigResponse, error) {
	rsp, err := c.PutEventsConfigWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutEventsConfigResponse(rsp)
}

func (c *ClientWithResponses) PutEventsConfigWithResponse(ctx context.Context, realm string, body PutEventsConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*PutEventsConfigResponse, error) {
	rsp, err := c.PutEventsConfig(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutEventsConfigResponse(rsp)
}

// GetGroupByPathWithResponse request returning *GetGroupByPathResponse
func (c *ClientWithResponses) GetGroupByPathWithResponse(ctx context.Context, realm string, path string, reqEditors ...RequestEditorFn) (*GetGroupByPathResponse, error) {
	rsp, err := c.GetGroupByPath(ctx, realm, path, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupByPathResponse(rsp)
}

// GetGroupsByRealmWithResponse request returning *GetGroupsByRealmResponse
func (c *ClientWithResponses) GetGroupsByRealmWithResponse(ctx context.Context, realm string, params *GetGroupsByRealmParams, reqEditors ...RequestEditorFn) (*GetGroupsByRealmResponse, error) {
	rsp, err := c.GetGroupsByRealm(ctx, realm, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupsByRealmResponse(rsp)
}

// PostGroupsWithBodyWithResponse request with arbitrary body returning *PostGroupsResponse
func (c *ClientWithResponses) PostGroupsWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGroupsResponse, error) {
	rsp, err := c.PostGroupsWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupsResponse(rsp)
}

func (c *ClientWithResponses) PostGroupsWithResponse(ctx context.Context, realm string, body PostGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGroupsResponse, error) {
	rsp, err := c.PostGroups(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupsResponse(rsp)
}

// GetGroupsCountByRealmWithResponse request returning *GetGroupsCountByRealmResponse
func (c *ClientWithResponses) GetGroupsCountByRealmWithResponse(ctx context.Context, realm string, params *GetGroupsCountByRealmParams, reqEditors ...RequestEditorFn) (*GetGroupsCountByRealmResponse, error) {
	rsp, err := c.GetGroupsCountByRealm(ctx, realm, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupsCountByRealmResponse(rsp)
}

// DeleteGroupByRealmByIdWithResponse request returning *DeleteGroupByRealmByIdResponse
func (c *ClientWithResponses) DeleteGroupByRealmByIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*DeleteGroupByRealmByIdResponse, error) {
	rsp, err := c.DeleteGroupByRealmById(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGroupByRealmByIdResponse(rsp)
}

// GetGroupWithResponse request returning *GetGroupResponse
func (c *ClientWithResponses) GetGroupWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetGroupResponse, error) {
	rsp, err := c.GetGroup(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupResponse(rsp)
}

// PutGroupByRealmByIdWithBodyWithResponse request with arbitrary body returning *PutGroupByRealmByIdResponse
func (c *ClientWithResponses) PutGroupByRealmByIdWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutGroupByRealmByIdResponse, error) {
	rsp, err := c.PutGroupByRealmByIdWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutGroupByRealmByIdResponse(rsp)
}

func (c *ClientWithResponses) PutGroupByRealmByIdWithResponse(ctx context.Context, realm string, id string, body PutGroupByRealmByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutGroupByRealmByIdResponse, error) {
	rsp, err := c.PutGroupByRealmById(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutGroupByRealmByIdResponse(rsp)
}

// PostChildrenWithBodyWithResponse request with arbitrary body returning *PostChildrenResponse
func (c *ClientWithResponses) PostChildrenWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChildrenResponse, error) {
	rsp, err := c.PostChildrenWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChildrenResponse(rsp)
}

func (c *ClientWithResponses) PostChildrenWithResponse(ctx context.Context, realm string, id string, body PostChildrenJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChildrenResponse, error) {
	rsp, err := c.PostChildren(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChildrenResponse(rsp)
}

// GetGroupManagementPermissionsWithResponse request returning *GetGroupManagementPermissionsResponse
func (c *ClientWithResponses) GetGroupManagementPermissionsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetGroupManagementPermissionsResponse, error) {
	rsp, err := c.GetGroupManagementPermissions(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupManagementPermissionsResponse(rsp)
}

// PutGroupManagementPermissionsWithBodyWithResponse request with arbitrary body returning *PutGroupManagementPermissionsResponse
func (c *ClientWithResponses) PutGroupManagementPermissionsWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutGroupManagementPermissionsResponse, error) {
	rsp, err := c.PutGroupManagementPermissionsWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutGroupManagementPermissionsResponse(rsp)
}

func (c *ClientWithResponses) PutGroupManagementPermissionsWithResponse(ctx context.Context, realm string, id string, body PutGroupManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutGroupManagementPermissionsResponse, error) {
	rsp, err := c.PutGroupManagementPermissions(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutGroupManagementPermissionsResponse(rsp)
}

// GetMembersWithResponse request returning *GetMembersResponse
func (c *ClientWithResponses) GetMembersWithResponse(ctx context.Context, realm string, id string, params *GetMembersParams, reqEditors ...RequestEditorFn) (*GetMembersResponse, error) {
	rsp, err := c.GetMembers(ctx, realm, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMembersResponse(rsp)
}

// GetGroupRoleMappingsWithResponse request returning *GetGroupRoleMappingsResponse
func (c *ClientWithResponses) GetGroupRoleMappingsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetGroupRoleMappingsResponse, error) {
	rsp, err := c.GetGroupRoleMappings(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupRoleMappingsResponse(rsp)
}

// DeleteGroupRoleMappingsClientWithBodyWithResponse request with arbitrary body returning *DeleteGroupRoleMappingsClientResponse
func (c *ClientWithResponses) DeleteGroupRoleMappingsClientWithBodyWithResponse(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteGroupRoleMappingsClientResponse, error) {
	rsp, err := c.DeleteGroupRoleMappingsClientWithBody(ctx, realm, id, client, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGroupRoleMappingsClientResponse(rsp)
}

func (c *ClientWithResponses) DeleteGroupRoleMappingsClientWithResponse(ctx context.Context, realm string, id string, client string, body DeleteGroupRoleMappingsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteGroupRoleMappingsClientResponse, error) {
	rsp, err := c.DeleteGroupRoleMappingsClient(ctx, realm, id, client, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGroupRoleMappingsClientResponse(rsp)
}

// GetGroupRoleMappingsClientWithResponse request returning *GetGroupRoleMappingsClientResponse
func (c *ClientWithResponses) GetGroupRoleMappingsClientWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*GetGroupRoleMappingsClientResponse, error) {
	rsp, err := c.GetGroupRoleMappingsClient(ctx, realm, id, client, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupRoleMappingsClientResponse(rsp)
}

// PostGroupRoleMappingsClientWithBodyWithResponse request with arbitrary body returning *PostGroupRoleMappingsClientResponse
func (c *ClientWithResponses) PostGroupRoleMappingsClientWithBodyWithResponse(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGroupRoleMappingsClientResponse, error) {
	rsp, err := c.PostGroupRoleMappingsClientWithBody(ctx, realm, id, client, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupRoleMappingsClientResponse(rsp)
}

func (c *ClientWithResponses) PostGroupRoleMappingsClientWithResponse(ctx context.Context, realm string, id string, client string, body PostGroupRoleMappingsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGroupRoleMappingsClientResponse, error) {
	rsp, err := c.PostGroupRoleMappingsClient(ctx, realm, id, client, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupRoleMappingsClientResponse(rsp)
}

// GetGroupRoleMappingsClientAvailableWithResponse request returning *GetGroupRoleMappingsClientAvailableResponse
func (c *ClientWithResponses) GetGroupRoleMappingsClientAvailableWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*GetGroupRoleMappingsClientAvailableResponse, error) {
	rsp, err := c.GetGroupRoleMappingsClientAvailable(ctx, realm, id, client, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupRoleMappingsClientAvailableResponse(rsp)
}

// GetGroupRoleMappingsClientCompositeWithResponse request returning *GetGroupRoleMappingsClientCompositeResponse
func (c *ClientWithResponses) GetGroupRoleMappingsClientCompositeWithResponse(ctx context.Context, realm string, id string, client string, params *GetGroupRoleMappingsClientCompositeParams, reqEditors ...RequestEditorFn) (*GetGroupRoleMappingsClientCompositeResponse, error) {
	rsp, err := c.GetGroupRoleMappingsClientComposite(ctx, realm, id, client, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupRoleMappingsClientCompositeResponse(rsp)
}

// DeleteGroupRoleMappingsRealmWithBodyWithResponse request with arbitrary body returning *DeleteGroupRoleMappingsRealmResponse
func (c *ClientWithResponses) DeleteGroupRoleMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteGroupRoleMappingsRealmResponse, error) {
	rsp, err := c.DeleteGroupRoleMappingsRealmWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGroupRoleMappingsRealmResponse(rsp)
}

func (c *ClientWithResponses) DeleteGroupRoleMappingsRealmWithResponse(ctx context.Context, realm string, id string, body DeleteGroupRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteGroupRoleMappingsRealmResponse, error) {
	rsp, err := c.DeleteGroupRoleMappingsRealm(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGroupRoleMappingsRealmResponse(rsp)
}

// GetGroupRoleMappingsRealmWithResponse request returning *GetGroupRoleMappingsRealmResponse
func (c *ClientWithResponses) GetGroupRoleMappingsRealmWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetGroupRoleMappingsRealmResponse, error) {
	rsp, err := c.GetGroupRoleMappingsRealm(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupRoleMappingsRealmResponse(rsp)
}

// PostGroupRoleMappingsRealmWithBodyWithResponse request with arbitrary body returning *PostGroupRoleMappingsRealmResponse
func (c *ClientWithResponses) PostGroupRoleMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGroupRoleMappingsRealmResponse, error) {
	rsp, err := c.PostGroupRoleMappingsRealmWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupRoleMappingsRealmResponse(rsp)
}

func (c *ClientWithResponses) PostGroupRoleMappingsRealmWithResponse(ctx context.Context, realm string, id string, body PostGroupRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGroupRoleMappingsRealmResponse, error) {
	rsp, err := c.PostGroupRoleMappingsRealm(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupRoleMappingsRealmResponse(rsp)
}

// GetGroupRoleMappingsRealmAvailableWithResponse request returning *GetGroupRoleMappingsRealmAvailableResponse
func (c *ClientWithResponses) GetGroupRoleMappingsRealmAvailableWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetGroupRoleMappingsRealmAvailableResponse, error) {
	rsp, err := c.GetGroupRoleMappingsRealmAvailable(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupRoleMappingsRealmAvailableResponse(rsp)
}

// GetGroupRoleMappingsRealmCompositeWithResponse request returning *GetGroupRoleMappingsRealmCompositeResponse
func (c *ClientWithResponses) GetGroupRoleMappingsRealmCompositeWithResponse(ctx context.Context, realm string, id string, params *GetGroupRoleMappingsRealmCompositeParams, reqEditors ...RequestEditorFn) (*GetGroupRoleMappingsRealmCompositeResponse, error) {
	rsp, err := c.GetGroupRoleMappingsRealmComposite(ctx, realm, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupRoleMappingsRealmCompositeResponse(rsp)
}

// PostImportConfigWithBodyWithResponse request with arbitrary body returning *PostImportConfigResponse
func (c *ClientWithResponses) PostImportConfigWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostImportConfigResponse, error) {
	rsp, err := c.PostImportConfigWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostImportConfigResponse(rsp)
}

func (c *ClientWithResponses) PostImportConfigWithResponse(ctx context.Context, realm string, body PostImportConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*PostImportConfigResponse, error) {
	rsp, err := c.PostImportConfig(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostImportConfigResponse(rsp)
}

// GetInstancesWithResponse request returning *GetInstancesResponse
func (c *ClientWithResponses) GetInstancesWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetInstancesResponse, error) {
	rsp, err := c.GetInstances(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInstancesResponse(rsp)
}

// PostInstancesWithBodyWithResponse request with arbitrary body returning *PostInstancesResponse
func (c *ClientWithResponses) PostInstancesWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInstancesResponse, error) {
	rsp, err := c.PostInstancesWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInstancesResponse(rsp)
}

func (c *ClientWithResponses) PostInstancesWithResponse(ctx context.Context, realm string, body PostInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInstancesResponse, error) {
	rsp, err := c.PostInstances(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInstancesResponse(rsp)
}

// DeleteInstanceWithResponse request returning *DeleteInstanceResponse
func (c *ClientWithResponses) DeleteInstanceWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*DeleteInstanceResponse, error) {
	rsp, err := c.DeleteInstance(ctx, realm, alias, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteInstanceResponse(rsp)
}

// GetInstanceWithResponse request returning *GetInstanceResponse
func (c *ClientWithResponses) GetInstanceWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*GetInstanceResponse, error) {
	rsp, err := c.GetInstance(ctx, realm, alias, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInstanceResponse(rsp)
}

// PutInstanceWithBodyWithResponse request with arbitrary body returning *PutInstanceResponse
func (c *ClientWithResponses) PutInstanceWithBodyWithResponse(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutInstanceResponse, error) {
	rsp, err := c.PutInstanceWithBody(ctx, realm, alias, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutInstanceResponse(rsp)
}

func (c *ClientWithResponses) PutInstanceWithResponse(ctx context.Context, realm string, alias string, body PutInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*PutInstanceResponse, error) {
	rsp, err := c.PutInstance(ctx, realm, alias, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutInstanceResponse(rsp)
}

// GetExportWithResponse request returning *GetExportResponse
func (c *ClientWithResponses) GetExportWithResponse(ctx context.Context, realm string, alias string, params *GetExportParams, reqEditors ...RequestEditorFn) (*GetExportResponse, error) {
	rsp, err := c.GetExport(ctx, realm, alias, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetExportResponse(rsp)
}

// GetInstanceManagementPermissionsWithResponse request returning *GetInstanceManagementPermissionsResponse
func (c *ClientWithResponses) GetInstanceManagementPermissionsWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*GetInstanceManagementPermissionsResponse, error) {
	rsp, err := c.GetInstanceManagementPermissions(ctx, realm, alias, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInstanceManagementPermissionsResponse(rsp)
}

// PutInstanceManagementPermissionsWithBodyWithResponse request with arbitrary body returning *PutInstanceManagementPermissionsResponse
func (c *ClientWithResponses) PutInstanceManagementPermissionsWithBodyWithResponse(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutInstanceManagementPermissionsResponse, error) {
	rsp, err := c.PutInstanceManagementPermissionsWithBody(ctx, realm, alias, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutInstanceManagementPermissionsResponse(rsp)
}

func (c *ClientWithResponses) PutInstanceManagementPermissionsWithResponse(ctx context.Context, realm string, alias string, body PutInstanceManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutInstanceManagementPermissionsResponse, error) {
	rsp, err := c.PutInstanceManagementPermissions(ctx, realm, alias, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutInstanceManagementPermissionsResponse(rsp)
}

// GetMapperTypesWithResponse request returning *GetMapperTypesResponse
func (c *ClientWithResponses) GetMapperTypesWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*GetMapperTypesResponse, error) {
	rsp, err := c.GetMapperTypes(ctx, realm, alias, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMapperTypesResponse(rsp)
}

// GetMappersWithResponse request returning *GetMappersResponse
func (c *ClientWithResponses) GetMappersWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*GetMappersResponse, error) {
	rsp, err := c.GetMappers(ctx, realm, alias, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMappersResponse(rsp)
}

// PostMappersWithBodyWithResponse request with arbitrary body returning *PostMappersResponse
func (c *ClientWithResponses) PostMappersWithBodyWithResponse(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMappersResponse, error) {
	rsp, err := c.PostMappersWithBody(ctx, realm, alias, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMappersResponse(rsp)
}

func (c *ClientWithResponses) PostMappersWithResponse(ctx context.Context, realm string, alias string, body PostMappersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMappersResponse, error) {
	rsp, err := c.PostMappers(ctx, realm, alias, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMappersResponse(rsp)
}

// DeleteMapperWithResponse request returning *DeleteMapperResponse
func (c *ClientWithResponses) DeleteMapperWithResponse(ctx context.Context, realm string, alias string, id string, reqEditors ...RequestEditorFn) (*DeleteMapperResponse, error) {
	rsp, err := c.DeleteMapper(ctx, realm, alias, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMapperResponse(rsp)
}

// GetMapperWithResponse request returning *GetMapperResponse
func (c *ClientWithResponses) GetMapperWithResponse(ctx context.Context, realm string, alias string, id string, reqEditors ...RequestEditorFn) (*GetMapperResponse, error) {
	rsp, err := c.GetMapper(ctx, realm, alias, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMapperResponse(rsp)
}

// PutMapperWithBodyWithResponse request with arbitrary body returning *PutMapperResponse
func (c *ClientWithResponses) PutMapperWithBodyWithResponse(ctx context.Context, realm string, alias string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutMapperResponse, error) {
	rsp, err := c.PutMapperWithBody(ctx, realm, alias, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutMapperResponse(rsp)
}

func (c *ClientWithResponses) PutMapperWithResponse(ctx context.Context, realm string, alias string, id string, body PutMapperJSONRequestBody, reqEditors ...RequestEditorFn) (*PutMapperResponse, error) {
	rsp, err := c.PutMapper(ctx, realm, alias, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutMapperResponse(rsp)
}

// GetIdentityProviderProviderWithResponse request returning *GetIdentityProviderProviderResponse
func (c *ClientWithResponses) GetIdentityProviderProviderWithResponse(ctx context.Context, realm string, providerId string, reqEditors ...RequestEditorFn) (*GetIdentityProviderProviderResponse, error) {
	rsp, err := c.GetIdentityProviderProvider(ctx, realm, providerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIdentityProviderProviderResponse(rsp)
}

// GetKeysWithResponse request returning *GetKeysResponse
func (c *ClientWithResponses) GetKeysWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetKeysResponse, error) {
	rsp, err := c.GetKeys(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKeysResponse(rsp)
}

// GetLocalizationByRealmWithResponse request returning *GetLocalizationByRealmResponse
func (c *ClientWithResponses) GetLocalizationByRealmWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetLocalizationByRealmResponse, error) {
	rsp, err := c.GetLocalizationByRealm(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLocalizationByRealmResponse(rsp)
}

// DeleteLocalizationByRealmByLocaleWithResponse request returning *DeleteLocalizationByRealmByLocaleResponse
func (c *ClientWithResponses) DeleteLocalizationByRealmByLocaleWithResponse(ctx context.Context, realm string, locale string, reqEditors ...RequestEditorFn) (*DeleteLocalizationByRealmByLocaleResponse, error) {
	rsp, err := c.DeleteLocalizationByRealmByLocale(ctx, realm, locale, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteLocalizationByRealmByLocaleResponse(rsp)
}

// GetLocalizationByRealmByLocaleWithResponse request returning *GetLocalizationByRealmByLocaleResponse
func (c *ClientWithResponses) GetLocalizationByRealmByLocaleWithResponse(ctx context.Context, realm string, locale string, params *GetLocalizationByRealmByLocaleParams, reqEditors ...RequestEditorFn) (*GetLocalizationByRealmByLocaleResponse, error) {
	rsp, err := c.GetLocalizationByRealmByLocale(ctx, realm, locale, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLocalizationByRealmByLocaleResponse(rsp)
}

// PostLocalizationWithBodyWithResponse request with arbitrary body returning *PostLocalizationResponse
func (c *ClientWithResponses) PostLocalizationWithBodyWithResponse(ctx context.Context, realm string, locale string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLocalizationResponse, error) {
	rsp, err := c.PostLocalizationWithBody(ctx, realm, locale, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLocalizationResponse(rsp)
}

func (c *ClientWithResponses) PostLocalizationWithResponse(ctx context.Context, realm string, locale string, body PostLocalizationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLocalizationResponse, error) {
	rsp, err := c.PostLocalization(ctx, realm, locale, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLocalizationResponse(rsp)
}

// DeleteLocalizationByRealmByLocaleByKeyWithResponse request returning *DeleteLocalizationByRealmByLocaleByKeyResponse
func (c *ClientWithResponses) DeleteLocalizationByRealmByLocaleByKeyWithResponse(ctx context.Context, realm string, locale string, key string, reqEditors ...RequestEditorFn) (*DeleteLocalizationByRealmByLocaleByKeyResponse, error) {
	rsp, err := c.DeleteLocalizationByRealmByLocaleByKey(ctx, realm, locale, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteLocalizationByRealmByLocaleByKeyResponse(rsp)
}

// GetLocalizationByRealmByLocaleByKeyWithResponse request returning *GetLocalizationByRealmByLocaleByKeyResponse
func (c *ClientWithResponses) GetLocalizationByRealmByLocaleByKeyWithResponse(ctx context.Context, realm string, locale string, key string, reqEditors ...RequestEditorFn) (*GetLocalizationByRealmByLocaleByKeyResponse, error) {
	rsp, err := c.GetLocalizationByRealmByLocaleByKey(ctx, realm, locale, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLocalizationByRealmByLocaleByKeyResponse(rsp)
}

// PutLocalizationWithBodyWithResponse request with arbitrary body returning *PutLocalizationResponse
func (c *ClientWithResponses) PutLocalizationWithBodyWithResponse(ctx context.Context, realm string, locale string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutLocalizationResponse, error) {
	rsp, err := c.PutLocalizationWithBody(ctx, realm, locale, key, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutLocalizationResponse(rsp)
}

func (c *ClientWithResponses) PutLocalizationWithResponse(ctx context.Context, realm string, locale string, key string, body PutLocalizationJSONRequestBody, reqEditors ...RequestEditorFn) (*PutLocalizationResponse, error) {
	rsp, err := c.PutLocalization(ctx, realm, locale, key, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutLocalizationResponse(rsp)
}

// PostLogoutAllWithResponse request returning *PostLogoutAllResponse
func (c *ClientWithResponses) PostLogoutAllWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*PostLogoutAllResponse, error) {
	rsp, err := c.PostLogoutAll(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLogoutAllResponse(rsp)
}

// PostPartialExportWithResponse request returning *PostPartialExportResponse
func (c *ClientWithResponses) PostPartialExportWithResponse(ctx context.Context, realm string, params *PostPartialExportParams, reqEditors ...RequestEditorFn) (*PostPartialExportResponse, error) {
	rsp, err := c.PostPartialExport(ctx, realm, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPartialExportResponse(rsp)
}

// PostPartialImportWithBodyWithResponse request with arbitrary body returning *PostPartialImportResponse
func (c *ClientWithResponses) PostPartialImportWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPartialImportResponse, error) {
	rsp, err := c.PostPartialImportWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPartialImportResponse(rsp)
}

func (c *ClientWithResponses) PostPartialImportWithResponse(ctx context.Context, realm string, body PostPartialImportJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPartialImportResponse, error) {
	rsp, err := c.PostPartialImport(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPartialImportResponse(rsp)
}

// PostPushRevocationByRealmWithResponse request returning *PostPushRevocationByRealmResponse
func (c *ClientWithResponses) PostPushRevocationByRealmWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*PostPushRevocationByRealmResponse, error) {
	rsp, err := c.PostPushRevocationByRealm(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPushRevocationByRealmResponse(rsp)
}

// GetRolesByRealmWithResponse request returning *GetRolesByRealmResponse
func (c *ClientWithResponses) GetRolesByRealmWithResponse(ctx context.Context, realm string, params *GetRolesByRealmParams, reqEditors ...RequestEditorFn) (*GetRolesByRealmResponse, error) {
	rsp, err := c.GetRolesByRealm(ctx, realm, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRolesByRealmResponse(rsp)
}

// PostRolesByRealmWithBodyWithResponse request with arbitrary body returning *PostRolesByRealmResponse
func (c *ClientWithResponses) PostRolesByRealmWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRolesByRealmResponse, error) {
	rsp, err := c.PostRolesByRealmWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRolesByRealmResponse(rsp)
}

func (c *ClientWithResponses) PostRolesByRealmWithResponse(ctx context.Context, realm string, body PostRolesByRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRolesByRealmResponse, error) {
	rsp, err := c.PostRolesByRealm(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRolesByRealmResponse(rsp)
}

// DeleteRolesByIdWithResponse request returning *DeleteRolesByIdResponse
func (c *ClientWithResponses) DeleteRolesByIdWithResponse(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*DeleteRolesByIdResponse, error) {
	rsp, err := c.DeleteRolesById(ctx, realm, roleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRolesByIdResponse(rsp)
}

// GetRolesByIdWithResponse request returning *GetRolesByIdResponse
func (c *ClientWithResponses) GetRolesByIdWithResponse(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*GetRolesByIdResponse, error) {
	rsp, err := c.GetRolesById(ctx, realm, roleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRolesByIdResponse(rsp)
}

// PutRolesByIdWithBodyWithResponse request with arbitrary body returning *PutRolesByIdResponse
func (c *ClientWithResponses) PutRolesByIdWithBodyWithResponse(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRolesByIdResponse, error) {
	rsp, err := c.PutRolesByIdWithBody(ctx, realm, roleId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRolesByIdResponse(rsp)
}

func (c *ClientWithResponses) PutRolesByIdWithResponse(ctx context.Context, realm string, roleId string, body PutRolesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRolesByIdResponse, error) {
	rsp, err := c.PutRolesById(ctx, realm, roleId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRolesByIdResponse(rsp)
}

// DeleteRolesByIdCompositesWithBodyWithResponse request with arbitrary body returning *DeleteRolesByIdCompositesResponse
func (c *ClientWithResponses) DeleteRolesByIdCompositesWithBodyWithResponse(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRolesByIdCompositesResponse, error) {
	rsp, err := c.DeleteRolesByIdCompositesWithBody(ctx, realm, roleId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRolesByIdCompositesResponse(rsp)
}

func (c *ClientWithResponses) DeleteRolesByIdCompositesWithResponse(ctx context.Context, realm string, roleId string, body DeleteRolesByIdCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRolesByIdCompositesResponse, error) {
	rsp, err := c.DeleteRolesByIdComposites(ctx, realm, roleId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRolesByIdCompositesResponse(rsp)
}

// GetRolesByIdCompositesWithResponse request returning *GetRolesByIdCompositesResponse
func (c *ClientWithResponses) GetRolesByIdCompositesWithResponse(ctx context.Context, realm string, roleId string, params *GetRolesByIdCompositesParams, reqEditors ...RequestEditorFn) (*GetRolesByIdCompositesResponse, error) {
	rsp, err := c.GetRolesByIdComposites(ctx, realm, roleId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRolesByIdCompositesResponse(rsp)
}

// PostRolesByIdCompositesWithBodyWithResponse request with arbitrary body returning *PostRolesByIdCompositesResponse
func (c *ClientWithResponses) PostRolesByIdCompositesWithBodyWithResponse(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRolesByIdCompositesResponse, error) {
	rsp, err := c.PostRolesByIdCompositesWithBody(ctx, realm, roleId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRolesByIdCompositesResponse(rsp)
}

func (c *ClientWithResponses) PostRolesByIdCompositesWithResponse(ctx context.Context, realm string, roleId string, body PostRolesByIdCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRolesByIdCompositesResponse, error) {
	rsp, err := c.PostRolesByIdComposites(ctx, realm, roleId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRolesByIdCompositesResponse(rsp)
}

// GetRolesByIdCompositesClientWithResponse request returning *GetRolesByIdCompositesClientResponse
func (c *ClientWithResponses) GetRolesByIdCompositesClientWithResponse(ctx context.Context, realm string, roleId string, clientUuid string, reqEditors ...RequestEditorFn) (*GetRolesByIdCompositesClientResponse, error) {
	rsp, err := c.GetRolesByIdCompositesClient(ctx, realm, roleId, clientUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRolesByIdCompositesClientResponse(rsp)
}

// GetRolesByIdCompositesRealmWithResponse request returning *GetRolesByIdCompositesRealmResponse
func (c *ClientWithResponses) GetRolesByIdCompositesRealmWithResponse(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*GetRolesByIdCompositesRealmResponse, error) {
	rsp, err := c.GetRolesByIdCompositesRealm(ctx, realm, roleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRolesByIdCompositesRealmResponse(rsp)
}

// GetRolesByIdManagementPermissionsWithResponse request returning *GetRolesByIdManagementPermissionsResponse
func (c *ClientWithResponses) GetRolesByIdManagementPermissionsWithResponse(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*GetRolesByIdManagementPermissionsResponse, error) {
	rsp, err := c.GetRolesByIdManagementPermissions(ctx, realm, roleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRolesByIdManagementPermissionsResponse(rsp)
}

// PutRolesByIdManagementPermissionsWithBodyWithResponse request with arbitrary body returning *PutRolesByIdManagementPermissionsResponse
func (c *ClientWithResponses) PutRolesByIdManagementPermissionsWithBodyWithResponse(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRolesByIdManagementPermissionsResponse, error) {
	rsp, err := c.PutRolesByIdManagementPermissionsWithBody(ctx, realm, roleId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRolesByIdManagementPermissionsResponse(rsp)
}

func (c *ClientWithResponses) PutRolesByIdManagementPermissionsWithResponse(ctx context.Context, realm string, roleId string, body PutRolesByIdManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRolesByIdManagementPermissionsResponse, error) {
	rsp, err := c.PutRolesByIdManagementPermissions(ctx, realm, roleId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRolesByIdManagementPermissionsResponse(rsp)
}

// DeleteRoleByRealmByRoleNameWithResponse request returning *DeleteRoleByRealmByRoleNameResponse
func (c *ClientWithResponses) DeleteRoleByRealmByRoleNameWithResponse(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*DeleteRoleByRealmByRoleNameResponse, error) {
	rsp, err := c.DeleteRoleByRealmByRoleName(ctx, realm, roleName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRoleByRealmByRoleNameResponse(rsp)
}

// GetRoleByRealmByRoleNameWithResponse request returning *GetRoleByRealmByRoleNameResponse
func (c *ClientWithResponses) GetRoleByRealmByRoleNameWithResponse(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*GetRoleByRealmByRoleNameResponse, error) {
	rsp, err := c.GetRoleByRealmByRoleName(ctx, realm, roleName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRoleByRealmByRoleNameResponse(rsp)
}

// PutRoleByRealmByRoleNameWithBodyWithResponse request with arbitrary body returning *PutRoleByRealmByRoleNameResponse
func (c *ClientWithResponses) PutRoleByRealmByRoleNameWithBodyWithResponse(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRoleByRealmByRoleNameResponse, error) {
	rsp, err := c.PutRoleByRealmByRoleNameWithBody(ctx, realm, roleName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRoleByRealmByRoleNameResponse(rsp)
}

func (c *ClientWithResponses) PutRoleByRealmByRoleNameWithResponse(ctx context.Context, realm string, roleName string, body PutRoleByRealmByRoleNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRoleByRealmByRoleNameResponse, error) {
	rsp, err := c.PutRoleByRealmByRoleName(ctx, realm, roleName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRoleByRealmByRoleNameResponse(rsp)
}

// DeleteRoleCompositesByRealmByRoleNameWithBodyWithResponse request with arbitrary body returning *DeleteRoleCompositesByRealmByRoleNameResponse
func (c *ClientWithResponses) DeleteRoleCompositesByRealmByRoleNameWithBodyWithResponse(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRoleCompositesByRealmByRoleNameResponse, error) {
	rsp, err := c.DeleteRoleCompositesByRealmByRoleNameWithBody(ctx, realm, roleName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRoleCompositesByRealmByRoleNameResponse(rsp)
}

func (c *ClientWithResponses) DeleteRoleCompositesByRealmByRoleNameWithResponse(ctx context.Context, realm string, roleName string, body DeleteRoleCompositesByRealmByRoleNameJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRoleCompositesByRealmByRoleNameResponse, error) {
	rsp, err := c.DeleteRoleCompositesByRealmByRoleName(ctx, realm, roleName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRoleCompositesByRealmByRoleNameResponse(rsp)
}

// GetRoleCompositesByRealmByRoleNameWithResponse request returning *GetRoleCompositesByRealmByRoleNameResponse
func (c *ClientWithResponses) GetRoleCompositesByRealmByRoleNameWithResponse(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*GetRoleCompositesByRealmByRoleNameResponse, error) {
	rsp, err := c.GetRoleCompositesByRealmByRoleName(ctx, realm, roleName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRoleCompositesByRealmByRoleNameResponse(rsp)
}

// PostRoleCompositesByRealmByRoleNameWithBodyWithResponse request with arbitrary body returning *PostRoleCompositesByRealmByRoleNameResponse
func (c *ClientWithResponses) PostRoleCompositesByRealmByRoleNameWithBodyWithResponse(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRoleCompositesByRealmByRoleNameResponse, error) {
	rsp, err := c.PostRoleCompositesByRealmByRoleNameWithBody(ctx, realm, roleName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRoleCompositesByRealmByRoleNameResponse(rsp)
}

func (c *ClientWithResponses) PostRoleCompositesByRealmByRoleNameWithResponse(ctx context.Context, realm string, roleName string, body PostRoleCompositesByRealmByRoleNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRoleCompositesByRealmByRoleNameResponse, error) {
	rsp, err := c.PostRoleCompositesByRealmByRoleName(ctx, realm, roleName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRoleCompositesByRealmByRoleNameResponse(rsp)
}

// GetRoleCompositesClientByRealmByRoleNameByClientUuidWithResponse request returning *GetRoleCompositesClientByRealmByRoleNameByClientUuidResponse
func (c *ClientWithResponses) GetRoleCompositesClientByRealmByRoleNameByClientUuidWithResponse(ctx context.Context, realm string, roleName string, clientUuid string, reqEditors ...RequestEditorFn) (*GetRoleCompositesClientByRealmByRoleNameByClientUuidResponse, error) {
	rsp, err := c.GetRoleCompositesClientByRealmByRoleNameByClientUuid(ctx, realm, roleName, clientUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRoleCompositesClientByRealmByRoleNameByClientUuidResponse(rsp)
}

// GetRoleCompositesRealmByRealmByRoleNameWithResponse request returning *GetRoleCompositesRealmByRealmByRoleNameResponse
func (c *ClientWithResponses) GetRoleCompositesRealmByRealmByRoleNameWithResponse(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*GetRoleCompositesRealmByRealmByRoleNameResponse, error) {
	rsp, err := c.GetRoleCompositesRealmByRealmByRoleName(ctx, realm, roleName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRoleCompositesRealmByRealmByRoleNameResponse(rsp)
}

// GetRoleGroupsByRealmByRoleNameWithResponse request returning *GetRoleGroupsByRealmByRoleNameResponse
func (c *ClientWithResponses) GetRoleGroupsByRealmByRoleNameWithResponse(ctx context.Context, realm string, roleName string, params *GetRoleGroupsByRealmByRoleNameParams, reqEditors ...RequestEditorFn) (*GetRoleGroupsByRealmByRoleNameResponse, error) {
	rsp, err := c.GetRoleGroupsByRealmByRoleName(ctx, realm, roleName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRoleGroupsByRealmByRoleNameResponse(rsp)
}

// GetRoleManagementPermissionsByRealmByRoleNameWithResponse request returning *GetRoleManagementPermissionsByRealmByRoleNameResponse
func (c *ClientWithResponses) GetRoleManagementPermissionsByRealmByRoleNameWithResponse(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*GetRoleManagementPermissionsByRealmByRoleNameResponse, error) {
	rsp, err := c.GetRoleManagementPermissionsByRealmByRoleName(ctx, realm, roleName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRoleManagementPermissionsByRealmByRoleNameResponse(rsp)
}

// PutRoleManagementPermissionsByRealmByRoleNameWithBodyWithResponse request with arbitrary body returning *PutRoleManagementPermissionsByRealmByRoleNameResponse
func (c *ClientWithResponses) PutRoleManagementPermissionsByRealmByRoleNameWithBodyWithResponse(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRoleManagementPermissionsByRealmByRoleNameResponse, error) {
	rsp, err := c.PutRoleManagementPermissionsByRealmByRoleNameWithBody(ctx, realm, roleName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRoleManagementPermissionsByRealmByRoleNameResponse(rsp)
}

func (c *ClientWithResponses) PutRoleManagementPermissionsByRealmByRoleNameWithResponse(ctx context.Context, realm string, roleName string, body PutRoleManagementPermissionsByRealmByRoleNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRoleManagementPermissionsByRealmByRoleNameResponse, error) {
	rsp, err := c.PutRoleManagementPermissionsByRealmByRoleName(ctx, realm, roleName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRoleManagementPermissionsByRealmByRoleNameResponse(rsp)
}

// GetRoleUsersByRealmByRoleNameWithResponse request returning *GetRoleUsersByRealmByRoleNameResponse
func (c *ClientWithResponses) GetRoleUsersByRealmByRoleNameWithResponse(ctx context.Context, realm string, roleName string, params *GetRoleUsersByRealmByRoleNameParams, reqEditors ...RequestEditorFn) (*GetRoleUsersByRealmByRoleNameResponse, error) {
	rsp, err := c.GetRoleUsersByRealmByRoleName(ctx, realm, roleName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRoleUsersByRealmByRoleNameResponse(rsp)
}

// DeleteSessionWithResponse request returning *DeleteSessionResponse
func (c *ClientWithResponses) DeleteSessionWithResponse(ctx context.Context, realm string, session string, reqEditors ...RequestEditorFn) (*DeleteSessionResponse, error) {
	rsp, err := c.DeleteSession(ctx, realm, session, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSessionResponse(rsp)
}

// PostTestSmtpConnectionWithBodyWithResponse request with arbitrary body returning *PostTestSmtpConnectionResponse
func (c *ClientWithResponses) PostTestSmtpConnectionWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTestSmtpConnectionResponse, error) {
	rsp, err := c.PostTestSmtpConnectionWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTestSmtpConnectionResponse(rsp)
}

func (c *ClientWithResponses) PostTestSmtpConnectionWithResponse(ctx context.Context, realm string, body PostTestSmtpConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTestSmtpConnectionResponse, error) {
	rsp, err := c.PostTestSmtpConnection(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTestSmtpConnectionResponse(rsp)
}

// GetUsersByRealmWithResponse request returning *GetUsersByRealmResponse
func (c *ClientWithResponses) GetUsersByRealmWithResponse(ctx context.Context, realm string, params *GetUsersByRealmParams, reqEditors ...RequestEditorFn) (*GetUsersByRealmResponse, error) {
	rsp, err := c.GetUsersByRealm(ctx, realm, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersByRealmResponse(rsp)
}

// PostUsersWithBodyWithResponse request with arbitrary body returning *PostUsersResponse
func (c *ClientWithResponses) PostUsersWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersResponse, error) {
	rsp, err := c.PostUsersWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersResponse(rsp)
}

func (c *ClientWithResponses) PostUsersWithResponse(ctx context.Context, realm string, body PostUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersResponse, error) {
	rsp, err := c.PostUsers(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersResponse(rsp)
}

// GetUsersManagementPermissionsWithResponse request returning *GetUsersManagementPermissionsResponse
func (c *ClientWithResponses) GetUsersManagementPermissionsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetUsersManagementPermissionsResponse, error) {
	rsp, err := c.GetUsersManagementPermissions(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersManagementPermissionsResponse(rsp)
}

// PutUsersManagementPermissionsWithBodyWithResponse request with arbitrary body returning *PutUsersManagementPermissionsResponse
func (c *ClientWithResponses) PutUsersManagementPermissionsWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUsersManagementPermissionsResponse, error) {
	rsp, err := c.PutUsersManagementPermissionsWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUsersManagementPermissionsResponse(rsp)
}

func (c *ClientWithResponses) PutUsersManagementPermissionsWithResponse(ctx context.Context, realm string, body PutUsersManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUsersManagementPermissionsResponse, error) {
	rsp, err := c.PutUsersManagementPermissions(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUsersManagementPermissionsResponse(rsp)
}

// GetUsersCountWithResponse request returning *GetUsersCountResponse
func (c *ClientWithResponses) GetUsersCountWithResponse(ctx context.Context, realm string, params *GetUsersCountParams, reqEditors ...RequestEditorFn) (*GetUsersCountResponse, error) {
	rsp, err := c.GetUsersCount(ctx, realm, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersCountResponse(rsp)
}

// GetProfileWithResponse request returning *GetProfileResponse
func (c *ClientWithResponses) GetProfileWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetProfileResponse, error) {
	rsp, err := c.GetProfile(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProfileResponse(rsp)
}

// PutProfileWithBodyWithResponse request with arbitrary body returning *PutProfileResponse
func (c *ClientWithResponses) PutProfileWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutProfileResponse, error) {
	rsp, err := c.PutProfileWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutProfileResponse(rsp)
}

func (c *ClientWithResponses) PutProfileWithResponse(ctx context.Context, realm string, body PutProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*PutProfileResponse, error) {
	rsp, err := c.PutProfile(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutProfileResponse(rsp)
}

// DeleteUserByRealmByIdWithResponse request returning *DeleteUserByRealmByIdResponse
func (c *ClientWithResponses) DeleteUserByRealmByIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*DeleteUserByRealmByIdResponse, error) {
	rsp, err := c.DeleteUserByRealmById(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserByRealmByIdResponse(rsp)
}

// GetUserByRealmByIdWithResponse request returning *GetUserByRealmByIdResponse
func (c *ClientWithResponses) GetUserByRealmByIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetUserByRealmByIdResponse, error) {
	rsp, err := c.GetUserByRealmById(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserByRealmByIdResponse(rsp)
}

// PutUserWithBodyWithResponse request with arbitrary body returning *PutUserResponse
func (c *ClientWithResponses) PutUserWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUserResponse, error) {
	rsp, err := c.PutUserWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUserResponse(rsp)
}

func (c *ClientWithResponses) PutUserWithResponse(ctx context.Context, realm string, id string, body PutUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUserResponse, error) {
	rsp, err := c.PutUser(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUserResponse(rsp)
}

// GetConfiguredUserStorageCredentialTypesWithResponse request returning *GetConfiguredUserStorageCredentialTypesResponse
func (c *ClientWithResponses) GetConfiguredUserStorageCredentialTypesWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetConfiguredUserStorageCredentialTypesResponse, error) {
	rsp, err := c.GetConfiguredUserStorageCredentialTypes(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConfiguredUserStorageCredentialTypesResponse(rsp)
}

// GetConsentsWithResponse request returning *GetConsentsResponse
func (c *ClientWithResponses) GetConsentsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetConsentsResponse, error) {
	rsp, err := c.GetConsents(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsentsResponse(rsp)
}

// DeleteConsentWithResponse request returning *DeleteConsentResponse
func (c *ClientWithResponses) DeleteConsentWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*DeleteConsentResponse, error) {
	rsp, err := c.DeleteConsent(ctx, realm, id, client, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConsentResponse(rsp)
}

// GetCredentialsWithResponse request returning *GetCredentialsResponse
func (c *ClientWithResponses) GetCredentialsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetCredentialsResponse, error) {
	rsp, err := c.GetCredentials(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCredentialsResponse(rsp)
}

// DeleteCredentialWithResponse request returning *DeleteCredentialResponse
func (c *ClientWithResponses) DeleteCredentialWithResponse(ctx context.Context, realm string, id string, credentialId string, reqEditors ...RequestEditorFn) (*DeleteCredentialResponse, error) {
	rsp, err := c.DeleteCredential(ctx, realm, id, credentialId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCredentialResponse(rsp)
}

// PostMoveAfterWithResponse request returning *PostMoveAfterResponse
func (c *ClientWithResponses) PostMoveAfterWithResponse(ctx context.Context, realm string, id string, credentialId string, newPreviousCredentialId string, reqEditors ...RequestEditorFn) (*PostMoveAfterResponse, error) {
	rsp, err := c.PostMoveAfter(ctx, realm, id, credentialId, newPreviousCredentialId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMoveAfterResponse(rsp)
}

// PostMoveToFirstWithResponse request returning *PostMoveToFirstResponse
func (c *ClientWithResponses) PostMoveToFirstWithResponse(ctx context.Context, realm string, id string, credentialId string, reqEditors ...RequestEditorFn) (*PostMoveToFirstResponse, error) {
	rsp, err := c.PostMoveToFirst(ctx, realm, id, credentialId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMoveToFirstResponse(rsp)
}

// PutUserLabelWithBodyWithResponse request with arbitrary body returning *PutUserLabelResponse
func (c *ClientWithResponses) PutUserLabelWithBodyWithResponse(ctx context.Context, realm string, id string, credentialId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUserLabelResponse, error) {
	rsp, err := c.PutUserLabelWithBody(ctx, realm, id, credentialId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUserLabelResponse(rsp)
}

func (c *ClientWithResponses) PutUserLabelWithResponse(ctx context.Context, realm string, id string, credentialId string, body PutUserLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUserLabelResponse, error) {
	rsp, err := c.PutUserLabel(ctx, realm, id, credentialId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUserLabelResponse(rsp)
}

// PutDisableCredentialTypesWithBodyWithResponse request with arbitrary body returning *PutDisableCredentialTypesResponse
func (c *ClientWithResponses) PutDisableCredentialTypesWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutDisableCredentialTypesResponse, error) {
	rsp, err := c.PutDisableCredentialTypesWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDisableCredentialTypesResponse(rsp)
}

func (c *ClientWithResponses) PutDisableCredentialTypesWithResponse(ctx context.Context, realm string, id string, body PutDisableCredentialTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutDisableCredentialTypesResponse, error) {
	rsp, err := c.PutDisableCredentialTypes(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDisableCredentialTypesResponse(rsp)
}

// PutExecuteActionsEmailWithBodyWithResponse request with arbitrary body returning *PutExecuteActionsEmailResponse
func (c *ClientWithResponses) PutExecuteActionsEmailWithBodyWithResponse(ctx context.Context, realm string, id string, params *PutExecuteActionsEmailParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutExecuteActionsEmailResponse, error) {
	rsp, err := c.PutExecuteActionsEmailWithBody(ctx, realm, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutExecuteActionsEmailResponse(rsp)
}

func (c *ClientWithResponses) PutExecuteActionsEmailWithResponse(ctx context.Context, realm string, id string, params *PutExecuteActionsEmailParams, body PutExecuteActionsEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutExecuteActionsEmailResponse, error) {
	rsp, err := c.PutExecuteActionsEmail(ctx, realm, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutExecuteActionsEmailResponse(rsp)
}

// GetFederatedIdentityWithResponse request returning *GetFederatedIdentityResponse
func (c *ClientWithResponses) GetFederatedIdentityWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetFederatedIdentityResponse, error) {
	rsp, err := c.GetFederatedIdentity(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFederatedIdentityResponse(rsp)
}

// DeleteFederatedIdentityWithResponse request returning *DeleteFederatedIdentityResponse
func (c *ClientWithResponses) DeleteFederatedIdentityWithResponse(ctx context.Context, realm string, id string, provider string, reqEditors ...RequestEditorFn) (*DeleteFederatedIdentityResponse, error) {
	rsp, err := c.DeleteFederatedIdentity(ctx, realm, id, provider, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFederatedIdentityResponse(rsp)
}

// PostFederatedIdentityWithResponse request returning *PostFederatedIdentityResponse
func (c *ClientWithResponses) PostFederatedIdentityWithResponse(ctx context.Context, realm string, id string, provider string, reqEditors ...RequestEditorFn) (*PostFederatedIdentityResponse, error) {
	rsp, err := c.PostFederatedIdentity(ctx, realm, id, provider, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFederatedIdentityResponse(rsp)
}

// GetUserGroupsWithResponse request returning *GetUserGroupsResponse
func (c *ClientWithResponses) GetUserGroupsWithResponse(ctx context.Context, realm string, id string, params *GetUserGroupsParams, reqEditors ...RequestEditorFn) (*GetUserGroupsResponse, error) {
	rsp, err := c.GetUserGroups(ctx, realm, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserGroupsResponse(rsp)
}

// GetUserGroupsCountWithResponse request returning *GetUserGroupsCountResponse
func (c *ClientWithResponses) GetUserGroupsCountWithResponse(ctx context.Context, realm string, id string, params *GetUserGroupsCountParams, reqEditors ...RequestEditorFn) (*GetUserGroupsCountResponse, error) {
	rsp, err := c.GetUserGroupsCount(ctx, realm, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserGroupsCountResponse(rsp)
}

// DeleteUserGroupWithResponse request returning *DeleteUserGroupResponse
func (c *ClientWithResponses) DeleteUserGroupWithResponse(ctx context.Context, realm string, id string, groupId string, reqEditors ...RequestEditorFn) (*DeleteUserGroupResponse, error) {
	rsp, err := c.DeleteUserGroup(ctx, realm, id, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserGroupResponse(rsp)
}

// PutUserGroupWithResponse request returning *PutUserGroupResponse
func (c *ClientWithResponses) PutUserGroupWithResponse(ctx context.Context, realm string, id string, groupId string, reqEditors ...RequestEditorFn) (*PutUserGroupResponse, error) {
	rsp, err := c.PutUserGroup(ctx, realm, id, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUserGroupResponse(rsp)
}

// PostImpersonationWithResponse request returning *PostImpersonationResponse
func (c *ClientWithResponses) PostImpersonationWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*PostImpersonationResponse, error) {
	rsp, err := c.PostImpersonation(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostImpersonationResponse(rsp)
}

// PostLogoutWithResponse request returning *PostLogoutResponse
func (c *ClientWithResponses) PostLogoutWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*PostLogoutResponse, error) {
	rsp, err := c.PostLogout(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLogoutResponse(rsp)
}

// GetOfflineSessionWithResponse request returning *GetOfflineSessionResponse
func (c *ClientWithResponses) GetOfflineSessionWithResponse(ctx context.Context, realm string, id string, clientUuid string, reqEditors ...RequestEditorFn) (*GetOfflineSessionResponse, error) {
	rsp, err := c.GetOfflineSession(ctx, realm, id, clientUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOfflineSessionResponse(rsp)
}

// PutResetPasswordWithBodyWithResponse request with arbitrary body returning *PutResetPasswordResponse
func (c *ClientWithResponses) PutResetPasswordWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutResetPasswordResponse, error) {
	rsp, err := c.PutResetPasswordWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutResetPasswordResponse(rsp)
}

func (c *ClientWithResponses) PutResetPasswordWithResponse(ctx context.Context, realm string, id string, body PutResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PutResetPasswordResponse, error) {
	rsp, err := c.PutResetPassword(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutResetPasswordResponse(rsp)
}

// PutResetPasswordEmailWithResponse request returning *PutResetPasswordEmailResponse
func (c *ClientWithResponses) PutResetPasswordEmailWithResponse(ctx context.Context, realm string, id string, params *PutResetPasswordEmailParams, reqEditors ...RequestEditorFn) (*PutResetPasswordEmailResponse, error) {
	rsp, err := c.PutResetPasswordEmail(ctx, realm, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutResetPasswordEmailResponse(rsp)
}

// GetUserRoleMappingsWithResponse request returning *GetUserRoleMappingsResponse
func (c *ClientWithResponses) GetUserRoleMappingsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetUserRoleMappingsResponse, error) {
	rsp, err := c.GetUserRoleMappings(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserRoleMappingsResponse(rsp)
}

// DeleteUserRoleMappingsClientWithBodyWithResponse request with arbitrary body returning *DeleteUserRoleMappingsClientResponse
func (c *ClientWithResponses) DeleteUserRoleMappingsClientWithBodyWithResponse(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteUserRoleMappingsClientResponse, error) {
	rsp, err := c.DeleteUserRoleMappingsClientWithBody(ctx, realm, id, client, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserRoleMappingsClientResponse(rsp)
}

func (c *ClientWithResponses) DeleteUserRoleMappingsClientWithResponse(ctx context.Context, realm string, id string, client string, body DeleteUserRoleMappingsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteUserRoleMappingsClientResponse, error) {
	rsp, err := c.DeleteUserRoleMappingsClient(ctx, realm, id, client, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserRoleMappingsClientResponse(rsp)
}

// GetUserRoleMappingsClientWithResponse request returning *GetUserRoleMappingsClientResponse
func (c *ClientWithResponses) GetUserRoleMappingsClientWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*GetUserRoleMappingsClientResponse, error) {
	rsp, err := c.GetUserRoleMappingsClient(ctx, realm, id, client, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserRoleMappingsClientResponse(rsp)
}

// PostUserRoleMappingsClientWithBodyWithResponse request with arbitrary body returning *PostUserRoleMappingsClientResponse
func (c *ClientWithResponses) PostUserRoleMappingsClientWithBodyWithResponse(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserRoleMappingsClientResponse, error) {
	rsp, err := c.PostUserRoleMappingsClientWithBody(ctx, realm, id, client, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserRoleMappingsClientResponse(rsp)
}

func (c *ClientWithResponses) PostUserRoleMappingsClientWithResponse(ctx context.Context, realm string, id string, client string, body PostUserRoleMappingsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserRoleMappingsClientResponse, error) {
	rsp, err := c.PostUserRoleMappingsClient(ctx, realm, id, client, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserRoleMappingsClientResponse(rsp)
}

// GetUserRoleMappingsClientAvailableWithResponse request returning *GetUserRoleMappingsClientAvailableResponse
func (c *ClientWithResponses) GetUserRoleMappingsClientAvailableWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*GetUserRoleMappingsClientAvailableResponse, error) {
	rsp, err := c.GetUserRoleMappingsClientAvailable(ctx, realm, id, client, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserRoleMappingsClientAvailableResponse(rsp)
}

// GetUserRoleMappingsClientCompositeWithResponse request returning *GetUserRoleMappingsClientCompositeResponse
func (c *ClientWithResponses) GetUserRoleMappingsClientCompositeWithResponse(ctx context.Context, realm string, id string, client string, params *GetUserRoleMappingsClientCompositeParams, reqEditors ...RequestEditorFn) (*GetUserRoleMappingsClientCompositeResponse, error) {
	rsp, err := c.GetUserRoleMappingsClientComposite(ctx, realm, id, client, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserRoleMappingsClientCompositeResponse(rsp)
}

// DeleteUserRoleMappingsRealmWithBodyWithResponse request with arbitrary body returning *DeleteUserRoleMappingsRealmResponse
func (c *ClientWithResponses) DeleteUserRoleMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteUserRoleMappingsRealmResponse, error) {
	rsp, err := c.DeleteUserRoleMappingsRealmWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserRoleMappingsRealmResponse(rsp)
}

func (c *ClientWithResponses) DeleteUserRoleMappingsRealmWithResponse(ctx context.Context, realm string, id string, body DeleteUserRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteUserRoleMappingsRealmResponse, error) {
	rsp, err := c.DeleteUserRoleMappingsRealm(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserRoleMappingsRealmResponse(rsp)
}

// GetUserRoleMappingsRealmWithResponse request returning *GetUserRoleMappingsRealmResponse
func (c *ClientWithResponses) GetUserRoleMappingsRealmWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetUserRoleMappingsRealmResponse, error) {
	rsp, err := c.GetUserRoleMappingsRealm(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserRoleMappingsRealmResponse(rsp)
}

// PostUserRoleMappingsRealmWithBodyWithResponse request with arbitrary body returning *PostUserRoleMappingsRealmResponse
func (c *ClientWithResponses) PostUserRoleMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserRoleMappingsRealmResponse, error) {
	rsp, err := c.PostUserRoleMappingsRealmWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserRoleMappingsRealmResponse(rsp)
}

func (c *ClientWithResponses) PostUserRoleMappingsRealmWithResponse(ctx context.Context, realm string, id string, body PostUserRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserRoleMappingsRealmResponse, error) {
	rsp, err := c.PostUserRoleMappingsRealm(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserRoleMappingsRealmResponse(rsp)
}

// GetUserRoleMappingsRealmAvailableWithResponse request returning *GetUserRoleMappingsRealmAvailableResponse
func (c *ClientWithResponses) GetUserRoleMappingsRealmAvailableWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetUserRoleMappingsRealmAvailableResponse, error) {
	rsp, err := c.GetUserRoleMappingsRealmAvailable(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserRoleMappingsRealmAvailableResponse(rsp)
}

// GetUserRoleMappingsRealmCompositeWithResponse request returning *GetUserRoleMappingsRealmCompositeResponse
func (c *ClientWithResponses) GetUserRoleMappingsRealmCompositeWithResponse(ctx context.Context, realm string, id string, params *GetUserRoleMappingsRealmCompositeParams, reqEditors ...RequestEditorFn) (*GetUserRoleMappingsRealmCompositeResponse, error) {
	rsp, err := c.GetUserRoleMappingsRealmComposite(ctx, realm, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserRoleMappingsRealmCompositeResponse(rsp)
}

// PutSendVerifyEmailWithResponse request returning *PutSendVerifyEmailResponse
func (c *ClientWithResponses) PutSendVerifyEmailWithResponse(ctx context.Context, realm string, id string, params *PutSendVerifyEmailParams, reqEditors ...RequestEditorFn) (*PutSendVerifyEmailResponse, error) {
	rsp, err := c.PutSendVerifyEmail(ctx, realm, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSendVerifyEmailResponse(rsp)
}

// GetSessionsWithResponse request returning *GetSessionsResponse
func (c *ClientWithResponses) GetSessionsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetSessionsResponse, error) {
	rsp, err := c.GetSessions(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSessionsResponse(rsp)
}

// ParseGetResponse parses an HTTP response from a GetWithResponse call
func ParseGetResponse(rsp *http.Response) (*GetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostResponse parses an HTTP response from a PostWithResponse call
func ParsePostResponse(rsp *http.Response) (*PostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteByRealmResponse parses an HTTP response from a DeleteByRealmWithResponse call
func ParseDeleteByRealmResponse(rsp *http.Response) (*DeleteByRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteByRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetByRealmResponse parses an HTTP response from a GetByRealmWithResponse call
func ParseGetByRealmResponse(rsp *http.Response) (*GetByRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetByRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RealmRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutByRealmResponse parses an HTTP response from a PutByRealmWithResponse call
func ParsePutByRealmResponse(rsp *http.Response) (*PutByRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutByRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteAdminEventsResponse parses an HTTP response from a DeleteAdminEventsWithResponse call
func ParseDeleteAdminEventsResponse(rsp *http.Response) (*DeleteAdminEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminEventsResponse parses an HTTP response from a GetAdminEventsWithResponse call
func ParseGetAdminEventsResponse(rsp *http.Response) (*GetAdminEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteUsersResponse parses an HTTP response from a DeleteUsersWithResponse call
func ParseDeleteUsersResponse(rsp *http.Response) (*DeleteUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteBruteForceUserResponse parses an HTTP response from a DeleteBruteForceUserWithResponse call
func ParseDeleteBruteForceUserResponse(rsp *http.Response) (*DeleteBruteForceUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteBruteForceUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetBruteForceUserResponse parses an HTTP response from a GetBruteForceUserWithResponse call
func ParseGetBruteForceUserResponse(rsp *http.Response) (*GetBruteForceUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBruteForceUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAuthenticatorProvidersResponse parses an HTTP response from a GetAuthenticatorProvidersWithResponse call
func ParseGetAuthenticatorProvidersResponse(rsp *http.Response) (*GetAuthenticatorProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthenticatorProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetClientAuthenticatorProvidersResponse parses an HTTP response from a GetClientAuthenticatorProvidersWithResponse call
func ParseGetClientAuthenticatorProvidersResponse(rsp *http.Response) (*GetClientAuthenticatorProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientAuthenticatorProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAuthenticationConfigResponse parses an HTTP response from a PostAuthenticationConfigWithResponse call
func ParsePostAuthenticationConfigResponse(rsp *http.Response) (*PostAuthenticationConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthenticationConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetConfigDescriptionResponse parses an HTTP response from a GetConfigDescriptionWithResponse call
func ParseGetConfigDescriptionResponse(rsp *http.Response) (*GetConfigDescriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConfigDescriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthenticatorConfigInfoRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteConfigResponse parses an HTTP response from a DeleteConfigWithResponse call
func ParseDeleteConfigResponse(rsp *http.Response) (*DeleteConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAuthenticationConfigResponse parses an HTTP response from a GetAuthenticationConfigWithResponse call
func ParseGetAuthenticationConfigResponse(rsp *http.Response) (*GetAuthenticationConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthenticationConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthenticatorConfigRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAuthenticationConfigResponse parses an HTTP response from a PutAuthenticationConfigWithResponse call
func ParsePutAuthenticationConfigResponse(rsp *http.Response) (*PutAuthenticationConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAuthenticationConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostExecutionsResponse parses an HTTP response from a PostExecutionsWithResponse call
func ParsePostExecutionsResponse(rsp *http.Response) (*PostExecutionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostExecutionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteExecutionResponse parses an HTTP response from a DeleteExecutionWithResponse call
func ParseDeleteExecutionResponse(rsp *http.Response) (*DeleteExecutionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteExecutionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetExecutionResponse parses an HTTP response from a GetExecutionWithResponse call
func ParseGetExecutionResponse(rsp *http.Response) (*GetExecutionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetExecutionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostExecutionConfigResponse parses an HTTP response from a PostExecutionConfigWithResponse call
func ParsePostExecutionConfigResponse(rsp *http.Response) (*PostExecutionConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostExecutionConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetExecutionConfigResponse parses an HTTP response from a GetExecutionConfigWithResponse call
func ParseGetExecutionConfigResponse(rsp *http.Response) (*GetExecutionConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetExecutionConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthenticatorConfigRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostExecutionLowerPriorityResponse parses an HTTP response from a PostExecutionLowerPriorityWithResponse call
func ParsePostExecutionLowerPriorityResponse(rsp *http.Response) (*PostExecutionLowerPriorityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostExecutionLowerPriorityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostExecutionRaisePriorityResponse parses an HTTP response from a PostExecutionRaisePriorityWithResponse call
func ParsePostExecutionRaisePriorityResponse(rsp *http.Response) (*PostExecutionRaisePriorityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostExecutionRaisePriorityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetFlowsResponse parses an HTTP response from a GetFlowsWithResponse call
func ParseGetFlowsResponse(rsp *http.Response) (*GetFlowsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFlowsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostFlowsResponse parses an HTTP response from a PostFlowsWithResponse call
func ParsePostFlowsResponse(rsp *http.Response) (*PostFlowsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFlowsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCopyResponse parses an HTTP response from a PostCopyWithResponse call
func ParsePostCopyResponse(rsp *http.Response) (*PostCopyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCopyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetExecutionsResponse parses an HTTP response from a GetExecutionsWithResponse call
func ParseGetExecutionsResponse(rsp *http.Response) (*GetExecutionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetExecutionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutExecutionsResponse parses an HTTP response from a PutExecutionsWithResponse call
func ParsePutExecutionsResponse(rsp *http.Response) (*PutExecutionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutExecutionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostExecutionResponse parses an HTTP response from a PostExecutionWithResponse call
func ParsePostExecutionResponse(rsp *http.Response) (*PostExecutionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostExecutionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostFlowResponse parses an HTTP response from a PostFlowWithResponse call
func ParsePostFlowResponse(rsp *http.Response) (*PostFlowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFlowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteFlowResponse parses an HTTP response from a DeleteFlowWithResponse call
func ParseDeleteFlowResponse(rsp *http.Response) (*DeleteFlowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFlowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetFlowResponse parses an HTTP response from a GetFlowWithResponse call
func ParseGetFlowResponse(rsp *http.Response) (*GetFlowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFlowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthenticationFlowRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutFlowResponse parses an HTTP response from a PutFlowWithResponse call
func ParsePutFlowResponse(rsp *http.Response) (*PutFlowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutFlowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetFormActionProvidersResponse parses an HTTP response from a GetFormActionProvidersWithResponse call
func ParseGetFormActionProvidersResponse(rsp *http.Response) (*GetFormActionProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFormActionProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetFormProvidersResponse parses an HTTP response from a GetFormProvidersWithResponse call
func ParseGetFormProvidersResponse(rsp *http.Response) (*GetFormProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFormProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPerClientConfigDescriptionResponse parses an HTTP response from a GetPerClientConfigDescriptionWithResponse call
func ParseGetPerClientConfigDescriptionResponse(rsp *http.Response) (*GetPerClientConfigDescriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPerClientConfigDescriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]ConfigPropertyRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostRegisterRequiredActionResponse parses an HTTP response from a PostRegisterRequiredActionWithResponse call
func ParsePostRegisterRequiredActionResponse(rsp *http.Response) (*PostRegisterRequiredActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRegisterRequiredActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRequiredActionsResponse parses an HTTP response from a GetRequiredActionsWithResponse call
func ParseGetRequiredActionsResponse(rsp *http.Response) (*GetRequiredActionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRequiredActionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteRequiredActionResponse parses an HTTP response from a DeleteRequiredActionWithResponse call
func ParseDeleteRequiredActionResponse(rsp *http.Response) (*DeleteRequiredActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRequiredActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRequiredActionResponse parses an HTTP response from a GetRequiredActionWithResponse call
func ParseGetRequiredActionResponse(rsp *http.Response) (*GetRequiredActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRequiredActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RequiredActionProviderRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutRequiredActionResponse parses an HTTP response from a PutRequiredActionWithResponse call
func ParsePutRequiredActionResponse(rsp *http.Response) (*PutRequiredActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRequiredActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRequiredActionLowerPriorityResponse parses an HTTP response from a PostRequiredActionLowerPriorityWithResponse call
func ParsePostRequiredActionLowerPriorityResponse(rsp *http.Response) (*PostRequiredActionLowerPriorityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRequiredActionLowerPriorityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRequiredActionRaisePriorityResponse parses an HTTP response from a PostRequiredActionRaisePriorityWithResponse call
func ParsePostRequiredActionRaisePriorityResponse(rsp *http.Response) (*PostRequiredActionRaisePriorityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRequiredActionRaisePriorityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUnregisteredRequiredActionsResponse parses an HTTP response from a GetUnregisteredRequiredActionsWithResponse call
func ParseGetUnregisteredRequiredActionsResponse(rsp *http.Response) (*GetUnregisteredRequiredActionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUnregisteredRequiredActionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostClientDescriptionConverterResponse parses an HTTP response from a PostClientDescriptionConverterWithResponse call
func ParsePostClientDescriptionConverterResponse(rsp *http.Response) (*PostClientDescriptionConverterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostClientDescriptionConverterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClientRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPoliciesResponse parses an HTTP response from a GetPoliciesWithResponse call
func ParseGetPoliciesResponse(rsp *http.Response) (*GetPoliciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClientPoliciesRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutPoliciesResponse parses an HTTP response from a PutPoliciesWithResponse call
func ParsePutPoliciesResponse(rsp *http.Response) (*PutPoliciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetProfilesResponse parses an HTTP response from a GetProfilesWithResponse call
func ParseGetProfilesResponse(rsp *http.Response) (*GetProfilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProfilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClientProfilesRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutProfilesResponse parses an HTTP response from a PutProfilesWithResponse call
func ParsePutProfilesResponse(rsp *http.Response) (*PutProfilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutProfilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetProvidersResponse parses an HTTP response from a GetProvidersWithResponse call
func ParseGetProvidersResponse(rsp *http.Response) (*GetProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetClientScopesResponse parses an HTTP response from a GetClientScopesWithResponse call
func ParseGetClientScopesResponse(rsp *http.Response) (*GetClientScopesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientScopesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostClientScopesResponse parses an HTTP response from a PostClientScopesWithResponse call
func ParsePostClientScopesResponse(rsp *http.Response) (*PostClientScopesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostClientScopesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteClientScopeProtocolMappersModelResponse parses an HTTP response from a DeleteClientScopeProtocolMappersModelWithResponse call
func ParseDeleteClientScopeProtocolMappersModelResponse(rsp *http.Response) (*DeleteClientScopeProtocolMappersModelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteClientScopeProtocolMappersModelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClientScopeProtocolMappersModelResponse parses an HTTP response from a GetClientScopeProtocolMappersModelWithResponse call
func ParseGetClientScopeProtocolMappersModelResponse(rsp *http.Response) (*GetClientScopeProtocolMappersModelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientScopeProtocolMappersModelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProtocolMapperRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutClientScopeProtocolMappersModelResponse parses an HTTP response from a PutClientScopeProtocolMappersModelWithResponse call
func ParsePutClientScopeProtocolMappersModelResponse(rsp *http.Response) (*PutClientScopeProtocolMappersModelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutClientScopeProtocolMappersModelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteClientScopeResponse parses an HTTP response from a DeleteClientScopeWithResponse call
func ParseDeleteClientScopeResponse(rsp *http.Response) (*DeleteClientScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteClientScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClientScopeResponse parses an HTTP response from a GetClientScopeWithResponse call
func ParseGetClientScopeResponse(rsp *http.Response) (*GetClientScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClientScopeRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutClientScopeResponse parses an HTTP response from a PutClientScopeWithResponse call
func ParsePutClientScopeResponse(rsp *http.Response) (*PutClientScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutClientScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostClientScopeProtocolMappersAddModelsResponse parses an HTTP response from a PostClientScopeProtocolMappersAddModelsWithResponse call
func ParsePostClientScopeProtocolMappersAddModelsResponse(rsp *http.Response) (*PostClientScopeProtocolMappersAddModelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostClientScopeProtocolMappersAddModelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClientScopeProtocolMappersModelsResponse parses an HTTP response from a GetClientScopeProtocolMappersModelsWithResponse call
func ParseGetClientScopeProtocolMappersModelsResponse(rsp *http.Response) (*GetClientScopeProtocolMappersModelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientScopeProtocolMappersModelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostClientScopeProtocolMappersModelsResponse parses an HTTP response from a PostClientScopeProtocolMappersModelsWithResponse call
func ParsePostClientScopeProtocolMappersModelsResponse(rsp *http.Response) (*PostClientScopeProtocolMappersModelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostClientScopeProtocolMappersModelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClientScopeProtocolMappersProtocolResponse parses an HTTP response from a GetClientScopeProtocolMappersProtocolWithResponse call
func ParseGetClientScopeProtocolMappersProtocolResponse(rsp *http.Response) (*GetClientScopeProtocolMappersProtocolResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientScopeProtocolMappersProtocolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetClientScopeScopeMappingsResponse parses an HTTP response from a GetClientScopeScopeMappingsWithResponse call
func ParseGetClientScopeScopeMappingsResponse(rsp *http.Response) (*GetClientScopeScopeMappingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientScopeScopeMappingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MappingsRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteClientScopeScopeMappingsClientResponse parses an HTTP response from a DeleteClientScopeScopeMappingsClientWithResponse call
func ParseDeleteClientScopeScopeMappingsClientResponse(rsp *http.Response) (*DeleteClientScopeScopeMappingsClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteClientScopeScopeMappingsClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClientScopeScopeMappingsClientResponse parses an HTTP response from a GetClientScopeScopeMappingsClientWithResponse call
func ParseGetClientScopeScopeMappingsClientResponse(rsp *http.Response) (*GetClientScopeScopeMappingsClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientScopeScopeMappingsClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostClientScopeScopeMappingsClientResponse parses an HTTP response from a PostClientScopeScopeMappingsClientWithResponse call
func ParsePostClientScopeScopeMappingsClientResponse(rsp *http.Response) (*PostClientScopeScopeMappingsClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostClientScopeScopeMappingsClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClientScopeScopeMappingsClientAvailableResponse parses an HTTP response from a GetClientScopeScopeMappingsClientAvailableWithResponse call
func ParseGetClientScopeScopeMappingsClientAvailableResponse(rsp *http.Response) (*GetClientScopeScopeMappingsClientAvailableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientScopeScopeMappingsClientAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetClientScopeScopeMappingsClientCompositeResponse parses an HTTP response from a GetClientScopeScopeMappingsClientCompositeWithResponse call
func ParseGetClientScopeScopeMappingsClientCompositeResponse(rsp *http.Response) (*GetClientScopeScopeMappingsClientCompositeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientScopeScopeMappingsClientCompositeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteClientScopeScopeMappingsRealmResponse parses an HTTP response from a DeleteClientScopeScopeMappingsRealmWithResponse call
func ParseDeleteClientScopeScopeMappingsRealmResponse(rsp *http.Response) (*DeleteClientScopeScopeMappingsRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteClientScopeScopeMappingsRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClientScopeScopeMappingsRealmResponse parses an HTTP response from a GetClientScopeScopeMappingsRealmWithResponse call
func ParseGetClientScopeScopeMappingsRealmResponse(rsp *http.Response) (*GetClientScopeScopeMappingsRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientScopeScopeMappingsRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostClientScopeScopeMappingsRealmResponse parses an HTTP response from a PostClientScopeScopeMappingsRealmWithResponse call
func ParsePostClientScopeScopeMappingsRealmResponse(rsp *http.Response) (*PostClientScopeScopeMappingsRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostClientScopeScopeMappingsRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClientScopeScopeMappingsRealmAvailableResponse parses an HTTP response from a GetClientScopeScopeMappingsRealmAvailableWithResponse call
func ParseGetClientScopeScopeMappingsRealmAvailableResponse(rsp *http.Response) (*GetClientScopeScopeMappingsRealmAvailableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientScopeScopeMappingsRealmAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetClientScopeScopeMappingsRealmCompositeResponse parses an HTTP response from a GetClientScopeScopeMappingsRealmCompositeWithResponse call
func ParseGetClientScopeScopeMappingsRealmCompositeResponse(rsp *http.Response) (*GetClientScopeScopeMappingsRealmCompositeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientScopeScopeMappingsRealmCompositeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetClientSessionStatsResponse parses an HTTP response from a GetClientSessionStatsWithResponse call
func ParseGetClientSessionStatsResponse(rsp *http.Response) (*GetClientSessionStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientSessionStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetClientTemplatesResponse parses an HTTP response from a GetClientTemplatesWithResponse call
func ParseGetClientTemplatesResponse(rsp *http.Response) (*GetClientTemplatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostClientTemplatesResponse parses an HTTP response from a PostClientTemplatesWithResponse call
func ParsePostClientTemplatesResponse(rsp *http.Response) (*PostClientTemplatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostClientTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteClientTemplateProtocolMappersModelResponse parses an HTTP response from a DeleteClientTemplateProtocolMappersModelWithResponse call
func ParseDeleteClientTemplateProtocolMappersModelResponse(rsp *http.Response) (*DeleteClientTemplateProtocolMappersModelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteClientTemplateProtocolMappersModelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClientTemplateProtocolMappersModelResponse parses an HTTP response from a GetClientTemplateProtocolMappersModelWithResponse call
func ParseGetClientTemplateProtocolMappersModelResponse(rsp *http.Response) (*GetClientTemplateProtocolMappersModelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientTemplateProtocolMappersModelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProtocolMapperRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutClientTemplateProtocolMappersModelResponse parses an HTTP response from a PutClientTemplateProtocolMappersModelWithResponse call
func ParsePutClientTemplateProtocolMappersModelResponse(rsp *http.Response) (*PutClientTemplateProtocolMappersModelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutClientTemplateProtocolMappersModelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteClientTemplateResponse parses an HTTP response from a DeleteClientTemplateWithResponse call
func ParseDeleteClientTemplateResponse(rsp *http.Response) (*DeleteClientTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteClientTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClientTemplateResponse parses an HTTP response from a GetClientTemplateWithResponse call
func ParseGetClientTemplateResponse(rsp *http.Response) (*GetClientTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClientScopeRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutClientTemplateResponse parses an HTTP response from a PutClientTemplateWithResponse call
func ParsePutClientTemplateResponse(rsp *http.Response) (*PutClientTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutClientTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostClientTemplateProtocolMappersAddModelsResponse parses an HTTP response from a PostClientTemplateProtocolMappersAddModelsWithResponse call
func ParsePostClientTemplateProtocolMappersAddModelsResponse(rsp *http.Response) (*PostClientTemplateProtocolMappersAddModelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostClientTemplateProtocolMappersAddModelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClientTemplateProtocolMappersModelsResponse parses an HTTP response from a GetClientTemplateProtocolMappersModelsWithResponse call
func ParseGetClientTemplateProtocolMappersModelsResponse(rsp *http.Response) (*GetClientTemplateProtocolMappersModelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientTemplateProtocolMappersModelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostClientTemplateProtocolMappersModelsResponse parses an HTTP response from a PostClientTemplateProtocolMappersModelsWithResponse call
func ParsePostClientTemplateProtocolMappersModelsResponse(rsp *http.Response) (*PostClientTemplateProtocolMappersModelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostClientTemplateProtocolMappersModelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClientTemplateProtocolMappersProtocolResponse parses an HTTP response from a GetClientTemplateProtocolMappersProtocolWithResponse call
func ParseGetClientTemplateProtocolMappersProtocolResponse(rsp *http.Response) (*GetClientTemplateProtocolMappersProtocolResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientTemplateProtocolMappersProtocolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetClientTemplateScopeMappingsResponse parses an HTTP response from a GetClientTemplateScopeMappingsWithResponse call
func ParseGetClientTemplateScopeMappingsResponse(rsp *http.Response) (*GetClientTemplateScopeMappingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientTemplateScopeMappingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MappingsRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteClientTemplateScopeMappingsClientResponse parses an HTTP response from a DeleteClientTemplateScopeMappingsClientWithResponse call
func ParseDeleteClientTemplateScopeMappingsClientResponse(rsp *http.Response) (*DeleteClientTemplateScopeMappingsClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteClientTemplateScopeMappingsClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClientTemplateScopeMappingsClientResponse parses an HTTP response from a GetClientTemplateScopeMappingsClientWithResponse call
func ParseGetClientTemplateScopeMappingsClientResponse(rsp *http.Response) (*GetClientTemplateScopeMappingsClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientTemplateScopeMappingsClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostClientTemplateScopeMappingsClientResponse parses an HTTP response from a PostClientTemplateScopeMappingsClientWithResponse call
func ParsePostClientTemplateScopeMappingsClientResponse(rsp *http.Response) (*PostClientTemplateScopeMappingsClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostClientTemplateScopeMappingsClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClientTemplateScopeMappingsClientAvailableResponse parses an HTTP response from a GetClientTemplateScopeMappingsClientAvailableWithResponse call
func ParseGetClientTemplateScopeMappingsClientAvailableResponse(rsp *http.Response) (*GetClientTemplateScopeMappingsClientAvailableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientTemplateScopeMappingsClientAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetClientTemplateScopeMappingsClientCompositeResponse parses an HTTP response from a GetClientTemplateScopeMappingsClientCompositeWithResponse call
func ParseGetClientTemplateScopeMappingsClientCompositeResponse(rsp *http.Response) (*GetClientTemplateScopeMappingsClientCompositeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientTemplateScopeMappingsClientCompositeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteClientTemplateScopeMappingsRealmResponse parses an HTTP response from a DeleteClientTemplateScopeMappingsRealmWithResponse call
func ParseDeleteClientTemplateScopeMappingsRealmResponse(rsp *http.Response) (*DeleteClientTemplateScopeMappingsRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteClientTemplateScopeMappingsRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClientTemplateScopeMappingsRealmResponse parses an HTTP response from a GetClientTemplateScopeMappingsRealmWithResponse call
func ParseGetClientTemplateScopeMappingsRealmResponse(rsp *http.Response) (*GetClientTemplateScopeMappingsRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientTemplateScopeMappingsRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostClientTemplateScopeMappingsRealmResponse parses an HTTP response from a PostClientTemplateScopeMappingsRealmWithResponse call
func ParsePostClientTemplateScopeMappingsRealmResponse(rsp *http.Response) (*PostClientTemplateScopeMappingsRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostClientTemplateScopeMappingsRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClientTemplateScopeMappingsRealmAvailableResponse parses an HTTP response from a GetClientTemplateScopeMappingsRealmAvailableWithResponse call
func ParseGetClientTemplateScopeMappingsRealmAvailableResponse(rsp *http.Response) (*GetClientTemplateScopeMappingsRealmAvailableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientTemplateScopeMappingsRealmAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetClientTemplateScopeMappingsRealmCompositeResponse parses an HTTP response from a GetClientTemplateScopeMappingsRealmCompositeWithResponse call
func ParseGetClientTemplateScopeMappingsRealmCompositeResponse(rsp *http.Response) (*GetClientTemplateScopeMappingsRealmCompositeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientTemplateScopeMappingsRealmCompositeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetClientsResponse parses an HTTP response from a GetClientsWithResponse call
func ParseGetClientsResponse(rsp *http.Response) (*GetClientsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostClientsResponse parses an HTTP response from a PostClientsWithResponse call
func ParsePostClientsResponse(rsp *http.Response) (*PostClientsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostClientsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClientsInitialAccessResponse parses an HTTP response from a GetClientsInitialAccessWithResponse call
func ParseGetClientsInitialAccessResponse(rsp *http.Response) (*GetClientsInitialAccessResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientsInitialAccessResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostClientsInitialAccessResponse parses an HTTP response from a PostClientsInitialAccessWithResponse call
func ParsePostClientsInitialAccessResponse(rsp *http.Response) (*PostClientsInitialAccessResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostClientsInitialAccessResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClientInitialAccessPresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteClientsInitialAccesResponse parses an HTTP response from a DeleteClientsInitialAccesWithResponse call
func ParseDeleteClientsInitialAccesResponse(rsp *http.Response) (*DeleteClientsInitialAccesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteClientsInitialAccesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteClientProtocolMappersModelResponse parses an HTTP response from a DeleteClientProtocolMappersModelWithResponse call
func ParseDeleteClientProtocolMappersModelResponse(rsp *http.Response) (*DeleteClientProtocolMappersModelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteClientProtocolMappersModelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClientProtocolMappersModelResponse parses an HTTP response from a GetClientProtocolMappersModelWithResponse call
func ParseGetClientProtocolMappersModelResponse(rsp *http.Response) (*GetClientProtocolMappersModelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientProtocolMappersModelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProtocolMapperRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutClientProtocolMappersModelResponse parses an HTTP response from a PutClientProtocolMappersModelWithResponse call
func ParsePutClientProtocolMappersModelResponse(rsp *http.Response) (*PutClientProtocolMappersModelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutClientProtocolMappersModelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteClientByRealmByIdResponse parses an HTTP response from a DeleteClientByRealmByIdWithResponse call
func ParseDeleteClientByRealmByIdResponse(rsp *http.Response) (*DeleteClientByRealmByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteClientByRealmByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClientByRealmByIdResponse parses an HTTP response from a GetClientByRealmByIdWithResponse call
func ParseGetClientByRealmByIdResponse(rsp *http.Response) (*GetClientByRealmByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientByRealmByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClientRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutClientResponse parses an HTTP response from a PutClientWithResponse call
func ParsePutClientResponse(rsp *http.Response) (*PutClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCertificateResponse parses an HTTP response from a GetCertificateWithResponse call
func ParseGetCertificateResponse(rsp *http.Response) (*GetCertificateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCertificateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CertificateRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostDownloadResponse parses an HTTP response from a PostDownloadWithResponse call
func ParsePostDownloadResponse(rsp *http.Response) (*PostDownloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDownloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostGenerateResponse parses an HTTP response from a PostGenerateWithResponse call
func ParsePostGenerateResponse(rsp *http.Response) (*PostGenerateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGenerateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CertificateRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostGenerateAndDownloadResponse parses an HTTP response from a PostGenerateAndDownloadWithResponse call
func ParsePostGenerateAndDownloadResponse(rsp *http.Response) (*PostGenerateAndDownloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGenerateAndDownloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostUploadResponse parses an HTTP response from a PostUploadWithResponse call
func ParsePostUploadResponse(rsp *http.Response) (*PostUploadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUploadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CertificateRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostUploadCertificateResponse parses an HTTP response from a PostUploadCertificateWithResponse call
func ParsePostUploadCertificateResponse(rsp *http.Response) (*PostUploadCertificateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUploadCertificateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CertificateRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetClientSecretResponse parses an HTTP response from a GetClientSecretWithResponse call
func ParseGetClientSecretResponse(rsp *http.Response) (*GetClientSecretResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientSecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CredentialRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostClientSecretResponse parses an HTTP response from a PostClientSecretWithResponse call
func ParsePostClientSecretResponse(rsp *http.Response) (*PostClientSecretResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostClientSecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CredentialRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteRotatedResponse parses an HTTP response from a DeleteRotatedWithResponse call
func ParseDeleteRotatedResponse(rsp *http.Response) (*DeleteRotatedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRotatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRotatedResponse parses an HTTP response from a GetRotatedWithResponse call
func ParseGetRotatedResponse(rsp *http.Response) (*GetRotatedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRotatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CredentialRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDefaultClientScopesResponse parses an HTTP response from a GetDefaultClientScopesWithResponse call
func ParseGetDefaultClientScopesResponse(rsp *http.Response) (*GetDefaultClientScopesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDefaultClientScopesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteDefaultClientScopeResponse parses an HTTP response from a DeleteDefaultClientScopeWithResponse call
func ParseDeleteDefaultClientScopeResponse(rsp *http.Response) (*DeleteDefaultClientScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDefaultClientScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutDefaultClientScopeResponse parses an HTTP response from a PutDefaultClientScopeWithResponse call
func ParsePutDefaultClientScopeResponse(rsp *http.Response) (*PutDefaultClientScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutDefaultClientScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetGenerateExampleAccessTokenResponse parses an HTTP response from a GetGenerateExampleAccessTokenWithResponse call
func ParseGetGenerateExampleAccessTokenResponse(rsp *http.Response) (*GetGenerateExampleAccessTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGenerateExampleAccessTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccessToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetGenerateExampleIdTokenResponse parses an HTTP response from a GetGenerateExampleIdTokenWithResponse call
func ParseGetGenerateExampleIdTokenResponse(rsp *http.Response) (*GetGenerateExampleIdTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGenerateExampleIdTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IDToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetGenerateExampleUserinfoResponse parses an HTTP response from a GetGenerateExampleUserinfoWithResponse call
func ParseGetGenerateExampleUserinfoResponse(rsp *http.Response) (*GetGenerateExampleUserinfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGenerateExampleUserinfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProtocolMappersResponse parses an HTTP response from a GetProtocolMappersWithResponse call
func ParseGetProtocolMappersResponse(rsp *http.Response) (*GetProtocolMappersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProtocolMappersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetGrantedResponse parses an HTTP response from a GetGrantedWithResponse call
func ParseGetGrantedResponse(rsp *http.Response) (*GetGrantedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGrantedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetNotGrantedResponse parses an HTTP response from a GetNotGrantedWithResponse call
func ParseGetNotGrantedResponse(rsp *http.Response) (*GetNotGrantedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNotGrantedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetInstallationProviderResponse parses an HTTP response from a GetInstallationProviderWithResponse call
func ParseGetInstallationProviderResponse(rsp *http.Response) (*GetInstallationProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInstallationProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClientManagementPermissionsResponse parses an HTTP response from a GetClientManagementPermissionsWithResponse call
func ParseGetClientManagementPermissionsResponse(rsp *http.Response) (*GetClientManagementPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientManagementPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ManagementPermissionReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutClientManagementPermissionsResponse parses an HTTP response from a PutClientManagementPermissionsWithResponse call
func ParsePutClientManagementPermissionsResponse(rsp *http.Response) (*PutClientManagementPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutClientManagementPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ManagementPermissionReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostNodesResponse parses an HTTP response from a PostNodesWithResponse call
func ParsePostNodesResponse(rsp *http.Response) (*PostNodesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostNodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteNodeResponse parses an HTTP response from a DeleteNodeWithResponse call
func ParseDeleteNodeResponse(rsp *http.Response) (*DeleteNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOfflineSessionCountResponse parses an HTTP response from a GetOfflineSessionCountWithResponse call
func ParseGetOfflineSessionCountResponse(rsp *http.Response) (*GetOfflineSessionCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOfflineSessionCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]int64
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOfflineSessionsResponse parses an HTTP response from a GetOfflineSessionsWithResponse call
func ParseGetOfflineSessionsResponse(rsp *http.Response) (*GetOfflineSessionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOfflineSessionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOptionalClientScopesResponse parses an HTTP response from a GetOptionalClientScopesWithResponse call
func ParseGetOptionalClientScopesResponse(rsp *http.Response) (*GetOptionalClientScopesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOptionalClientScopesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteOptionalClientScopeResponse parses an HTTP response from a DeleteOptionalClientScopeWithResponse call
func ParseDeleteOptionalClientScopeResponse(rsp *http.Response) (*DeleteOptionalClientScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOptionalClientScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutOptionalClientScopeResponse parses an HTTP response from a PutOptionalClientScopeWithResponse call
func ParsePutOptionalClientScopeResponse(rsp *http.Response) (*PutOptionalClientScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOptionalClientScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostClientProtocolMappersAddModelsResponse parses an HTTP response from a PostClientProtocolMappersAddModelsWithResponse call
func ParsePostClientProtocolMappersAddModelsResponse(rsp *http.Response) (*PostClientProtocolMappersAddModelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostClientProtocolMappersAddModelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClientProtocolMappersModelsResponse parses an HTTP response from a GetClientProtocolMappersModelsWithResponse call
func ParseGetClientProtocolMappersModelsResponse(rsp *http.Response) (*GetClientProtocolMappersModelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientProtocolMappersModelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostClientProtocolMappersModelsResponse parses an HTTP response from a PostClientProtocolMappersModelsWithResponse call
func ParsePostClientProtocolMappersModelsResponse(rsp *http.Response) (*PostClientProtocolMappersModelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostClientProtocolMappersModelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClientProtocolMappersProtocolResponse parses an HTTP response from a GetClientProtocolMappersProtocolWithResponse call
func ParseGetClientProtocolMappersProtocolResponse(rsp *http.Response) (*GetClientProtocolMappersProtocolResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientProtocolMappersProtocolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostClientPushRevocationResponse parses an HTTP response from a PostClientPushRevocationWithResponse call
func ParsePostClientPushRevocationResponse(rsp *http.Response) (*PostClientPushRevocationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostClientPushRevocationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GlobalRequestResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostRegistrationAccessTokenResponse parses an HTTP response from a PostRegistrationAccessTokenWithResponse call
func ParsePostRegistrationAccessTokenResponse(rsp *http.Response) (*PostRegistrationAccessTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRegistrationAccessTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClientRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetClientRolesResponse parses an HTTP response from a GetClientRolesWithResponse call
func ParseGetClientRolesResponse(rsp *http.Response) (*GetClientRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostClientRolesResponse parses an HTTP response from a PostClientRolesWithResponse call
func ParsePostClientRolesResponse(rsp *http.Response) (*PostClientRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostClientRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteClientRoleResponse parses an HTTP response from a DeleteClientRoleWithResponse call
func ParseDeleteClientRoleResponse(rsp *http.Response) (*DeleteClientRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteClientRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClientRoleResponse parses an HTTP response from a GetClientRoleWithResponse call
func ParseGetClientRoleResponse(rsp *http.Response) (*GetClientRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutClientRoleResponse parses an HTTP response from a PutClientRoleWithResponse call
func ParsePutClientRoleResponse(rsp *http.Response) (*PutClientRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutClientRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteClientRoleCompositesResponse parses an HTTP response from a DeleteClientRoleCompositesWithResponse call
func ParseDeleteClientRoleCompositesResponse(rsp *http.Response) (*DeleteClientRoleCompositesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteClientRoleCompositesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClientRoleCompositesResponse parses an HTTP response from a GetClientRoleCompositesWithResponse call
func ParseGetClientRoleCompositesResponse(rsp *http.Response) (*GetClientRoleCompositesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientRoleCompositesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostClientRoleCompositesResponse parses an HTTP response from a PostClientRoleCompositesWithResponse call
func ParsePostClientRoleCompositesResponse(rsp *http.Response) (*PostClientRoleCompositesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostClientRoleCompositesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClientRoleCompositesClientResponse parses an HTTP response from a GetClientRoleCompositesClientWithResponse call
func ParseGetClientRoleCompositesClientResponse(rsp *http.Response) (*GetClientRoleCompositesClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientRoleCompositesClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetClientRoleCompositesRealmResponse parses an HTTP response from a GetClientRoleCompositesRealmWithResponse call
func ParseGetClientRoleCompositesRealmResponse(rsp *http.Response) (*GetClientRoleCompositesRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientRoleCompositesRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetClientRoleGroupsResponse parses an HTTP response from a GetClientRoleGroupsWithResponse call
func ParseGetClientRoleGroupsResponse(rsp *http.Response) (*GetClientRoleGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientRoleGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetClientRoleManagementPermissionsResponse parses an HTTP response from a GetClientRoleManagementPermissionsWithResponse call
func ParseGetClientRoleManagementPermissionsResponse(rsp *http.Response) (*GetClientRoleManagementPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientRoleManagementPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ManagementPermissionReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutClientRoleManagementPermissionsResponse parses an HTTP response from a PutClientRoleManagementPermissionsWithResponse call
func ParsePutClientRoleManagementPermissionsResponse(rsp *http.Response) (*PutClientRoleManagementPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutClientRoleManagementPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ManagementPermissionReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetClientRoleUsersResponse parses an HTTP response from a GetClientRoleUsersWithResponse call
func ParseGetClientRoleUsersResponse(rsp *http.Response) (*GetClientRoleUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientRoleUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetClientScopeMappingsResponse parses an HTTP response from a GetClientScopeMappingsWithResponse call
func ParseGetClientScopeMappingsResponse(rsp *http.Response) (*GetClientScopeMappingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientScopeMappingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MappingsRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteClientScopeMappingsClientResponse parses an HTTP response from a DeleteClientScopeMappingsClientWithResponse call
func ParseDeleteClientScopeMappingsClientResponse(rsp *http.Response) (*DeleteClientScopeMappingsClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteClientScopeMappingsClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClientScopeMappingsClientResponse parses an HTTP response from a GetClientScopeMappingsClientWithResponse call
func ParseGetClientScopeMappingsClientResponse(rsp *http.Response) (*GetClientScopeMappingsClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientScopeMappingsClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostClientScopeMappingsClientResponse parses an HTTP response from a PostClientScopeMappingsClientWithResponse call
func ParsePostClientScopeMappingsClientResponse(rsp *http.Response) (*PostClientScopeMappingsClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostClientScopeMappingsClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClientScopeMappingsClientAvailableResponse parses an HTTP response from a GetClientScopeMappingsClientAvailableWithResponse call
func ParseGetClientScopeMappingsClientAvailableResponse(rsp *http.Response) (*GetClientScopeMappingsClientAvailableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientScopeMappingsClientAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetClientScopeMappingsClientCompositeResponse parses an HTTP response from a GetClientScopeMappingsClientCompositeWithResponse call
func ParseGetClientScopeMappingsClientCompositeResponse(rsp *http.Response) (*GetClientScopeMappingsClientCompositeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientScopeMappingsClientCompositeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteClientScopeMappingsRealmResponse parses an HTTP response from a DeleteClientScopeMappingsRealmWithResponse call
func ParseDeleteClientScopeMappingsRealmResponse(rsp *http.Response) (*DeleteClientScopeMappingsRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteClientScopeMappingsRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClientScopeMappingsRealmResponse parses an HTTP response from a GetClientScopeMappingsRealmWithResponse call
func ParseGetClientScopeMappingsRealmResponse(rsp *http.Response) (*GetClientScopeMappingsRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientScopeMappingsRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostClientScopeMappingsRealmResponse parses an HTTP response from a PostClientScopeMappingsRealmWithResponse call
func ParsePostClientScopeMappingsRealmResponse(rsp *http.Response) (*PostClientScopeMappingsRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostClientScopeMappingsRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClientScopeMappingsRealmAvailableResponse parses an HTTP response from a GetClientScopeMappingsRealmAvailableWithResponse call
func ParseGetClientScopeMappingsRealmAvailableResponse(rsp *http.Response) (*GetClientScopeMappingsRealmAvailableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientScopeMappingsRealmAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetClientScopeMappingsRealmCompositeResponse parses an HTTP response from a GetClientScopeMappingsRealmCompositeWithResponse call
func ParseGetClientScopeMappingsRealmCompositeResponse(rsp *http.Response) (*GetClientScopeMappingsRealmCompositeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientScopeMappingsRealmCompositeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetServiceAccountUserResponse parses an HTTP response from a GetServiceAccountUserWithResponse call
func ParseGetServiceAccountUserResponse(rsp *http.Response) (*GetServiceAccountUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceAccountUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSessionCountResponse parses an HTTP response from a GetSessionCountWithResponse call
func ParseGetSessionCountResponse(rsp *http.Response) (*GetSessionCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSessionCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]int64
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTestNodesAvailableResponse parses an HTTP response from a GetTestNodesAvailableWithResponse call
func ParseGetTestNodesAvailableResponse(rsp *http.Response) (*GetTestNodesAvailableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTestNodesAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GlobalRequestResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetClientUserSessionsResponse parses an HTTP response from a GetClientUserSessionsWithResponse call
func ParseGetClientUserSessionsResponse(rsp *http.Response) (*GetClientUserSessionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientUserSessionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetComponentsResponse parses an HTTP response from a GetComponentsWithResponse call
func ParseGetComponentsResponse(rsp *http.Response) (*GetComponentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetComponentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostComponentsResponse parses an HTTP response from a PostComponentsWithResponse call
func ParsePostComponentsResponse(rsp *http.Response) (*PostComponentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostComponentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteComponentResponse parses an HTTP response from a DeleteComponentWithResponse call
func ParseDeleteComponentResponse(rsp *http.Response) (*DeleteComponentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteComponentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetComponentResponse parses an HTTP response from a GetComponentWithResponse call
func ParseGetComponentResponse(rsp *http.Response) (*GetComponentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetComponentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ComponentRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutComponentResponse parses an HTTP response from a PutComponentWithResponse call
func ParsePutComponentResponse(rsp *http.Response) (*PutComponentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutComponentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSubComponentTypesResponse parses an HTTP response from a GetSubComponentTypesWithResponse call
func ParseGetSubComponentTypesResponse(rsp *http.Response) (*GetSubComponentTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSubComponentTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCredentialRegistratorsResponse parses an HTTP response from a GetCredentialRegistratorsWithResponse call
func ParseGetCredentialRegistratorsResponse(rsp *http.Response) (*GetCredentialRegistratorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCredentialRegistratorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDefaultDefaultClientScopesResponse parses an HTTP response from a GetDefaultDefaultClientScopesWithResponse call
func ParseGetDefaultDefaultClientScopesResponse(rsp *http.Response) (*GetDefaultDefaultClientScopesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDefaultDefaultClientScopesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteDefaultDefaultClientScopeResponse parses an HTTP response from a DeleteDefaultDefaultClientScopeWithResponse call
func ParseDeleteDefaultDefaultClientScopeResponse(rsp *http.Response) (*DeleteDefaultDefaultClientScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDefaultDefaultClientScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutDefaultDefaultClientScopeResponse parses an HTTP response from a PutDefaultDefaultClientScopeWithResponse call
func ParsePutDefaultDefaultClientScopeResponse(rsp *http.Response) (*PutDefaultDefaultClientScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutDefaultDefaultClientScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDefaultGroupsResponse parses an HTTP response from a GetDefaultGroupsWithResponse call
func ParseGetDefaultGroupsResponse(rsp *http.Response) (*GetDefaultGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDefaultGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteDefaultGroupResponse parses an HTTP response from a DeleteDefaultGroupWithResponse call
func ParseDeleteDefaultGroupResponse(rsp *http.Response) (*DeleteDefaultGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDefaultGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutDefaultGroupResponse parses an HTTP response from a PutDefaultGroupWithResponse call
func ParsePutDefaultGroupResponse(rsp *http.Response) (*PutDefaultGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutDefaultGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDefaultOptionalClientScopesResponse parses an HTTP response from a GetDefaultOptionalClientScopesWithResponse call
func ParseGetDefaultOptionalClientScopesResponse(rsp *http.Response) (*GetDefaultOptionalClientScopesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDefaultOptionalClientScopesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteDefaultOptionalClientScopeResponse parses an HTTP response from a DeleteDefaultOptionalClientScopeWithResponse call
func ParseDeleteDefaultOptionalClientScopeResponse(rsp *http.Response) (*DeleteDefaultOptionalClientScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDefaultOptionalClientScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutDefaultOptionalClientScopeResponse parses an HTTP response from a PutDefaultOptionalClientScopeWithResponse call
func ParsePutDefaultOptionalClientScopeResponse(rsp *http.Response) (*PutDefaultOptionalClientScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutDefaultOptionalClientScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteEventsResponse parses an HTTP response from a DeleteEventsWithResponse call
func ParseDeleteEventsResponse(rsp *http.Response) (*DeleteEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetEventsResponse parses an HTTP response from a GetEventsWithResponse call
func ParseGetEventsResponse(rsp *http.Response) (*GetEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEventsConfigResponse parses an HTTP response from a GetEventsConfigWithResponse call
func ParseGetEventsConfigResponse(rsp *http.Response) (*GetEventsConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEventsConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RealmEventsConfigRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutEventsConfigResponse parses an HTTP response from a PutEventsConfigWithResponse call
func ParsePutEventsConfigResponse(rsp *http.Response) (*PutEventsConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutEventsConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetGroupByPathResponse parses an HTTP response from a GetGroupByPathWithResponse call
func ParseGetGroupByPathResponse(rsp *http.Response) (*GetGroupByPathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGroupByPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GroupRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetGroupsByRealmResponse parses an HTTP response from a GetGroupsByRealmWithResponse call
func ParseGetGroupsByRealmResponse(rsp *http.Response) (*GetGroupsByRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGroupsByRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostGroupsResponse parses an HTTP response from a PostGroupsWithResponse call
func ParsePostGroupsResponse(rsp *http.Response) (*PostGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetGroupsCountByRealmResponse parses an HTTP response from a GetGroupsCountByRealmWithResponse call
func ParseGetGroupsCountByRealmResponse(rsp *http.Response) (*GetGroupsCountByRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGroupsCountByRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]int64
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteGroupByRealmByIdResponse parses an HTTP response from a DeleteGroupByRealmByIdWithResponse call
func ParseDeleteGroupByRealmByIdResponse(rsp *http.Response) (*DeleteGroupByRealmByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteGroupByRealmByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetGroupResponse parses an HTTP response from a GetGroupWithResponse call
func ParseGetGroupResponse(rsp *http.Response) (*GetGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GroupRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutGroupByRealmByIdResponse parses an HTTP response from a PutGroupByRealmByIdWithResponse call
func ParsePutGroupByRealmByIdResponse(rsp *http.Response) (*PutGroupByRealmByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutGroupByRealmByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostChildrenResponse parses an HTTP response from a PostChildrenWithResponse call
func ParsePostChildrenResponse(rsp *http.Response) (*PostChildrenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostChildrenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetGroupManagementPermissionsResponse parses an HTTP response from a GetGroupManagementPermissionsWithResponse call
func ParseGetGroupManagementPermissionsResponse(rsp *http.Response) (*GetGroupManagementPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGroupManagementPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ManagementPermissionReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutGroupManagementPermissionsResponse parses an HTTP response from a PutGroupManagementPermissionsWithResponse call
func ParsePutGroupManagementPermissionsResponse(rsp *http.Response) (*PutGroupManagementPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutGroupManagementPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ManagementPermissionReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMembersResponse parses an HTTP response from a GetMembersWithResponse call
func ParseGetMembersResponse(rsp *http.Response) (*GetMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetGroupRoleMappingsResponse parses an HTTP response from a GetGroupRoleMappingsWithResponse call
func ParseGetGroupRoleMappingsResponse(rsp *http.Response) (*GetGroupRoleMappingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGroupRoleMappingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MappingsRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteGroupRoleMappingsClientResponse parses an HTTP response from a DeleteGroupRoleMappingsClientWithResponse call
func ParseDeleteGroupRoleMappingsClientResponse(rsp *http.Response) (*DeleteGroupRoleMappingsClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteGroupRoleMappingsClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetGroupRoleMappingsClientResponse parses an HTTP response from a GetGroupRoleMappingsClientWithResponse call
func ParseGetGroupRoleMappingsClientResponse(rsp *http.Response) (*GetGroupRoleMappingsClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGroupRoleMappingsClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostGroupRoleMappingsClientResponse parses an HTTP response from a PostGroupRoleMappingsClientWithResponse call
func ParsePostGroupRoleMappingsClientResponse(rsp *http.Response) (*PostGroupRoleMappingsClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGroupRoleMappingsClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetGroupRoleMappingsClientAvailableResponse parses an HTTP response from a GetGroupRoleMappingsClientAvailableWithResponse call
func ParseGetGroupRoleMappingsClientAvailableResponse(rsp *http.Response) (*GetGroupRoleMappingsClientAvailableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGroupRoleMappingsClientAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetGroupRoleMappingsClientCompositeResponse parses an HTTP response from a GetGroupRoleMappingsClientCompositeWithResponse call
func ParseGetGroupRoleMappingsClientCompositeResponse(rsp *http.Response) (*GetGroupRoleMappingsClientCompositeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGroupRoleMappingsClientCompositeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteGroupRoleMappingsRealmResponse parses an HTTP response from a DeleteGroupRoleMappingsRealmWithResponse call
func ParseDeleteGroupRoleMappingsRealmResponse(rsp *http.Response) (*DeleteGroupRoleMappingsRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteGroupRoleMappingsRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetGroupRoleMappingsRealmResponse parses an HTTP response from a GetGroupRoleMappingsRealmWithResponse call
func ParseGetGroupRoleMappingsRealmResponse(rsp *http.Response) (*GetGroupRoleMappingsRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGroupRoleMappingsRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostGroupRoleMappingsRealmResponse parses an HTTP response from a PostGroupRoleMappingsRealmWithResponse call
func ParsePostGroupRoleMappingsRealmResponse(rsp *http.Response) (*PostGroupRoleMappingsRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGroupRoleMappingsRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetGroupRoleMappingsRealmAvailableResponse parses an HTTP response from a GetGroupRoleMappingsRealmAvailableWithResponse call
func ParseGetGroupRoleMappingsRealmAvailableResponse(rsp *http.Response) (*GetGroupRoleMappingsRealmAvailableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGroupRoleMappingsRealmAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetGroupRoleMappingsRealmCompositeResponse parses an HTTP response from a GetGroupRoleMappingsRealmCompositeWithResponse call
func ParseGetGroupRoleMappingsRealmCompositeResponse(rsp *http.Response) (*GetGroupRoleMappingsRealmCompositeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGroupRoleMappingsRealmCompositeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostImportConfigResponse parses an HTTP response from a PostImportConfigWithResponse call
func ParsePostImportConfigResponse(rsp *http.Response) (*PostImportConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostImportConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetInstancesResponse parses an HTTP response from a GetInstancesWithResponse call
func ParseGetInstancesResponse(rsp *http.Response) (*GetInstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostInstancesResponse parses an HTTP response from a PostInstancesWithResponse call
func ParsePostInstancesResponse(rsp *http.Response) (*PostInstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteInstanceResponse parses an HTTP response from a DeleteInstanceWithResponse call
func ParseDeleteInstanceResponse(rsp *http.Response) (*DeleteInstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetInstanceResponse parses an HTTP response from a GetInstanceWithResponse call
func ParseGetInstanceResponse(rsp *http.Response) (*GetInstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IdentityProviderRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutInstanceResponse parses an HTTP response from a PutInstanceWithResponse call
func ParsePutInstanceResponse(rsp *http.Response) (*PutInstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetExportResponse parses an HTTP response from a GetExportWithResponse call
func ParseGetExportResponse(rsp *http.Response) (*GetExportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetInstanceManagementPermissionsResponse parses an HTTP response from a GetInstanceManagementPermissionsWithResponse call
func ParseGetInstanceManagementPermissionsResponse(rsp *http.Response) (*GetInstanceManagementPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInstanceManagementPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ManagementPermissionReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutInstanceManagementPermissionsResponse parses an HTTP response from a PutInstanceManagementPermissionsWithResponse call
func ParsePutInstanceManagementPermissionsResponse(rsp *http.Response) (*PutInstanceManagementPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutInstanceManagementPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ManagementPermissionReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMapperTypesResponse parses an HTTP response from a GetMapperTypesWithResponse call
func ParseGetMapperTypesResponse(rsp *http.Response) (*GetMapperTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMapperTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetMappersResponse parses an HTTP response from a GetMappersWithResponse call
func ParseGetMappersResponse(rsp *http.Response) (*GetMappersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMappersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostMappersResponse parses an HTTP response from a PostMappersWithResponse call
func ParsePostMappersResponse(rsp *http.Response) (*PostMappersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMappersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteMapperResponse parses an HTTP response from a DeleteMapperWithResponse call
func ParseDeleteMapperResponse(rsp *http.Response) (*DeleteMapperResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMapperResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetMapperResponse parses an HTTP response from a GetMapperWithResponse call
func ParseGetMapperResponse(rsp *http.Response) (*GetMapperResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMapperResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IdentityProviderMapperRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutMapperResponse parses an HTTP response from a PutMapperWithResponse call
func ParsePutMapperResponse(rsp *http.Response) (*PutMapperResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutMapperResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIdentityProviderProviderResponse parses an HTTP response from a GetIdentityProviderProviderWithResponse call
func ParseGetIdentityProviderProviderResponse(rsp *http.Response) (*GetIdentityProviderProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIdentityProviderProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetKeysResponse parses an HTTP response from a GetKeysWithResponse call
func ParseGetKeysResponse(rsp *http.Response) (*GetKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest KeysMetadataRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetLocalizationByRealmResponse parses an HTTP response from a GetLocalizationByRealmWithResponse call
func ParseGetLocalizationByRealmResponse(rsp *http.Response) (*GetLocalizationByRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLocalizationByRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteLocalizationByRealmByLocaleResponse parses an HTTP response from a DeleteLocalizationByRealmByLocaleWithResponse call
func ParseDeleteLocalizationByRealmByLocaleResponse(rsp *http.Response) (*DeleteLocalizationByRealmByLocaleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteLocalizationByRealmByLocaleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetLocalizationByRealmByLocaleResponse parses an HTTP response from a GetLocalizationByRealmByLocaleWithResponse call
func ParseGetLocalizationByRealmByLocaleResponse(rsp *http.Response) (*GetLocalizationByRealmByLocaleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLocalizationByRealmByLocaleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostLocalizationResponse parses an HTTP response from a PostLocalizationWithResponse call
func ParsePostLocalizationResponse(rsp *http.Response) (*PostLocalizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLocalizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteLocalizationByRealmByLocaleByKeyResponse parses an HTTP response from a DeleteLocalizationByRealmByLocaleByKeyWithResponse call
func ParseDeleteLocalizationByRealmByLocaleByKeyResponse(rsp *http.Response) (*DeleteLocalizationByRealmByLocaleByKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteLocalizationByRealmByLocaleByKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetLocalizationByRealmByLocaleByKeyResponse parses an HTTP response from a GetLocalizationByRealmByLocaleByKeyWithResponse call
func ParseGetLocalizationByRealmByLocaleByKeyResponse(rsp *http.Response) (*GetLocalizationByRealmByLocaleByKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLocalizationByRealmByLocaleByKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutLocalizationResponse parses an HTTP response from a PutLocalizationWithResponse call
func ParsePutLocalizationResponse(rsp *http.Response) (*PutLocalizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutLocalizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostLogoutAllResponse parses an HTTP response from a PostLogoutAllWithResponse call
func ParsePostLogoutAllResponse(rsp *http.Response) (*PostLogoutAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLogoutAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GlobalRequestResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPartialExportResponse parses an HTTP response from a PostPartialExportWithResponse call
func ParsePostPartialExportResponse(rsp *http.Response) (*PostPartialExportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPartialExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPartialImportResponse parses an HTTP response from a PostPartialImportWithResponse call
func ParsePostPartialImportResponse(rsp *http.Response) (*PostPartialImportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPartialImportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPushRevocationByRealmResponse parses an HTTP response from a PostPushRevocationByRealmWithResponse call
func ParsePostPushRevocationByRealmResponse(rsp *http.Response) (*PostPushRevocationByRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPushRevocationByRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GlobalRequestResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRolesByRealmResponse parses an HTTP response from a GetRolesByRealmWithResponse call
func ParseGetRolesByRealmResponse(rsp *http.Response) (*GetRolesByRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRolesByRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostRolesByRealmResponse parses an HTTP response from a PostRolesByRealmWithResponse call
func ParsePostRolesByRealmResponse(rsp *http.Response) (*PostRolesByRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRolesByRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteRolesByIdResponse parses an HTTP response from a DeleteRolesByIdWithResponse call
func ParseDeleteRolesByIdResponse(rsp *http.Response) (*DeleteRolesByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRolesByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRolesByIdResponse parses an HTTP response from a GetRolesByIdWithResponse call
func ParseGetRolesByIdResponse(rsp *http.Response) (*GetRolesByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRolesByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutRolesByIdResponse parses an HTTP response from a PutRolesByIdWithResponse call
func ParsePutRolesByIdResponse(rsp *http.Response) (*PutRolesByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRolesByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteRolesByIdCompositesResponse parses an HTTP response from a DeleteRolesByIdCompositesWithResponse call
func ParseDeleteRolesByIdCompositesResponse(rsp *http.Response) (*DeleteRolesByIdCompositesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRolesByIdCompositesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRolesByIdCompositesResponse parses an HTTP response from a GetRolesByIdCompositesWithResponse call
func ParseGetRolesByIdCompositesResponse(rsp *http.Response) (*GetRolesByIdCompositesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRolesByIdCompositesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostRolesByIdCompositesResponse parses an HTTP response from a PostRolesByIdCompositesWithResponse call
func ParsePostRolesByIdCompositesResponse(rsp *http.Response) (*PostRolesByIdCompositesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRolesByIdCompositesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRolesByIdCompositesClientResponse parses an HTTP response from a GetRolesByIdCompositesClientWithResponse call
func ParseGetRolesByIdCompositesClientResponse(rsp *http.Response) (*GetRolesByIdCompositesClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRolesByIdCompositesClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRolesByIdCompositesRealmResponse parses an HTTP response from a GetRolesByIdCompositesRealmWithResponse call
func ParseGetRolesByIdCompositesRealmResponse(rsp *http.Response) (*GetRolesByIdCompositesRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRolesByIdCompositesRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRolesByIdManagementPermissionsResponse parses an HTTP response from a GetRolesByIdManagementPermissionsWithResponse call
func ParseGetRolesByIdManagementPermissionsResponse(rsp *http.Response) (*GetRolesByIdManagementPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRolesByIdManagementPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ManagementPermissionReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutRolesByIdManagementPermissionsResponse parses an HTTP response from a PutRolesByIdManagementPermissionsWithResponse call
func ParsePutRolesByIdManagementPermissionsResponse(rsp *http.Response) (*PutRolesByIdManagementPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRolesByIdManagementPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ManagementPermissionReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteRoleByRealmByRoleNameResponse parses an HTTP response from a DeleteRoleByRealmByRoleNameWithResponse call
func ParseDeleteRoleByRealmByRoleNameResponse(rsp *http.Response) (*DeleteRoleByRealmByRoleNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRoleByRealmByRoleNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRoleByRealmByRoleNameResponse parses an HTTP response from a GetRoleByRealmByRoleNameWithResponse call
func ParseGetRoleByRealmByRoleNameResponse(rsp *http.Response) (*GetRoleByRealmByRoleNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRoleByRealmByRoleNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutRoleByRealmByRoleNameResponse parses an HTTP response from a PutRoleByRealmByRoleNameWithResponse call
func ParsePutRoleByRealmByRoleNameResponse(rsp *http.Response) (*PutRoleByRealmByRoleNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRoleByRealmByRoleNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteRoleCompositesByRealmByRoleNameResponse parses an HTTP response from a DeleteRoleCompositesByRealmByRoleNameWithResponse call
func ParseDeleteRoleCompositesByRealmByRoleNameResponse(rsp *http.Response) (*DeleteRoleCompositesByRealmByRoleNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRoleCompositesByRealmByRoleNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRoleCompositesByRealmByRoleNameResponse parses an HTTP response from a GetRoleCompositesByRealmByRoleNameWithResponse call
func ParseGetRoleCompositesByRealmByRoleNameResponse(rsp *http.Response) (*GetRoleCompositesByRealmByRoleNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRoleCompositesByRealmByRoleNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostRoleCompositesByRealmByRoleNameResponse parses an HTTP response from a PostRoleCompositesByRealmByRoleNameWithResponse call
func ParsePostRoleCompositesByRealmByRoleNameResponse(rsp *http.Response) (*PostRoleCompositesByRealmByRoleNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRoleCompositesByRealmByRoleNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRoleCompositesClientByRealmByRoleNameByClientUuidResponse parses an HTTP response from a GetRoleCompositesClientByRealmByRoleNameByClientUuidWithResponse call
func ParseGetRoleCompositesClientByRealmByRoleNameByClientUuidResponse(rsp *http.Response) (*GetRoleCompositesClientByRealmByRoleNameByClientUuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRoleCompositesClientByRealmByRoleNameByClientUuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRoleCompositesRealmByRealmByRoleNameResponse parses an HTTP response from a GetRoleCompositesRealmByRealmByRoleNameWithResponse call
func ParseGetRoleCompositesRealmByRealmByRoleNameResponse(rsp *http.Response) (*GetRoleCompositesRealmByRealmByRoleNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRoleCompositesRealmByRealmByRoleNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRoleGroupsByRealmByRoleNameResponse parses an HTTP response from a GetRoleGroupsByRealmByRoleNameWithResponse call
func ParseGetRoleGroupsByRealmByRoleNameResponse(rsp *http.Response) (*GetRoleGroupsByRealmByRoleNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRoleGroupsByRealmByRoleNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRoleManagementPermissionsByRealmByRoleNameResponse parses an HTTP response from a GetRoleManagementPermissionsByRealmByRoleNameWithResponse call
func ParseGetRoleManagementPermissionsByRealmByRoleNameResponse(rsp *http.Response) (*GetRoleManagementPermissionsByRealmByRoleNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRoleManagementPermissionsByRealmByRoleNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ManagementPermissionReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutRoleManagementPermissionsByRealmByRoleNameResponse parses an HTTP response from a PutRoleManagementPermissionsByRealmByRoleNameWithResponse call
func ParsePutRoleManagementPermissionsByRealmByRoleNameResponse(rsp *http.Response) (*PutRoleManagementPermissionsByRealmByRoleNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRoleManagementPermissionsByRealmByRoleNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ManagementPermissionReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRoleUsersByRealmByRoleNameResponse parses an HTTP response from a GetRoleUsersByRealmByRoleNameWithResponse call
func ParseGetRoleUsersByRealmByRoleNameResponse(rsp *http.Response) (*GetRoleUsersByRealmByRoleNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRoleUsersByRealmByRoleNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteSessionResponse parses an HTTP response from a DeleteSessionWithResponse call
func ParseDeleteSessionResponse(rsp *http.Response) (*DeleteSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostTestSmtpConnectionResponse parses an HTTP response from a PostTestSmtpConnectionWithResponse call
func ParsePostTestSmtpConnectionResponse(rsp *http.Response) (*PostTestSmtpConnectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTestSmtpConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUsersByRealmResponse parses an HTTP response from a GetUsersByRealmWithResponse call
func ParseGetUsersByRealmResponse(rsp *http.Response) (*GetUsersByRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersByRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostUsersResponse parses an HTTP response from a PostUsersWithResponse call
func ParsePostUsersResponse(rsp *http.Response) (*PostUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUsersManagementPermissionsResponse parses an HTTP response from a GetUsersManagementPermissionsWithResponse call
func ParseGetUsersManagementPermissionsResponse(rsp *http.Response) (*GetUsersManagementPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersManagementPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ManagementPermissionReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutUsersManagementPermissionsResponse parses an HTTP response from a PutUsersManagementPermissionsWithResponse call
func ParsePutUsersManagementPermissionsResponse(rsp *http.Response) (*PutUsersManagementPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutUsersManagementPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ManagementPermissionReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUsersCountResponse parses an HTTP response from a GetUsersCountWithResponse call
func ParseGetUsersCountResponse(rsp *http.Response) (*GetUsersCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest int32
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProfileResponse parses an HTTP response from a GetProfileWithResponse call
func ParseGetProfileResponse(rsp *http.Response) (*GetProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutProfileResponse parses an HTTP response from a PutProfileWithResponse call
func ParsePutProfileResponse(rsp *http.Response) (*PutProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteUserByRealmByIdResponse parses an HTTP response from a DeleteUserByRealmByIdWithResponse call
func ParseDeleteUserByRealmByIdResponse(rsp *http.Response) (*DeleteUserByRealmByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserByRealmByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserByRealmByIdResponse parses an HTTP response from a GetUserByRealmByIdWithResponse call
func ParseGetUserByRealmByIdResponse(rsp *http.Response) (*GetUserByRealmByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserByRealmByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutUserResponse parses an HTTP response from a PutUserWithResponse call
func ParsePutUserResponse(rsp *http.Response) (*PutUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetConfiguredUserStorageCredentialTypesResponse parses an HTTP response from a GetConfiguredUserStorageCredentialTypesWithResponse call
func ParseGetConfiguredUserStorageCredentialTypesResponse(rsp *http.Response) (*GetConfiguredUserStorageCredentialTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConfiguredUserStorageCredentialTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConsentsResponse parses an HTTP response from a GetConsentsWithResponse call
func ParseGetConsentsResponse(rsp *http.Response) (*GetConsentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteConsentResponse parses an HTTP response from a DeleteConsentWithResponse call
func ParseDeleteConsentResponse(rsp *http.Response) (*DeleteConsentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConsentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCredentialsResponse parses an HTTP response from a GetCredentialsWithResponse call
func ParseGetCredentialsResponse(rsp *http.Response) (*GetCredentialsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteCredentialResponse parses an HTTP response from a DeleteCredentialWithResponse call
func ParseDeleteCredentialResponse(rsp *http.Response) (*DeleteCredentialResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCredentialResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostMoveAfterResponse parses an HTTP response from a PostMoveAfterWithResponse call
func ParsePostMoveAfterResponse(rsp *http.Response) (*PostMoveAfterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMoveAfterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostMoveToFirstResponse parses an HTTP response from a PostMoveToFirstWithResponse call
func ParsePostMoveToFirstResponse(rsp *http.Response) (*PostMoveToFirstResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMoveToFirstResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutUserLabelResponse parses an HTTP response from a PutUserLabelWithResponse call
func ParsePutUserLabelResponse(rsp *http.Response) (*PutUserLabelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutUserLabelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutDisableCredentialTypesResponse parses an HTTP response from a PutDisableCredentialTypesWithResponse call
func ParsePutDisableCredentialTypesResponse(rsp *http.Response) (*PutDisableCredentialTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutDisableCredentialTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutExecuteActionsEmailResponse parses an HTTP response from a PutExecuteActionsEmailWithResponse call
func ParsePutExecuteActionsEmailResponse(rsp *http.Response) (*PutExecuteActionsEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutExecuteActionsEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetFederatedIdentityResponse parses an HTTP response from a GetFederatedIdentityWithResponse call
func ParseGetFederatedIdentityResponse(rsp *http.Response) (*GetFederatedIdentityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFederatedIdentityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteFederatedIdentityResponse parses an HTTP response from a DeleteFederatedIdentityWithResponse call
func ParseDeleteFederatedIdentityResponse(rsp *http.Response) (*DeleteFederatedIdentityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFederatedIdentityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostFederatedIdentityResponse parses an HTTP response from a PostFederatedIdentityWithResponse call
func ParsePostFederatedIdentityResponse(rsp *http.Response) (*PostFederatedIdentityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFederatedIdentityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserGroupsResponse parses an HTTP response from a GetUserGroupsWithResponse call
func ParseGetUserGroupsResponse(rsp *http.Response) (*GetUserGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserGroupsCountResponse parses an HTTP response from a GetUserGroupsCountWithResponse call
func ParseGetUserGroupsCountResponse(rsp *http.Response) (*GetUserGroupsCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserGroupsCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]int64
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteUserGroupResponse parses an HTTP response from a DeleteUserGroupWithResponse call
func ParseDeleteUserGroupResponse(rsp *http.Response) (*DeleteUserGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutUserGroupResponse parses an HTTP response from a PutUserGroupWithResponse call
func ParsePutUserGroupResponse(rsp *http.Response) (*PutUserGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutUserGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostImpersonationResponse parses an HTTP response from a PostImpersonationWithResponse call
func ParsePostImpersonationResponse(rsp *http.Response) (*PostImpersonationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostImpersonationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostLogoutResponse parses an HTTP response from a PostLogoutWithResponse call
func ParsePostLogoutResponse(rsp *http.Response) (*PostLogoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLogoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOfflineSessionResponse parses an HTTP response from a GetOfflineSessionWithResponse call
func ParseGetOfflineSessionResponse(rsp *http.Response) (*GetOfflineSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOfflineSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutResetPasswordResponse parses an HTTP response from a PutResetPasswordWithResponse call
func ParsePutResetPasswordResponse(rsp *http.Response) (*PutResetPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutResetPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutResetPasswordEmailResponse parses an HTTP response from a PutResetPasswordEmailWithResponse call
func ParsePutResetPasswordEmailResponse(rsp *http.Response) (*PutResetPasswordEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutResetPasswordEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserRoleMappingsResponse parses an HTTP response from a GetUserRoleMappingsWithResponse call
func ParseGetUserRoleMappingsResponse(rsp *http.Response) (*GetUserRoleMappingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserRoleMappingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MappingsRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteUserRoleMappingsClientResponse parses an HTTP response from a DeleteUserRoleMappingsClientWithResponse call
func ParseDeleteUserRoleMappingsClientResponse(rsp *http.Response) (*DeleteUserRoleMappingsClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserRoleMappingsClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserRoleMappingsClientResponse parses an HTTP response from a GetUserRoleMappingsClientWithResponse call
func ParseGetUserRoleMappingsClientResponse(rsp *http.Response) (*GetUserRoleMappingsClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserRoleMappingsClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostUserRoleMappingsClientResponse parses an HTTP response from a PostUserRoleMappingsClientWithResponse call
func ParsePostUserRoleMappingsClientResponse(rsp *http.Response) (*PostUserRoleMappingsClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserRoleMappingsClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserRoleMappingsClientAvailableResponse parses an HTTP response from a GetUserRoleMappingsClientAvailableWithResponse call
func ParseGetUserRoleMappingsClientAvailableResponse(rsp *http.Response) (*GetUserRoleMappingsClientAvailableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserRoleMappingsClientAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserRoleMappingsClientCompositeResponse parses an HTTP response from a GetUserRoleMappingsClientCompositeWithResponse call
func ParseGetUserRoleMappingsClientCompositeResponse(rsp *http.Response) (*GetUserRoleMappingsClientCompositeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserRoleMappingsClientCompositeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteUserRoleMappingsRealmResponse parses an HTTP response from a DeleteUserRoleMappingsRealmWithResponse call
func ParseDeleteUserRoleMappingsRealmResponse(rsp *http.Response) (*DeleteUserRoleMappingsRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserRoleMappingsRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserRoleMappingsRealmResponse parses an HTTP response from a GetUserRoleMappingsRealmWithResponse call
func ParseGetUserRoleMappingsRealmResponse(rsp *http.Response) (*GetUserRoleMappingsRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserRoleMappingsRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostUserRoleMappingsRealmResponse parses an HTTP response from a PostUserRoleMappingsRealmWithResponse call
func ParsePostUserRoleMappingsRealmResponse(rsp *http.Response) (*PostUserRoleMappingsRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserRoleMappingsRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserRoleMappingsRealmAvailableResponse parses an HTTP response from a GetUserRoleMappingsRealmAvailableWithResponse call
func ParseGetUserRoleMappingsRealmAvailableResponse(rsp *http.Response) (*GetUserRoleMappingsRealmAvailableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserRoleMappingsRealmAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserRoleMappingsRealmCompositeResponse parses an HTTP response from a GetUserRoleMappingsRealmCompositeWithResponse call
func ParseGetUserRoleMappingsRealmCompositeResponse(rsp *http.Response) (*GetUserRoleMappingsRealmCompositeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserRoleMappingsRealmCompositeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutSendVerifyEmailResponse parses an HTTP response from a PutSendVerifyEmailWithResponse call
func ParsePutSendVerifyEmailResponse(rsp *http.Response) (*PutSendVerifyEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSendVerifyEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSessionsResponse parses an HTTP response from a GetSessionsWithResponse call
func ParseGetSessionsResponse(rsp *http.Response) (*GetSessionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSessionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y92XLjOJYw/Cr4/P0R1TVhWVU1PX1R/804nZk1nsrFv53uvqiuyIDIIwljimABoG2V",
	"IyPmNeb15kn+wMJNBEhQErVYvOgup4j1bDg4OMvLWUAXCY0hFvzs55czHsxhgdWfl0EAXP2VMJoAEwTU",
	"vxiN9B9EwEL9IZYJnP18xgUj8ezs23n2A2YML8/Oz9KY/JHCtW4uWArfzs8egZHp8muAowhYaZAJpRHg",
	"+OxbMQyd/BcEQo6rl/SFPkBcXxcOmHUxOAyZ2cj/w2B69vPZ/x0Xmx6bHY8vdbOrCJPFHajpcBTRJwhH",
	"lJEZiTffMxZf55jP7atMxfwLWYD8OKVsgcXZz2ckFv/601k+NokFzIBlzb8KS/u//dXZnjLyJxaExq2g",
	"qDSWvf9MrIueECbmIRZg/Rq4dxtIKPOvEQ2wIaZ6k3jats4rYOKKxlPZHBaYRNaB1Jevit4IhDZSOz+D",
	"58QTkFO8INHya4wX9k3PIA7BTogz8gixuyeRM3utgXA7yP5LEOvvGszWTwsShhG4F+X+MJl6rjYmwYN7",
	"GBoH9i9UzIEpbtTcHYZEkiOObipcX5MRtR+SOY3ha5wuJg68lBu00ElCApEy+4ITBlNgDMKvKQfm3HHC",
	"6JQ4sMEAR4uvOBe8jUyqW6lenKYsgFJHF7T8BqyBkLs5mQc0sW+GA+eExl+5cAkITkL77+nELmJZygWE",
	"owCY2Fwai6VdqKWJlGjhV292fIIJJ44t/kljIPGUWj5aD7iVQ6h2yAU0jQVbWufSSxUQuoUAEfauCeUC",
	"R18DGroIc2bOjTqyBAMQX0unrM8+kyQigTpfbiFhwCEW+dG0eqy3EXWdTWvz4XBB4ntmPyBw9ISX/C3h",
	"SYSX1/EVjTmtMGhpZCwEI5NUgM+KauRYWlAq5hALA4P3EX16Q+KQxLPPj8AYCbcxfn6E3wF7JAHwdzGe",
	"RC7RttJDCBLPWmXGrRE9cgZgK6iUCgLm4AL7BDAD9jmOlvYFBbnsb5RaLkoyR4caiEAsLguIU/Zl6RBa",
	"uu112PDxCyySyKnz0Fiu4Bb+SAlzgTqEKU4jcaWGu5MCtIs0Kwa47aiJq548YCQRLm4OCYNA6KPgF4Zj",
	"0Uw0urlu6MYkNA0xZTQWwRzHMUQf6IymwtEujSIFq0utldtbOU4UspBUQoRktMYNNSgqIdzCLcwIF0wR",
	"mNTWzWo9FPaYijcwpcxXwaeSH396C5JxK/q4AnbjHmiiZcb69KUvPC71RdCARo0fP+IkAVadtImJbyr9",
	"6mJkdX1JOolIoPdnhwEDTZr3jHTcO1MoBgbhJ9oihj3QWBPMrERBK9fZ+qlLqXBJTw4BA+H4pMT9ZaCU",
	"hWYG5gLHIWZhK2PwlDE6w0IRY7N4SzlkMlLezsistVmJXhrb3a0om6VWTzD53Pma3k03KS4jKxpKTfUp",
	"y76Ve2npU+2qWPpWu7K5ZVT5eiJvMr43l/LH2p2kCn/mnrKu/DZbcCp6z7tnCFL9R0KZaFUFy0e404qS",
	"t6gRn6OdpH23TgStraYRfbqMCOYOmUgoM3q3h8BgmrUWVclWup1wYHcg0qThGOwA+Ot4SlvB7txbVYv1",
	"g7dRdx06nxoiZVIQuXSnNgVGqfGfXOe4RJZDvXPpDnEIz57Yi+ARIs+2CaOPJATmWE0bIZS+X82pVO83",
	"Fnx2EjliruyG6AQziMXKiD0xcjv85Tq2xZk5Lv1Vsi6C2qJFTVISiet4PR524aeZYQRNPmTs11EiZlTp",
	"Iw3nECVf4Fl0M5dWx/DCgF6S0TiXHkpxE3g8AbA+wQU5W69vtCBdVl55zaiuMgG2IMr42OEKkvfxE5b5",
	"20Nt9ud/E//37qd/+5vnXuRAZCqRAG3QD4qmVoA+OBmHPGIBv4LD+KduU/av1hVrG0lMBMGRvsNcMcAC",
	"bppXL28jnsITnhPC8nFaO3iucm/rc4o0Jq8HMYlnVx0mF2QBXOBF4tveccF0Q03ex0g8460EuXoDb5Xh",
	"CzOyN1/e0gjaZJ97Izc0IgGB1o0kpp2/cC6GX264vOUVjbXEbAV31rBBAqcFWa7qgrU3Ms/16cOfMo/l",
	"rbcAyU96ik5UaoW+G2jrIdeFnDVsq7CW4dHczTfW7s2m9GhtQGvdisHXejB1EJQFpA6otO6vleFnEZ0o",
	"BaUOW49dWIFoV8l6HN8NheFNbXhTc7ypDU9hw1PY8BQ2PIUNT2HDU5inNqGmalUptnSIr2kbbFKf982k",
	"bshmyNwVcFvVA78je6vn5pEcekci7HsQeFbyzfbiZxPwoNp8j35W4SZMqWec67XeELLPTqWYpxPHNyeY",
	"ODF8u8LThZvBRuApbHBrD6Hcjjf0p7Vvv+EFw2JzUJr833GUgtVo1PjyEuEJRN0IRSuHnXUiHLoFaE0V",
	"qV2g/eiGQSgvaDhqf5CZUUbEfLHWo4zEnI2kpOzQnikeel2gbP/hW3MP9HCYDvLtvcUC2w8Rpe07zpcZ",
	"Eb5K5xzz+bUArWR26QThHY4EhKvk2P5KCYzQ0NsHoNObMseRaFCBndAUsEgow2zZiTK1s8kHJ2M9OkBj",
	"o+i3EBBOaHwn9X2YLa0M/h5CiSkIrxV5tIsMYtrdGLHt3IRD3MtPn/xNjL8oo6HUjoCLW+BpZPHQn2IS",
	"QWgadRQuPFVa0zqdretlNE12YwvsoqC2nWW5LWeHKoOYuwNy1rAt8XSigO+vCtpw5YXk67e7i4fcY/zi",
	"HiIQh5DCIaTw6EMKm0L3th+gd4AhddcrOoL1rr3+vbWrO9N5TWlxuw4T69K7MJU/QOStthUoUnWjjujD",
	"xtvZGla7ft3lfADTqjmF4S3gUB2/Ukf4HGs3KMdboI+vJrxZvtXX4Cb/6A0trC0e0s1PVIRx8YbRB2Af",
	"6IyoV9YGApbXyBhHDvU7IvGD+y6d0A4ztdh1uKAMVl8XygotS7l45w7V0ALMvMu/lzBQa+rU+KM9uNaG",
	"ol9h+REEDrHAGxoA1vYY9DKT3Tiurw6p3uRoqMyRIm2iYfsFrk0u/ArLew5OON9JyijeZhLrq5YNcrB0",
	"U+MDLG8w50+Uhe5rhbu7+nxlRV3FfEsZNEzj2PA9t1vXfoUl9ya6QJBH2EwMPcDSX7i7GcJLskv+C6y7",
	"/ohjPFNO+oUD8K1UusAokdWNN8rGLA+DO0/CTdUxeV3g2bbYzWXzY8kNc51cEY1uok4T88ddOX9+vkzF",
	"fHCFGlyhhvQCg0/V4FM1+FQNPlWDT9WB+FSVAs0sypmnbbIlr9UKTbjMeIw75RHvyta+PgEmAiCeUhYo",
	"vXvlWrzacheGutDyONkkT2qPmev7rUXZzaRpPn19aXRleIpdlmhbZNM66dKy280WR8req/3uAqZXi/i2",
	"T7kVcs6G6bRsm/Okd346X3tR4wHXC8t4KaKm0Tatwr7KgSfgbuW19N2jxJhnALS86ekOb0FgErXceorm",
	"je2MCqtaystDR6UCPGbQTZxxqw6Tne72Qaos8arKtcbhp+DtdyW/oiF8IFPgCfYNsq13zK20a/W+58Au",
	"gw5RvrjQuNZaeqXne8quS/cK/4GkWvZlDg4mwmpDaqZfJE6xgPDN8lISauc120aSQOs6UD9Mpdo1AKK4",
	"2ish7WMTa/U8KQ3aIdeGMxumhdf7MxGtmxzEkqnEtm57Epiu8zkyVdhSkDD6xIE587mY73cQpIyI5X8A",
	"Do2E28DBnqUC3kvVVh7JEAjn0djyMFMzKtXTJq02/jydRiSGO/2qfx1G0M2EYBvlI37uyMtBJe6+WxR4",
	"UAnhXafv9hg5cFk32s3iPipfMcNm6NoQT9nNt+sWHYErzl12Hd9jXBrCndtIUa1qsDYVGEvo2y1ZVC0+",
	"gb5dP7gdrkyLzxvb5Up23/VeZjYxHKued2QWY5EyuGx81i7ZhZ1Csc3NofT9P8TCfqcIafAAzFMKh6k+",
	"xUH5EfBGOzKERNwbl67mhnIstw4Dp3apOFf+1SmD9zgw+UI8hN00cyyXMPeXRbJ1uySa9eDo6+081tUU",
	"7uUNZ11Otd/6M3rMpb2GtDQzzxKNZPgAyyCi+OHvwLjL/hbJm6CbkdTnfxAxV8zbyJIL/PwWIoHlcX0H",
	"AY1DX2v9Aj+/19T7D0xEx74kJot08f+lJHhQt9ruQ3R+I7os3ojWuI2Xu9/QKCLx7Fpi9hFHazxSrbMA",
	"vJUFXHXUYNzOB7ansA2Vdrqhuu7s3/wEKBJtnW8+pvNmV+p1M+XutK5507ddorvyXibN21WnwLW89wdK",
	"Hy7ngMN/kDj0trTk3W+6RHzlvZw+AlQkd2mSUCYgvHSZE1qPycQ4hhWhhEpdapRsWR+9QFd02wJLev9A",
	"gwfnY3pbwsGdvuO6VvFHLkqv5hA8fCRRRBwC1aHH5HGzDg8+HMzhXbPH2JQBnysT2kf8LFkEvNPLlh56",
	"m5BabqgPN37fmNG73MGp7DJYwGIC7KNzEP0woM2nHTy+Kv38dYZsvoLct/JOBaI0YAMwOIjME7MFGY/0",
	"AW5LaHe0y25QbXcwi+8dX7WB+L9TmV7t4OYLkWinrM3sZZwGBDt8rvW3isK5wUQ8srxVld67OV37DLb2",
	"va0wSKdRup/i1r7dV5CdOh+KoLiNGKjiCP85Nof0ncJrk/88B9YuO2UrEzCs9t3tKLm39G4n++qc3e9C",
	"99b+fvNqT+VQO/U0Cpm0h0uuLtfZECHxhIm4jgOd8LzbveQJJlJljo1KGQSQCIn4SzxLSdhR71kZTAjg",
	"IqtO8AhLHAdww8oO3rURV0YoPz1cCoGDuTMl/0rPR0rCO7yAyhC3xv/L6WZUGkGHE3UTRtURskMpkjSz",
	"TcBWBt4YyJXR1gZ4ZZSNgV8ebbuIMAfRLXBlVXHppw0DJO+UScVp22zq6nA+dnep22S3RjlS9vxdRcdm",
	"r5/NNS+qI60Fx46w84TXlmHUDS52RwsPPXrH6f2Njb/wqOjoyt3gF9Qpi0rnQgkO17PN0rQ1PDq1vFyQ",
	"gMZfU0a24lOVew529737rLpmY1T0E4dG3+01dX3XOT3R/WKPbnrnZy4Mpd18xn0da5twZEmcs2kUeWNo",
	"jkWwKB+RBRWQdSwi75pSFTuk7zY8djt7H3atEeBXHcAMbHOJbh98tZPTT3cLnrX9MLCduGi0K2FbpBxy",
	"+bCaFH4tnz3yE+Qt9XkqMImdEdbbToOqw08xw4sml10XLlqjSg86mWEfEaYN5rIuVVJKXkbrhgQyug1T",
	"DYdo6in5vdIB++gw91tSYXoTzP2JUitctV2MxA9twK1aRu38rprcu1PfFQ06HPqy+VXm+e9D9K5I184p",
	"I2cMxwLC9X2bzAC3ayZ0izAX9zqLkfeqXRBssTv2Eq8xXZnT+fo4rZkn37ax8sa6pJdZtA6WOY5nEN4t",
	"46DTC+wucuioaOKuC3OFiGEu5Fj9pBTNLsOfuqFrN2kVSn7xG+eE3Kq+aIRgNyu7XXI6fWY337IRs19c",
	"9eJa0/N2cNt1ZSy2+XoS5Qgi/1d06+qgaFdjWlI2/r05Y2NjHoGV3LRd9I22vLY2L8dcHEqFwC5jCOPC",
	"KYFma7gaNwigT+7EBR2dytyx/+smW23yNWjP1GpXfFfD3K+a1Bmea24d7sYubc+yRkFF4l2b3S25dVi/",
	"Cna5k6soS+qveZFItUA1jUqgUiBxLkRy9u2bctDU2RfVJTZQN5uURaYJ/3k8fnp6usicMi8om41DGqSL",
	"qqd46X579mVOOCIcYXT77u4Lury5RvnzEZpShsQc0K9mQKRi1fKWF3KFRMj7+5mjyZl6v9SuoWc/Xvyg",
	"s1hAjBNy9vPZv178cCFpNcFiriAyVgXidGBBdZ2/gEAaXmQSAVIEy9EtiJTFcvUR4QLRab3NBfoyB/2Z",
	"cDQlkcoAgSaYQ4hojJ7mWGTDyb0GOIqAKZDol14kKHok8CR3K88ABUhJjnJNavEML0Coh9/fXs4kh539",
	"kQKTglITyNmEEZiuENu5Rjd2JGRbKqhKrj779ru6DyXyDFNQ+umHHzIayK7sxXE9/i9OC2rClgiebzUi",
	"+PyrJlo8k3vQoaJcY/Lsd5MPsI6S60VCmUBYQ+8C6X/z7Ac0ZXSBMJIKGWKVzUtEiRzudcDeyPm0dAEu",
	"3tBw2Wm/uSyckBgrPKwyaA0Cv01JBL+bm2cN0l2g9e38bPyi9vVNd41AX1qqg7xVvyuK02aTVRjoBm+W",
	"t+bryrr+Wh/yE0VXBkSN2HTyl1yMoMlIldK3oswsFl0L9ESiCMVUIBIHURoCioELCJGUUBL8sk9EHgBJ",
	"/QvhOERakK+My61s5dx2N8JvthfU46HXYY0q91c7a2BJIYD+okAV/p/vz861iFCJz3MJwfLtZiZCXSDC",
	"Q0ZwskgiUFIiSS2Y1XfnFeSWsVTB7GW8RPJoO0fKuoUoQ1onrnQhselSIRFFEhNAZBZTBqGFr9MKZtfj",
	"7i0g1dpsq6w/VhHQIx1u4yEHcBQh1QWZLnZxcFnEX+9GJJTXVJy2K4s9l1SiT1aetc3P1/vbD0gdh6hg",
	"FXUcQ4jmwMDG/tVtehywRbBAl3P13D3YdWKS8G9pvIzou4xVxYZkSkTCTHxY5pCCdgvLldLiPaOLLQ31",
	"hW5hIHXh2gh8H/EzWaQLxFTtEI44+RPQX4xfBJc63o8//PC9A7oL/LzR5L/dqZa/O4bP6V/fxDcHV2Y9",
	"v9FnTG8Lz+bpvO79a7SHc2xXTg0hcPAwCkGAulGPVVaDkXppHufOpa6z5CoCLFUtfYIjFViHTNAmV5c5",
	"KbnVMEjd+wIcIwYRYA4oL1SEjJEo1C0dJ9G9+bb2GaT8Cx/Q22yrx42W8YuudfRtM/xIpUp980WP69qQ",
	"J8Mwh8J20eRUF3QicXUPR5mBRCqLCl5IwQvlULQq/i0L7yYm1i0z0ipPDpx4s2OhOrCpxrVFtqhE548r",
	"aWZGSdlF361flvugvE/JsMMFA7xQJGVva71AVnyPi2iBHR871fQFqOR3dcjCropVffsbrYNcc3HsguPm",
	"LlZUX9WTQA8I3wThRUWGg7JtWG2QOjwAxfC0QjN6FynD1pPmhvKVDE8mLVY/ZgmPJFp10vLKvNXZZNFE",
	"oa1EMSoNPX4pnLm/rSHj//e//4dXsYTKXW2Mrhq/rTTqzTxogf51PKWdDYbHIhHsKkPJX79neTN+IaGP",
	"wbwLl+suJc5eVwduxKEn3TcvtaqyVOXR7ij8NVP3yrlRETyFWa06Mwl7Ncl3OrHSV3lgbYcJG6QLPEOQ",
	"5s4JR6DRXIbhqjoj95vvw6rLvCt22TtBEBrn03UiiqaOu9NkCoIYv+R/X3udPW4c6AbvSt93fdjckXgW",
	"AXrnXOIvIBrWtxm4D1+RKWG6P03GRVoHeaWqHYk5dTiPw+0B0SX8zMGYT4SeiJgrcdh+n8vXP1zl1hKA",
	"q4q4U9TknepXuEapM6i0r4V/96VOr0PVEX0CNiq75g84bJTBHyTAVpg8B1+j4FU9b4qmK3z+o8t8F/Yq",
	"1hgmHAYC8CeAWwmwtQhA9dwXAUyzOgo+Bhk5sOrQ9tKUN7S+PejaDcMjw1pGe2y750pYW4msAHXft1tb",
	"UY22i629EMeuVDpFoOOXaVanXepyyaGLOjWv8T2FZ8IFiWcOarCsKN9rXzRKk2XjslAah8AMEau9fJlD",
	"8Q/C0Yw8QowwR9/F8PQJL+A7lEfCZRtPMOcQov+8+/wJGQFgI365mg1ov939nRs/r70SbdVW5yvGi17a",
	"xckuQsoXEf7K7R/V2aVoQtiwSr+c5GfrXkGachZ6bxX76d4Mm35vfR06HwZfFX8e+OGgVi5JI8EMYrHH",
	"g6DNHo8Edcmcim58SuJbfTwyCjsYzSMjOKVk5PbPCr3lekmjtvxKKc7TTyD2ulno1jm09uYgkGuVUoVR",
	"V3/rXXNHxlPvS9CreiPq+7XfjyJv0k2Z91XfdClbjHT1U08nVNkD6R4tvqfWlnazD2WLanrXwQi0hs1e",
	"IbMDFj3Q1463AWMbYCwBNjIO4XWP0GZfcJenZxGYlNWrtCDuBthVlv1nuz6grhCR5nySchGmvTujzElR",
	"BjP53UfZ+EZKH4nXVZae3tjzsinMccCtOnbWp5rwe09ad79vKytIbZbVq8CzSuvVRlZ5fbuSXmiQ2Gvw",
	"ZRVz4xdlCvS5Qq2gyHF3slD/bm9RK8s0x4m+n7dQVL/5RXzKab1ed5TcvlInI8sKcO8G6DZqvknF1gR5",
	"H3ThW55t1w7WLgFzXI43e6HWBveblWW0+2BUyWOvnjhOijgqT5zDoQjtj7MhRezVNSeNs+sBhKNOumS5",
	"p59i2djDqmXel3oMGmd3jdMYBErLGQU0fgRmyn0dwfXvDeaA5HTa/q4SGZJ4lpkkjK+HmBPelLJQmyhK",
	"xomrHAx7fIrZitZiL6rdNe+OhWqyCgLjcikBIw7qZqCsTe87zWZ6nQkCa5pvBbDb13m7wrS5/XYT9dXo",
	"UNdMbabDrI1XcjqTIHM0i+gER6Ok6LyzfFkeyDGrOhWCL5DQI8F7w7S5fS8EX641rql/OW5/i6kelAwE",
	"I/AIpZcZ5bCg8iiXjeQEpLIq/4yWaEqiCKxP3Ht7mzGpaW9LMEGmFP/hK15FabC2TDy6JZpAROOZ1G8E",
	"LaV+rSfT9unmTsljasXsB5Vm8mP0iC9DHZW3o+58aqmLlAs0AaQLMfyfBm20hIS+xJy11pxLxjkK03UW",
	"cKtodvLF+IWEP36Tok3QgEajhS5XPl7QECL19SffRN26qyvNSLG9GzOXqYz+Uc60iWE8Gw9lpdYb7eF6",
	"lWiydPgRdV7o9lSN6nydVQ0rHA7fq+jHfob9qfd04Q56v0m9aGj74qYr+TS33y5DNsofXwFTlvztYuZs",
	"C2Kz8V3Nlv+/cYlV6dL/Ld3z5DkiDWEvnomteK1y/IkrExZdAofhSOsTB/eo0RM1NWmxizQSJImy84O3",
	"aacrJ8hlGH7UsDzKU8TzJaXzEeLSYBvvfS4MtKuBO7+3Haly1/eF0KWDNbLQMfNPu7TeAutkP6gkpuqv",
	"bz58JC9Vit50oClPICBTEqBskG58dlP0Gjitb05z5jctUNCDUU6Tn/pb0R6JZy2xzVFkDD9Z87wuQJDV",
	"t2kisXJx9F6fybI5OmvfaoUoX+JJSPlO9GFa8PGL/qPx8ngLC/qY0UZWuE0V7lLV9wq6UbZDNdFF+82y",
	"QkV5XaVevOFo5KHt21ptcH23kGBjTTwNUMxVsVEBoX7kwDXI5hZ0g4EK41504dwSzHd4MJwga9pHDcok",
	"30d8r4VfzZvKKk21aX5Hyaqed6QaPW4mR8f4EZMITyJwHsFf5oDyVjYsZRxeiIUql+uypgGO0QRqEsML",
	"v61S4TLfxSAejlg8bEjLikE5EdCcqnM6hUCQXEPoRMWY+ZHwGifbVb76FhoiUzTFEYdzxNSazXKztRBW",
	"pFTijiJ1R1Z8eeCy/XGZhlC7uo0RB6F9w3G08FO7O2rdvVbJPXSluw7WbR+lWykvPbD2ZlpwAxttQxs+",
	"EhbajTKsGnpowHb2K/SBXDkWFKmymHONK8I358dBsz1Ym5Qmn65K53pyHP1DUpsiqZACRyroIkgZB1U7",
	"NV9ElyFxHCIchmWVNyPbiHDBLzoT66DCDuzUwk7AOaHxiAss/NxzdQdVRbcc3Kaywy5w0kSkuuudmmoo",
	"rt2EFgGLJMLiED2mv+RLG5ym9+k0XcXDqbk65QyyW9fpDOjH4D3dba2DA/XgQG11p2wlo5P3oa7Ioq27",
	"UWfwP2BP6pYlDs7Ux+tMXUHtSSsZg0v19lyqHWfK4FXtT3vbcKxuOtoH3+oj8a1uR+LJule38dDOPawd",
	"uBqcrF+xk/UKEe7GzzojtMHV+kjs8I1Usl9vaystDQ7XfTtct4F9eCsbfK6bNcJTd7vuJlOPzPO6AcmD",
	"i8prdQvtSNHH4X/dQMmD/8rAa4fJa3vzwrZyy+CIvUVH7BYIDzz+Onyxj5mRdqYkH5RHthtjg8Z7yNar",
	"E/bLdpPsoNoOTNXIVD6uvy7v3QaK5G30NiWR0M6Feo7r0EFVpc/epFSrYCOXPCWMy+ODp5FwzKWabDzR",
	"Aj+baRQHa35yzLjAzx3ns43yx0ZrfpqDmGc1PYgqIQOYBXOkZkHq9XGWIfbN8jpE2fS2tei+Gy3I0EZG",
	"fJk1SzLdBNAjgScIEYnRNI0iSUFYudvblyNbyyP7cxwtD1kaZWxzxA7nV8WJpn/5SsIOnub9epj7+n1t",
	"zeXLrgjzEYmJIDga4SAA3lhaw4xzrTtc6vb7iYYwa0BmEcdIpAbuSMMdCfoAcVPtIgvc+6LNykx60Tde",
	"xNrasXdP2coKbtbyl63RVjvXWDyg3aasCiI3iZ44Bl7Ynd6424iYY4iEGSJghgiYDSJghsgXh4PlGgEv",
	"jbLkzVKZRuRNZvPjYIN4F7ckaVzh3isZHuZVZc8RLm6+PolrjbbIBsAEmcr9AB+/YCFYs6fzAywRiafU",
	"ygnFWL3yQDHNugFfl5lhFJXXfLpP5RLv/eibVgobh/QpjigOTyE6qjeIu+7QykNcMioXlAGakghWPHTO",
	"kWRETGISz1DCyKMUjJKzcRyiJJ1EJEBBhZnrV+63GQr7kZW/wvJOLv9KFWK0cfZqi04ShwYCxEjX3a4u",
	"akrZAouzn88mJMbKLNlaw7ibjOnEKDOIJeBhYJReGEUDN7OJFvDXj2jyR8kVCSb2OKtsgCM97daixBGO",
	"w9Egv3dHlg+wlASoZHMJMefqh5mJOSgLcSXwUTYK12eBbQj1bw7sEXhtEBIXAWwQlk4TJR4v0Oc4WqKM",
	"JmyHBiIccfyon31+hWUQUfyA3r5Bo/pcHMVUXDSy2GUcDifOLvg8TQbG7omx7xVoaxwIjxCLFEfRsswV",
	"Vm7QI5zCcaPJcFTWQgeS7I0kqZTmlcNFAtCPGo//1u8mzCwVYsC0PaQx7i/Pg6haNyQ7NN/7AxWDEGJB",
	"cDQYCreggGmEtkVYl3I5HweC/ah+zKhQ7sMNtvzr+BFHJLeumh6ecNNm/lszy0ZGzta4XL2uVj5tXszA",
	"ovt/xf42DmGK00iMKsmfG0W06VFNcnqB9E1GQUkqYyTkyjFduwBCaHWYfKuHKqWd2pOXz0AFFirIwhwV",
	"Yq59vE7q+NzWK+MpR94Z+G/rNa/2VtcX1pzUBo84SrGAjM5ykxg8Y7la4+o0Uo5qTllkXNxUWmxlZkzw",
	"UivhU2QGqni82QRQpqG80+21X9MX03qF5qwevwZam3oxpxxYNz/v33s8VMtgGCSonwRtpWkSboGeSehN",
	"y9fhydPx9duBhrdKwxK9ymlhExqWgzhdH1aI+D6b8JVTMQ5DIj/h6IZJmAiix1nRZs8H9XYrhL3queuk",
	"Z52iI6/rgKMoz0GY5So8R09zEszRE4kiFe3BIURPc4izVx0dOvYAMUeE8xRCdZNPMBMkSCPMmhJVrThG",
	"9sQGQ8DPIRDlSkzvC6MRXGn3EimOvo1nDMfGguQR3VvJa5gRr45spdMy+cnfMj8WYBk5lyLHEeHq0h8I",
	"KgehTyC1EDTHj4BIrExCuNAYy0Q+J/ZAyV/MTgZyPsJ7anVPQFQAZWlrn28zurm/v37r2F+Vtg+GxWIq",
	"Rj5spvjIxiohBR7/73//j9DsoZlQZbGNQxTg0icxh8Wa7POJDhw0cNBOOIjEXOAo0ohOGH0kITCu0jmr",
	"P41Z0BXHeV3qfmO6bPo2cbLpkw3A+0L1Asd4BguIxTgBtiCqlFyraqx5XBWrk3pGFlBv6PcyFXPKyJ86",
	"BKQ0rJaBE5ACTwcVkj8hRJSpB3OVDwQxmAKDOGhIWPMxX/NNacm9ZmGuT3ibr3OQdD4BJPuknDw0xU05",
	"2/eI60w0LR2Ogr6dciamIZx2OZdbmBEugKlc1qn6SwJlNUES+ohj7c7Gsg6V5tX8XmiEUq6bE52JQoIt",
	"Bgj1dS2Q9z+dtokwCES0RJgjHOJEDsjnNI1CNMdxGAGaLBGHOJRsqafWHIQMc8jhMk9Uq//GJ4Xi9Zmp",
	"1W/zN/3p9/Uzt/kS6vhF/qcxBPM+Zg6EriSgdPhsSGgN76SbjBpnEOxBLaLTaURiyOv4BjSNm33YSrSN",
	"TO+8qK/qXaoYG6eLCTBEp3lLZR43zW3p0wqGf0H//Oc/z9SI8o+fs8G+2fSlz3p4UyH4Sm2iJ6N17odN",
	"YvG3vxZu2CQWMAM2mLG3RIrNbjorlKeTSxvKqVcs7kx97TTWmgftBs+0aXLKob+0ZB/xM1mkizwtGSd/",
	"AvqLcXhRWcp+/OGH77eTo2ywm+yFLRIthTr4sGVdtuHE9tmMNXixHSYhdHdjs2B00M8O34+tN7Q5CW6o",
	"V7qteqVDndLmFED9lCcdypIecVnSoRypL6vsvArpUH30ZKqPZjSX8vmIwSPVyDvp0/8m5bU8/wVoUEIj",
	"EizlxZsIrhNYo/vbD+i6nCAOzTFHOC4+nyMJYtc4Tdls5XJuC8z0+HjyS0QnOLrV8vdWZ1vfypNJ2Qhf",
	"C44Ywkt1eGnlpaIc+OETcXpb6lyNAjncFIRucqERtBc+rpac04SSmwjdZ9utGtzL72jDqhgO7+x1TIL9",
	"1R/onvN/10ZCjbBBqc7lBC3lcWsj++IYyej+wAtXtavSGT00iw/tHDmSmPHJP4s1WI3G3JiDVs6/iV2m",
	"oGe3eGteTUWW9Sni/fB6svxae6uRWPuO+20qo85ek9y2EFLuTZQT0snJhqLqGPco1rlSl1P+UxdNKdXq",
	"apYcV8V0r6gap4dMK+CcpdJmmugaZNsKsAal4/UKsYaSnkVJvqyCmY1wqprOMbGZp7V9I9m2Wvr7PiXh",
	"N4/6cdV6xI7y3iYKxEMaOri7lG194PHXyeNND6uSGPsybDYyRV6ju0PJ2tLhtR6x76VQ9EDruzzPOlDj",
	"jNE0aYtSUYUdVcZYSX66ixa/WSheKUWv0vjb742/6Im71pbFunSjvTjKy78HNASkhq4ee99MuIQqhduP",
	"rW21EGVRMrQo5XmBrmcxZRAiMkUxzLAKNaYsW3mcRtG3i958+RbGl6/wmq0VG91ohQfu7nfCQig7MtS2",
	"Lg5G+mw1Zk7tr++IOUlDRxc1d1KEv3tj1/7IsmJAG0LyemWeDmIt5e1Jcao6lerRrlJdNAume25NcjNo",
	"JoNmMmgmTZpJNbFJ69N/JTcQb/OPKDKuy24fs0l6FXl6js5vZ2qFKF/iaYdDrGS7WbFgfvN4rrHZMKsh",
	"rcqEoya6aHy6qZBOr8Uh9/J+Y6G7lhTqEpar4XW4BtQ8Us9mQL7w5NT9WIdPkBWbbLQ9vvBYuNQ89KyS",
	"U1OxhWNkUM+Xnxoprisyx/gRkwhPInAesV/mgPJWNtRkHF2IAduzUIBjNAFLAK4HUpukwGW+gUEcHLE4",
	"WJuAi9cWvyyShia7kC5mfnTb7fi6Kj0TdbO465VmyyAM4ax8Ee/Hlv77wFonwFr522eLDo0RV9kYLE+h",
	"Tl3aX5W+LWHo5DTpOkS3eF7u5Zn5FO+vzc5LTubZUMU9EsbpW8NVTTzUWju7Fed9rvEKKs9XHMxX0pOt",
	"x3+DunqAhiRNM101yfWENfqHJDGdto4CR4QjBkHKOCAcL0uujR2GVI9SYVjWYzNajQjXLhbeFDropQMP",
	"efEQsEcSqNJWNI2FKqXSbKfXubhCCFV51TA78MxAyAxko9U73eRSt7jnzpzLWznt5PhD8cU1iWKdnILt",
	"uQR7yiE4JA88YloTwMVIpTQdeVgxgQtEpnniWVXttUhsyleUPtmcZ/8mERHLcgrZ76T8/66cPBZHUXU8",
	"65ErR1WZZLemBfYZvH/KtCXljV9WyqpkakxJuVEqSo0XeTQN2SiHJIR980IuTZpqYVwVrbyyJxh/kU0T",
	"FCSYaR7ZdCDV65DJL4PvgRFgycBlsUyViaIPW1Q+QbuK7my6TsGWEjLsrKJOjvZcnMVAm6RyrJBGK4P2",
	"mvXFHx9HQt99Fw+pewxX8HRqLDPm6WSU/zaSgHSrXB+MLsXTSd4FqS4O221A4ymZpSxLeleqE6gPEpSP",
	"Y9XZ79JJvo8vy8Q3U9BwthyucsMghFgQHI3yDFuUNWs6eZfbco9d+yTL9XN0GS5IfGgqQRnARvkfZf/1",
	"z2Ku12z6bSOV+Vs9lPnPPhOavwrkdc887kTARgmTDheW+0wXvgtY20ilJWJZMrZqguYEGGbBfLkRM+dx",
	"ygP/NvCvRsr4Rf23C6sq8J4UdxoQ9c2X2wasDetrVA4xCQO3WD/E7PcQyogcG9duq+CHGwXDudsXf/cL",
	"7DK1wGNmmm1LYhlFyDS2O2C+e8wtdduiCbfnjJqreBfJ13aOKENTEgkdcQsLNMEcQkR1Gm11s0YFqan3",
	"FAjRHJjV9SrfUyN1XiaJnJbiVMwzoWcM1Lb7fP4ws/5LyXtGFyjEwjWF/CTbbDTJF9o2xRe60QS7eVW6",
	"vkGXYciAuzyHSFJ8P47Hq3NbYI22XNFpxhx5bDX67c4UBD3fin2pNvs9B4aUXcU2fKpdbA43PPtIznWN",
	"1rE2QjaqYWIOGRFkldFz26X2kskE53/eff6UpbZQL8eN3dwS8kovqs9swRII5cm6pw4+YDy7FYIafHvw",
	"yO4O2tYu/Sgr6nY1mixHEgPjF/n/35psreqa9GZ5o/HVn3dMPSXZcdOjo0xMBsbtyLNdmXq0jefNMgtq",
	"2FttBnjGgXh1NR4SmqQRFvAfGZa2MOYfJ1F7whgfD9Yho7qKQJeJoAxhFXskaIJMwIJan+LVOxCqXoRu",
	"G8xJFNqrD5UMr9s/0DzlsbXZGm/TOR7r0m3c7Lxcjhk2iTdVB94gyJSDcSdp1p0TXE5ONNklP+3QC/ow",
	"WdFCT35+QUbvUTTyZmnMVWuqYyXQNKpZh6dgHSRS+3YIslbqUMRzjohKscYRTyeanC5sOQetxPOqhbTy",
	"HFKHFTvxqnHe5/dVBq3TII6tprI1FuL+ktmq7RxdHttBXO+VbjLJPySa7Ze6nSIGFpOmxLJZgFDp1Ws1",
	"xey5efmCUAXAMhVgJmjt1csmMz6a6VuYT9lfzLPCBHMSIBJrfVwS41+o/DxLMcOxAB2WaxqT8FwtUnLQ",
	"uTlgQrlgxjVtRpjrV7NzBAtMonMEMZ5EECo+yH5Fj8DINA/21F+mEJrdoIjED+ea1lWh0gv0iQrQ/rxE",
	"oAXg2Hj3yqmipQ6kKoLLz1HG1ggHckSuR5McNIEpZaAMTvKfudHp+x1VHVDPZVlJhCEQ6zVZXXbgqlyW",
	"NSrlrldCXJW8d1FktbXrGjpB+QGnvpULNIXeB8yvl/XWuIG4st4qOVqmFoeXSI1eXl++2ysTtJvRXHuu",
	"rhpQ6+mnJXz1UST/hZPEixn3k93WCYAh896Oc9y2c2VujD9GnvRMAOagx/VkpGc+sMY0t+UstnKiIoGN",
	"cZbx5ey9pQAbWLzf5Jod6HG9rLXWw+bLvEghxm05xDqQ5pD7a2Ceg2Oe1ry0RstdzcfnvgI5tNpXl3p2",
	"9QblnQiz2+1xb/VLT+p22KRMOvHXqKJY1cjXlUa2SiUd5M1mGWQraqI/D+1NMxxMLQ2UsGle2BVV7Ymo",
	"arkm5WsU1VK+CopmWVUdZcu98KegQYEbaNxG40SlrxDLURYkMCaLhDIxKiITjsCd8VqtGWWbKSIelDVT",
	"xUVM5HllO+h034198lup7jf96feNHzZdnnQ18HVlhOsMfDcGfKt2FQuxxFzgOGiJJK7hxao+Xudj7VgA",
	"WPd9FG68WrNBGMXwVIeyndwrUN6+KpcBM4Nlu1rX1mMNF6BNKHn8giOCuc/ziTyJ26GuG2dwP9vWdlrq",
	"7rWvq8RyfT7zdSeIY2NP+zGtqKhXR1A/NN+kVTQPLO9k+TE8S13AeZa9U59Rkk4iEqAJow+1WMwpZX6s",
	"p8dq08bfK28cqfmn3BW7bTzoN9ewBy5cS1+uUdFx+ZdmwuHoXEyHc+HAPE7bKWlwOt02vXeXTUkCrCWX",
	"qtQhdUOTh8L7VNNmlCwdagso/2X8L3432y7KR7GCulLx6i6Gh3TmSbD7kFRnahrsATs9WBoqFGYygXra",
	"Gsr46//aoWfrfvmw99vXFcQwiSU21J7IK0NK5lroa48wBu8NHpG7WiXMQidLRMIOy83lwC6NFL60NEiO",
	"YuBVPUthu0gktdMY2TXY4iYt09nRi6sN+bhZbOV2/PFL9udXI682fQRY2e1Nga5XabJYCQrK3q1cbFOC",
	"9hYVvAdYNma5/1V+71H6yvE/gsAhFrizzP0Vloec6iGigbxI6900wPhDqV2REGTIndcC0vGL+hd45NGw",
	"QPjNUv0IfeQ59cFwaX6P1C8pB9XLpJXVXd/jKJrg4OEQcrls/AJ9dFnUooJ8evNqKJO7Cc9KIopDCLVn",
	"w5RE9lrwZYLb3LMh24DFs4GbjKTre+O5swRamX388gDLzVj+zVIeHHvme8ciVrlRwLMYJxEmXTEzsJdr",
	"5AcD9z6yfB4A320lQWdEZzQVIxxFR+IGdgsL+gg6g3ilpuqFQz7K/V1G0eEV223AiqpThqNR8VZ9BJi5",
	"0YtGetEqr/Uz4ep5Si+QxIIiXBxodoyZYVxv5/Y8ncq9zxRs3UbeTzmezjtwGYe3JpCq17f3dmrQqsKR",
	"EYP2NNUqTQn1qmx2vEIgjfRgdr++qM2TEE5IjBW224WvXOrva9mJm9CZ8vmIwSMN8gvjMSA05XPjlo6j",
	"xf/+9/9wVOwBJTQiwVJjdZm9QqtoiDnmEtNYAgKlLKqVvibCgfeUz2/zGbZ0Xd6pFNcBmI0xx1GeksHY",
	"ME1BHtZQDFyJowPIjnxYWY0PP3uwPkaO0etYBbL4Uqjk3RUSPfBwMg9pblBX4+7RZDki4fhFhQ75veYp",
	"GFLLdV5/N6DbLAWsGgT9ZbJE12+/b36xw4gnEJApCdSqjGBfERUuGWRb5Q87RrENVZWtH/BbAAmlmmyo",
	"wTanJqvePYyt9HiTrqD5FQVGlymklamLIMDGslv6ZioZCkSGVpNrKYOx4q6gFKbXKAGuimlfMfjPm3OZ",
	"aZCZ5LXlTIoFkKtNzPNZmAMdEdk+h/pFozyrwNxDtRqUoDWUoMMVz33KYKue9RE/FCK4TKb6h8kyvy/J",
	"azKnC5Pk2ZHdpaR8HZf86BDSv67sXk3Ec5+2uTPYUucZLbh8xcUMEIl9hbxd2uwn79uJcmNTVhtJFVt8",
	"x24lyjzBTdc0E9ugur0lbznFI6CdLLYaVKTOj/5CinJqOrqYohNWQdKDoqLyBXOIJ9oJrddkkJE+ktD8",
	"XNEztdSUS3ZdYHMnCPmPT7rtZlfGNjNW48KMwPJY1SGYrw7dbCVB/R33mz6jrp5dwRuxbwSNHfuv1TRd",
	"5uxuFqxNDFeFbnmE0N6qRCpAjujUbWU1kqkNbif+TnUgIqghbq4w3Jisi3aburHPHDWbdLHVdJBMh2Wf",
	"WTXN1PD0ZnlVNRgMLLpvFt21XcdFyOvYdEpnRFcCzQhzODYO8dhoppqWmuq2ymGm7rDxrnrUzwfmER/0",
	"w0DjJahSXr1CL92ShmI0TVU20/JxkdHxy78HNARkqff4zZgalMPuLqpw6YplOptqUd/sAl2r4qohIlMU",
	"wwyr9K2UZSuP0yj6dtFbwa6FKdgVp4sJMPWSaUp3bWeFB17T6yiERf4sJ+e42KeUODbDsNWat1Pjy1YM",
	"Z8djHO7PwrJ383AHWhpMxVug+GZJpMqWdlJXdAnUVm3F6ZZzL/t31laGQ3849I/q0M/C2MYv5q9vfr6G",
	"mfNuORbuwmGgvdOftxoRe+jHIy/teTuYEsDF3ccvN1c0jiE4ohCeL8AFkitHQb50HYMTpIxBLFBEZzMp",
	"emJ3zRg5yN1CJKXd7yf8daMYrOZjbIuVu63HWvlIazvI3lAaAY7R05wEcxTClMTAc/1L3ZVXruBcGTyz",
	"Ytd5Feif9fV9V7WvL9GdaippTWASa7IyhcIzIy2VFCsg+5lMNeTQP9Mffvjpb3+kVPy/8IwDUfo3IhxJ",
	"lnBsQ4200cIz0MoF6grmc8y1EqtLmUPYNPffizbrryFDeo5YCUiiSU8CICu0rjVp13J0o60sxE59EkQK",
	"YbyMsQjzMsLOy9+UDuX6qOBXRrW8IZT+nVWjLzdZpFygBRbBHClKiZYuaMivR1LN3c47atxPqt7+Kv+U",
	"Pm2Bh/LRNtrElzkglXROykwco1qmLlX6v1ZI1bYgEiaXJn3dZuuRc1yHCIvNF3SvhuoBzZJ97FguvmwB",
	"ydlgG+3go7nQZNcYTv6E/MBRt5off/jh++3cVizg04etoEjHPajHvyDlgi5KBazOs7c/HQCOvnuA5Y8/",
	"P+IohZ/QAyx/Mn9/51jmHz3gOJNk55pzJaYlPlCc4V2JwgtkskBl+5vAHD8Sqo6AhMGUPI8mmMszHi5m",
	"F+doSqnsPKX0X76/QPcc1C8qFW88Jc/ZMCtidUppmWxkc0VLprnrstk91qQzcFYZoPiyBQbIBjvkG7NS",
	"FI8yZFhpKvcGxPqUngBKY/JH6sj7offajxlPjt3u/GBrtca1I0Na7b4xKsz4I7sZ335TOD4P6wNOMuhO",
	"6dQC68G4vD2KqLHGOKBpLFrtyvI0KIynJcuyvgHIzzPyCDEKGBHACHZfv6/UhC2kqe9/+qa/xQvniVwe",
	"tW6jGLsRhNu5b+QKVPNka+q929cMMZsQwTBbZmqZ7qn0LxxFWmUlEIUcTSCiT69eG8wUsmb87UNty1NH",
	"kVj8609F5igSC5gBO1ZFri6FE0ZVptEGjeTGNNmOJuyd1vJQNWGHLlGG0iGaxp06qm9NCmddef1djp+/",
	"2TqzxHhivMGL0uZ6Zl2WOfbb17TD+8YRkHhP1anbM9LY35+0kv6qL4m6FH1WcBLCkfx1xAVleAajgIGy",
	"WuKopbyXcdsp2usqX+fGko8ZFIlSJssc5MhMhJ7mwCBXGeWvEFqV6at8pXJLd7r7VT6tZ5mw12822UGd",
	"9yr9cJUMtTF8wjRCM4ZjUSUEB6q5ybA6oHMv6MxCY1p8Qx7pA2TYVfo9nU4jEgMS9AFiHSSjksoGaYTz",
	"opE67bz7TDfo38R75HQwWbvd6GAhZ9GXoMj/sn3qyaVxo63xqtRs4PBdc3gB/PFL8Y/r0M8NrHTOK/tB",
	"Ix/nbQdW3iCqrISjXZPEWGL9ciqAjV9ieLph8Ehoyq9WyebkhOyXOVRUXookpBwSd2sIbF3GHAv0RKII",
	"TfTlJjEIQxApm3r2Qh0RLi7Q9VQlNxRUOfueqy9yG2F5zPJw2s5qG8u+cwfJ9JXhriahVBUAFbsob+0T",
	"mJM4RDimuoJ1WTpZyo1mlH+2blhy282rmeu+0PfKvWfgrl1xV1fC0tyQk5dhhxJaFWs0GosyQsuQvXtS",
	"k60+4AlEJ0JovVNQY/KYEglFEuhNOpSxQWnkHHrhnxYCDAnHk8huVTpVG+RbDRP1BFcWGgVJKH/GIvBC",
	"zWShEjOQzRR2xCQDzxCkAkZYuf7zkX7+PmF6uQOlvBhX8ZLrqI6swMqpVP64RAGOURCR4EE2M4As22EM",
	"TC9s1PRON7/UTd4Zp4NGoNcsDisvqdrkoKvMrv9q+yl3x+AQ0DjkCEv1zNiZlUcGxHIzyrH2AWIEzwlh",
	"ihOs7/NkCjzBmwUf3EJIGAQCpYw45mGmyVfdpNtb8vE96Y2nEGosjLIizY22YZVzOkIRnZGY12r2NFmJ",
	"32cTZf7VgzFp18akOq6LGt6eYYUl9OfFvFstxB6oHwxMHhetOyv02+qF95rezE4Q1UiJ+iXKVxZsIthq",
	"GXSsD/866c1QLut4KkUMYlxTds01toG+HU6th0EAroriZe+6v/3V4l13PtDOurTzov5be0VyuWwpKhoO",
	"7fVHNeDuNUZha0hykA5ZJMA4jQ+wOml/V3tXcX4DCWjWc64rIOtJTq4IwfWlogPvuhT4SSM8u/+s1hZ3",
	"XoDRZcQp4hCHKKaCTA1W1UtEFBnPmnL2o7wU7v3tB9mKxI84IrnbYz5hlse2ZB6S8zUVOe/rmcI4D42K",
	"DDW++Xkzt6N2MOI4bKh4+1mP40xfMyiivT7E9JE/t0Rf8polRgnm/Imy8LRtyQKliYmgzQCSiwIH/6fi",
	"VgLwJoNfP87RxTNGu4u0u21/SkuViIZniXWfJRQc5e+E5RTYTnRe7xHBTt4jWM+m/+0ar1QmuQVOEhLP",
	"mp21VU66vKUjvEXny8zb9BgOrOdYq7wNkr2BnfT1vIL31cIHPvFXttIHmXW+QisNAVplarkq+x+/ihIt",
	"5vkzpzjFE80VW1ZhmvNb5Qw+V9qq/BdOEh9O3E9tT+f+T1mL7fGNxMKR5WO3kSez/CfHyJGel0wHOa4l",
	"H8f4EZMITyqRypaacFkrK27klVyqPhONllreL0+2vsyXMvD30fP3etRYlGppokaYTiFQ2Zwbzpkvc8IR",
	"gyBlHDjC8XKlIDj3J8yrUgGZboU9NINkBhrCSsnU+kke+vvAOqfBOnlhpBbtdrU8kvviY9dmb0sIeDX1",
	"Bsv3Ju/CUp2ujHsrB35SV8ImJdKJvlZXmyNlgQ61BAsi8Zc1npqio8R+RT30ZqC9aYSDccVNB111NDcj",
	"KhVNhd8ZPU2/9FXVNMmuM21INclxL7zpZ1DcBgpvoXAOcThS2eiXw1NH5alDQyV7hq+/flxmP5qUw7z0",
	"FKJbVJ5DNIwNN+mOOAwZcHuUhlyKyuG4PKAIjdujehHJfAWaoxPaHApswvYOtpM5d/AfcIsr+aM8FVV4",
	"yW8vZzgIgPOvKvDn7OfffpcUw4E9ZiBIWXT289lciIT/PB4/wDKIKH64gGcsR7wI6GKs3GX0Kc4VxRm4",
	"vmSrvhQCBw/oLQhTj0buLvuWijnEIpMHRRrbciPDhpfZYYmugBlfHrC0u9al7NCl2pulwS3MCBea+NAN",
	"jUiwtLWqWB/q3+8CmoDlQ/WnTDkv/2h83Uu/1EodVL7+CpX13TAqaEAjc9BWmlby+JZ/Lx3MKz/z2g/o",
	"L5Mlun77ffmD2q0VHJp9vv3+7f8PAAD//y9I6rJc/AIA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
